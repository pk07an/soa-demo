/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.meila.soa.openapi.thrift.product.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-05-25")
public class ThriftProductModel implements org.apache.thrift.TBase<ThriftProductModel, ThriftProductModel._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftProductModel> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftProductModel");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField IMG_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("imgUrl", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField IMG_WIDTH_FIELD_DESC = new org.apache.thrift.protocol.TField("imgWidth", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField IMG_HEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("imgHeight", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField MARKET_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("marketPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("price", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("amount", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField SALE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("saleNum", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField SHOP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("shopId", org.apache.thrift.protocol.TType.I64, (short)20);
  private static final org.apache.thrift.protocol.TField SHOP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("shopName", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField PURCHASE_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("purchaseSource", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField DELIVERY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("deliveryType", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField STORAGE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("storageType", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField TOTAL_DAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("totalDays", org.apache.thrift.protocol.TType.I32, (short)25);
  private static final org.apache.thrift.protocol.TField SELLER_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("sellerSource", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField DELIVER_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("deliverTime", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField SKUS_FIELD_DESC = new org.apache.thrift.protocol.TField("skus", org.apache.thrift.protocol.TType.LIST, (short)50);
  private static final org.apache.thrift.protocol.TField SPEC_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("specMap", org.apache.thrift.protocol.TType.MAP, (short)51);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ThriftProductModelStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ThriftProductModelTupleSchemeFactory());
  }

  public long id; // required
  public String code; // required
  public String name; // required
  public String imgUrl; // optional
  public int imgWidth; // optional
  public int imgHeight; // optional
  public String description; // optional
  public String status; // optional
  public double marketPrice; // optional
  public double price; // optional
  public long amount; // optional
  public long saleNum; // optional
  public long createTime; // optional
  public long updateTime; // optional
  public long shopId; // required
  public String shopName; // required
  public String purchaseSource; // optional
  public String deliveryType; // optional
  public String storageType; // optional
  public int totalDays; // optional
  public String sellerSource; // optional
  public String deliverTime; // optional
  public List<ThriftSkuModel> skus; // optional
  public Map<String,List<String>> specMap; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    CODE((short)2, "code"),
    NAME((short)3, "name"),
    IMG_URL((short)4, "imgUrl"),
    IMG_WIDTH((short)5, "imgWidth"),
    IMG_HEIGHT((short)6, "imgHeight"),
    DESCRIPTION((short)7, "description"),
    STATUS((short)8, "status"),
    MARKET_PRICE((short)9, "marketPrice"),
    PRICE((short)10, "price"),
    AMOUNT((short)11, "amount"),
    SALE_NUM((short)12, "saleNum"),
    CREATE_TIME((short)13, "createTime"),
    UPDATE_TIME((short)14, "updateTime"),
    SHOP_ID((short)20, "shopId"),
    SHOP_NAME((short)21, "shopName"),
    PURCHASE_SOURCE((short)22, "purchaseSource"),
    DELIVERY_TYPE((short)23, "deliveryType"),
    STORAGE_TYPE((short)24, "storageType"),
    TOTAL_DAYS((short)25, "totalDays"),
    SELLER_SOURCE((short)26, "sellerSource"),
    DELIVER_TIME((short)27, "deliverTime"),
    SKUS((short)50, "skus"),
    SPEC_MAP((short)51, "specMap");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // CODE
          return CODE;
        case 3: // NAME
          return NAME;
        case 4: // IMG_URL
          return IMG_URL;
        case 5: // IMG_WIDTH
          return IMG_WIDTH;
        case 6: // IMG_HEIGHT
          return IMG_HEIGHT;
        case 7: // DESCRIPTION
          return DESCRIPTION;
        case 8: // STATUS
          return STATUS;
        case 9: // MARKET_PRICE
          return MARKET_PRICE;
        case 10: // PRICE
          return PRICE;
        case 11: // AMOUNT
          return AMOUNT;
        case 12: // SALE_NUM
          return SALE_NUM;
        case 13: // CREATE_TIME
          return CREATE_TIME;
        case 14: // UPDATE_TIME
          return UPDATE_TIME;
        case 20: // SHOP_ID
          return SHOP_ID;
        case 21: // SHOP_NAME
          return SHOP_NAME;
        case 22: // PURCHASE_SOURCE
          return PURCHASE_SOURCE;
        case 23: // DELIVERY_TYPE
          return DELIVERY_TYPE;
        case 24: // STORAGE_TYPE
          return STORAGE_TYPE;
        case 25: // TOTAL_DAYS
          return TOTAL_DAYS;
        case 26: // SELLER_SOURCE
          return SELLER_SOURCE;
        case 27: // DELIVER_TIME
          return DELIVER_TIME;
        case 50: // SKUS
          return SKUS;
        case 51: // SPEC_MAP
          return SPEC_MAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __IMGWIDTH_ISSET_ID = 1;
  private static final int __IMGHEIGHT_ISSET_ID = 2;
  private static final int __MARKETPRICE_ISSET_ID = 3;
  private static final int __PRICE_ISSET_ID = 4;
  private static final int __AMOUNT_ISSET_ID = 5;
  private static final int __SALENUM_ISSET_ID = 6;
  private static final int __CREATETIME_ISSET_ID = 7;
  private static final int __UPDATETIME_ISSET_ID = 8;
  private static final int __SHOPID_ISSET_ID = 9;
  private static final int __TOTALDAYS_ISSET_ID = 10;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.IMG_URL,_Fields.IMG_WIDTH,_Fields.IMG_HEIGHT,_Fields.DESCRIPTION,_Fields.STATUS,_Fields.MARKET_PRICE,_Fields.PRICE,_Fields.AMOUNT,_Fields.SALE_NUM,_Fields.CREATE_TIME,_Fields.UPDATE_TIME,_Fields.PURCHASE_SOURCE,_Fields.DELIVERY_TYPE,_Fields.STORAGE_TYPE,_Fields.TOTAL_DAYS,_Fields.SELLER_SOURCE,_Fields.DELIVER_TIME,_Fields.SKUS,_Fields.SPEC_MAP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "long")));
    tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMG_URL, new org.apache.thrift.meta_data.FieldMetaData("imgUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMG_WIDTH, new org.apache.thrift.meta_data.FieldMetaData("imgWidth", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.IMG_HEIGHT, new org.apache.thrift.meta_data.FieldMetaData("imgHeight", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MARKET_PRICE, new org.apache.thrift.meta_data.FieldMetaData("marketPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRICE, new org.apache.thrift.meta_data.FieldMetaData("price", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("amount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "long")));
    tmpMap.put(_Fields.SALE_NUM, new org.apache.thrift.meta_data.FieldMetaData("saleNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "long")));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "long")));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "long")));
    tmpMap.put(_Fields.SHOP_ID, new org.apache.thrift.meta_data.FieldMetaData("shopId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "long")));
    tmpMap.put(_Fields.SHOP_NAME, new org.apache.thrift.meta_data.FieldMetaData("shopName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PURCHASE_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("purchaseSource", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DELIVERY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("deliveryType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STORAGE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("storageType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_DAYS, new org.apache.thrift.meta_data.FieldMetaData("totalDays", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.SELLER_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("sellerSource", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DELIVER_TIME, new org.apache.thrift.meta_data.FieldMetaData("deliverTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SKUS, new org.apache.thrift.meta_data.FieldMetaData("skus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "ThriftSkuModel"))));
    tmpMap.put(_Fields.SPEC_MAP, new org.apache.thrift.meta_data.FieldMetaData("specMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftProductModel.class, metaDataMap);
  }

  public ThriftProductModel() {
  }

  public ThriftProductModel(
    long id,
    String code,
    String name,
    long shopId,
    String shopName)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.code = code;
    this.name = name;
    this.shopId = shopId;
    setShopIdIsSet(true);
    this.shopName = shopName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftProductModel(ThriftProductModel other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetCode()) {
      this.code = other.code;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetImgUrl()) {
      this.imgUrl = other.imgUrl;
    }
    this.imgWidth = other.imgWidth;
    this.imgHeight = other.imgHeight;
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    this.marketPrice = other.marketPrice;
    this.price = other.price;
    this.amount = other.amount;
    this.saleNum = other.saleNum;
    this.createTime = other.createTime;
    this.updateTime = other.updateTime;
    this.shopId = other.shopId;
    if (other.isSetShopName()) {
      this.shopName = other.shopName;
    }
    if (other.isSetPurchaseSource()) {
      this.purchaseSource = other.purchaseSource;
    }
    if (other.isSetDeliveryType()) {
      this.deliveryType = other.deliveryType;
    }
    if (other.isSetStorageType()) {
      this.storageType = other.storageType;
    }
    this.totalDays = other.totalDays;
    if (other.isSetSellerSource()) {
      this.sellerSource = other.sellerSource;
    }
    if (other.isSetDeliverTime()) {
      this.deliverTime = other.deliverTime;
    }
    if (other.isSetSkus()) {
      List<ThriftSkuModel> __this__skus = new ArrayList<ThriftSkuModel>(other.skus.size());
      for (ThriftSkuModel other_element : other.skus) {
        __this__skus.add(other_element);
      }
      this.skus = __this__skus;
    }
    if (other.isSetSpecMap()) {
      Map<String,List<String>> __this__specMap = new HashMap<String,List<String>>(other.specMap.size());
      for (Map.Entry<String, List<String>> other_element : other.specMap.entrySet()) {

        String other_element_key = other_element.getKey();
        List<String> other_element_value = other_element.getValue();

        String __this__specMap_copy_key = other_element_key;

        List<String> __this__specMap_copy_value = new ArrayList<String>(other_element_value);

        __this__specMap.put(__this__specMap_copy_key, __this__specMap_copy_value);
      }
      this.specMap = __this__specMap;
    }
  }

  public ThriftProductModel deepCopy() {
    return new ThriftProductModel(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.code = null;
    this.name = null;
    this.imgUrl = null;
    setImgWidthIsSet(false);
    this.imgWidth = 0;
    setImgHeightIsSet(false);
    this.imgHeight = 0;
    this.description = null;
    this.status = null;
    setMarketPriceIsSet(false);
    this.marketPrice = 0.0;
    setPriceIsSet(false);
    this.price = 0.0;
    setAmountIsSet(false);
    this.amount = 0;
    setSaleNumIsSet(false);
    this.saleNum = 0;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    setUpdateTimeIsSet(false);
    this.updateTime = 0;
    setShopIdIsSet(false);
    this.shopId = 0;
    this.shopName = null;
    this.purchaseSource = null;
    this.deliveryType = null;
    this.storageType = null;
    setTotalDaysIsSet(false);
    this.totalDays = 0;
    this.sellerSource = null;
    this.deliverTime = null;
    this.skus = null;
    this.specMap = null;
  }

  public long getId() {
    return this.id;
  }

  public ThriftProductModel setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getCode() {
    return this.code;
  }

  public ThriftProductModel setCode(String code) {
    this.code = code;
    return this;
  }

  public void unsetCode() {
    this.code = null;
  }

  /** Returns true if field code is set (has been assigned a value) and false otherwise */
  public boolean isSetCode() {
    return this.code != null;
  }

  public void setCodeIsSet(boolean value) {
    if (!value) {
      this.code = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public ThriftProductModel setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getImgUrl() {
    return this.imgUrl;
  }

  public ThriftProductModel setImgUrl(String imgUrl) {
    this.imgUrl = imgUrl;
    return this;
  }

  public void unsetImgUrl() {
    this.imgUrl = null;
  }

  /** Returns true if field imgUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetImgUrl() {
    return this.imgUrl != null;
  }

  public void setImgUrlIsSet(boolean value) {
    if (!value) {
      this.imgUrl = null;
    }
  }

  public int getImgWidth() {
    return this.imgWidth;
  }

  public ThriftProductModel setImgWidth(int imgWidth) {
    this.imgWidth = imgWidth;
    setImgWidthIsSet(true);
    return this;
  }

  public void unsetImgWidth() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IMGWIDTH_ISSET_ID);
  }

  /** Returns true if field imgWidth is set (has been assigned a value) and false otherwise */
  public boolean isSetImgWidth() {
    return EncodingUtils.testBit(__isset_bitfield, __IMGWIDTH_ISSET_ID);
  }

  public void setImgWidthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IMGWIDTH_ISSET_ID, value);
  }

  public int getImgHeight() {
    return this.imgHeight;
  }

  public ThriftProductModel setImgHeight(int imgHeight) {
    this.imgHeight = imgHeight;
    setImgHeightIsSet(true);
    return this;
  }

  public void unsetImgHeight() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IMGHEIGHT_ISSET_ID);
  }

  /** Returns true if field imgHeight is set (has been assigned a value) and false otherwise */
  public boolean isSetImgHeight() {
    return EncodingUtils.testBit(__isset_bitfield, __IMGHEIGHT_ISSET_ID);
  }

  public void setImgHeightIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IMGHEIGHT_ISSET_ID, value);
  }

  public String getDescription() {
    return this.description;
  }

  public ThriftProductModel setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public String getStatus() {
    return this.status;
  }

  public ThriftProductModel setStatus(String status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public double getMarketPrice() {
    return this.marketPrice;
  }

  public ThriftProductModel setMarketPrice(double marketPrice) {
    this.marketPrice = marketPrice;
    setMarketPriceIsSet(true);
    return this;
  }

  public void unsetMarketPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MARKETPRICE_ISSET_ID);
  }

  /** Returns true if field marketPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetMarketPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __MARKETPRICE_ISSET_ID);
  }

  public void setMarketPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MARKETPRICE_ISSET_ID, value);
  }

  public double getPrice() {
    return this.price;
  }

  public ThriftProductModel setPrice(double price) {
    this.price = price;
    setPriceIsSet(true);
    return this;
  }

  public void unsetPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  /** Returns true if field price is set (has been assigned a value) and false otherwise */
  public boolean isSetPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  public void setPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRICE_ISSET_ID, value);
  }

  public long getAmount() {
    return this.amount;
  }

  public ThriftProductModel setAmount(long amount) {
    this.amount = amount;
    setAmountIsSet(true);
    return this;
  }

  public void unsetAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AMOUNT_ISSET_ID);
  }

  /** Returns true if field amount is set (has been assigned a value) and false otherwise */
  public boolean isSetAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __AMOUNT_ISSET_ID);
  }

  public void setAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AMOUNT_ISSET_ID, value);
  }

  public long getSaleNum() {
    return this.saleNum;
  }

  public ThriftProductModel setSaleNum(long saleNum) {
    this.saleNum = saleNum;
    setSaleNumIsSet(true);
    return this;
  }

  public void unsetSaleNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SALENUM_ISSET_ID);
  }

  /** Returns true if field saleNum is set (has been assigned a value) and false otherwise */
  public boolean isSetSaleNum() {
    return EncodingUtils.testBit(__isset_bitfield, __SALENUM_ISSET_ID);
  }

  public void setSaleNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SALENUM_ISSET_ID, value);
  }

  public long getCreateTime() {
    return this.createTime;
  }

  public ThriftProductModel setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public long getUpdateTime() {
    return this.updateTime;
  }

  public ThriftProductModel setUpdateTime(long updateTime) {
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    return this;
  }

  public void unsetUpdateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  public void setUpdateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATETIME_ISSET_ID, value);
  }

  public long getShopId() {
    return this.shopId;
  }

  public ThriftProductModel setShopId(long shopId) {
    this.shopId = shopId;
    setShopIdIsSet(true);
    return this;
  }

  public void unsetShopId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOPID_ISSET_ID);
  }

  /** Returns true if field shopId is set (has been assigned a value) and false otherwise */
  public boolean isSetShopId() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOPID_ISSET_ID);
  }

  public void setShopIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOPID_ISSET_ID, value);
  }

  public String getShopName() {
    return this.shopName;
  }

  public ThriftProductModel setShopName(String shopName) {
    this.shopName = shopName;
    return this;
  }

  public void unsetShopName() {
    this.shopName = null;
  }

  /** Returns true if field shopName is set (has been assigned a value) and false otherwise */
  public boolean isSetShopName() {
    return this.shopName != null;
  }

  public void setShopNameIsSet(boolean value) {
    if (!value) {
      this.shopName = null;
    }
  }

  public String getPurchaseSource() {
    return this.purchaseSource;
  }

  public ThriftProductModel setPurchaseSource(String purchaseSource) {
    this.purchaseSource = purchaseSource;
    return this;
  }

  public void unsetPurchaseSource() {
    this.purchaseSource = null;
  }

  /** Returns true if field purchaseSource is set (has been assigned a value) and false otherwise */
  public boolean isSetPurchaseSource() {
    return this.purchaseSource != null;
  }

  public void setPurchaseSourceIsSet(boolean value) {
    if (!value) {
      this.purchaseSource = null;
    }
  }

  public String getDeliveryType() {
    return this.deliveryType;
  }

  public ThriftProductModel setDeliveryType(String deliveryType) {
    this.deliveryType = deliveryType;
    return this;
  }

  public void unsetDeliveryType() {
    this.deliveryType = null;
  }

  /** Returns true if field deliveryType is set (has been assigned a value) and false otherwise */
  public boolean isSetDeliveryType() {
    return this.deliveryType != null;
  }

  public void setDeliveryTypeIsSet(boolean value) {
    if (!value) {
      this.deliveryType = null;
    }
  }

  public String getStorageType() {
    return this.storageType;
  }

  public ThriftProductModel setStorageType(String storageType) {
    this.storageType = storageType;
    return this;
  }

  public void unsetStorageType() {
    this.storageType = null;
  }

  /** Returns true if field storageType is set (has been assigned a value) and false otherwise */
  public boolean isSetStorageType() {
    return this.storageType != null;
  }

  public void setStorageTypeIsSet(boolean value) {
    if (!value) {
      this.storageType = null;
    }
  }

  public int getTotalDays() {
    return this.totalDays;
  }

  public ThriftProductModel setTotalDays(int totalDays) {
    this.totalDays = totalDays;
    setTotalDaysIsSet(true);
    return this;
  }

  public void unsetTotalDays() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALDAYS_ISSET_ID);
  }

  /** Returns true if field totalDays is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalDays() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALDAYS_ISSET_ID);
  }

  public void setTotalDaysIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALDAYS_ISSET_ID, value);
  }

  public String getSellerSource() {
    return this.sellerSource;
  }

  public ThriftProductModel setSellerSource(String sellerSource) {
    this.sellerSource = sellerSource;
    return this;
  }

  public void unsetSellerSource() {
    this.sellerSource = null;
  }

  /** Returns true if field sellerSource is set (has been assigned a value) and false otherwise */
  public boolean isSetSellerSource() {
    return this.sellerSource != null;
  }

  public void setSellerSourceIsSet(boolean value) {
    if (!value) {
      this.sellerSource = null;
    }
  }

  public String getDeliverTime() {
    return this.deliverTime;
  }

  public ThriftProductModel setDeliverTime(String deliverTime) {
    this.deliverTime = deliverTime;
    return this;
  }

  public void unsetDeliverTime() {
    this.deliverTime = null;
  }

  /** Returns true if field deliverTime is set (has been assigned a value) and false otherwise */
  public boolean isSetDeliverTime() {
    return this.deliverTime != null;
  }

  public void setDeliverTimeIsSet(boolean value) {
    if (!value) {
      this.deliverTime = null;
    }
  }

  public int getSkusSize() {
    return (this.skus == null) ? 0 : this.skus.size();
  }

  public java.util.Iterator<ThriftSkuModel> getSkusIterator() {
    return (this.skus == null) ? null : this.skus.iterator();
  }

  public void addToSkus(ThriftSkuModel elem) {
    if (this.skus == null) {
      this.skus = new ArrayList<ThriftSkuModel>();
    }
    this.skus.add(elem);
  }

  public List<ThriftSkuModel> getSkus() {
    return this.skus;
  }

  public ThriftProductModel setSkus(List<ThriftSkuModel> skus) {
    this.skus = skus;
    return this;
  }

  public void unsetSkus() {
    this.skus = null;
  }

  /** Returns true if field skus is set (has been assigned a value) and false otherwise */
  public boolean isSetSkus() {
    return this.skus != null;
  }

  public void setSkusIsSet(boolean value) {
    if (!value) {
      this.skus = null;
    }
  }

  public int getSpecMapSize() {
    return (this.specMap == null) ? 0 : this.specMap.size();
  }

  public void putToSpecMap(String key, List<String> val) {
    if (this.specMap == null) {
      this.specMap = new HashMap<String,List<String>>();
    }
    this.specMap.put(key, val);
  }

  public Map<String,List<String>> getSpecMap() {
    return this.specMap;
  }

  public ThriftProductModel setSpecMap(Map<String,List<String>> specMap) {
    this.specMap = specMap;
    return this;
  }

  public void unsetSpecMap() {
    this.specMap = null;
  }

  /** Returns true if field specMap is set (has been assigned a value) and false otherwise */
  public boolean isSetSpecMap() {
    return this.specMap != null;
  }

  public void setSpecMapIsSet(boolean value) {
    if (!value) {
      this.specMap = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case CODE:
      if (value == null) {
        unsetCode();
      } else {
        setCode((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case IMG_URL:
      if (value == null) {
        unsetImgUrl();
      } else {
        setImgUrl((String)value);
      }
      break;

    case IMG_WIDTH:
      if (value == null) {
        unsetImgWidth();
      } else {
        setImgWidth((Integer)value);
      }
      break;

    case IMG_HEIGHT:
      if (value == null) {
        unsetImgHeight();
      } else {
        setImgHeight((Integer)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((String)value);
      }
      break;

    case MARKET_PRICE:
      if (value == null) {
        unsetMarketPrice();
      } else {
        setMarketPrice((Double)value);
      }
      break;

    case PRICE:
      if (value == null) {
        unsetPrice();
      } else {
        setPrice((Double)value);
      }
      break;

    case AMOUNT:
      if (value == null) {
        unsetAmount();
      } else {
        setAmount((Long)value);
      }
      break;

    case SALE_NUM:
      if (value == null) {
        unsetSaleNum();
      } else {
        setSaleNum((Long)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((Long)value);
      }
      break;

    case SHOP_ID:
      if (value == null) {
        unsetShopId();
      } else {
        setShopId((Long)value);
      }
      break;

    case SHOP_NAME:
      if (value == null) {
        unsetShopName();
      } else {
        setShopName((String)value);
      }
      break;

    case PURCHASE_SOURCE:
      if (value == null) {
        unsetPurchaseSource();
      } else {
        setPurchaseSource((String)value);
      }
      break;

    case DELIVERY_TYPE:
      if (value == null) {
        unsetDeliveryType();
      } else {
        setDeliveryType((String)value);
      }
      break;

    case STORAGE_TYPE:
      if (value == null) {
        unsetStorageType();
      } else {
        setStorageType((String)value);
      }
      break;

    case TOTAL_DAYS:
      if (value == null) {
        unsetTotalDays();
      } else {
        setTotalDays((Integer)value);
      }
      break;

    case SELLER_SOURCE:
      if (value == null) {
        unsetSellerSource();
      } else {
        setSellerSource((String)value);
      }
      break;

    case DELIVER_TIME:
      if (value == null) {
        unsetDeliverTime();
      } else {
        setDeliverTime((String)value);
      }
      break;

    case SKUS:
      if (value == null) {
        unsetSkus();
      } else {
        setSkus((List<ThriftSkuModel>)value);
      }
      break;

    case SPEC_MAP:
      if (value == null) {
        unsetSpecMap();
      } else {
        setSpecMap((Map<String,List<String>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case CODE:
      return getCode();

    case NAME:
      return getName();

    case IMG_URL:
      return getImgUrl();

    case IMG_WIDTH:
      return getImgWidth();

    case IMG_HEIGHT:
      return getImgHeight();

    case DESCRIPTION:
      return getDescription();

    case STATUS:
      return getStatus();

    case MARKET_PRICE:
      return getMarketPrice();

    case PRICE:
      return getPrice();

    case AMOUNT:
      return getAmount();

    case SALE_NUM:
      return getSaleNum();

    case CREATE_TIME:
      return getCreateTime();

    case UPDATE_TIME:
      return getUpdateTime();

    case SHOP_ID:
      return getShopId();

    case SHOP_NAME:
      return getShopName();

    case PURCHASE_SOURCE:
      return getPurchaseSource();

    case DELIVERY_TYPE:
      return getDeliveryType();

    case STORAGE_TYPE:
      return getStorageType();

    case TOTAL_DAYS:
      return getTotalDays();

    case SELLER_SOURCE:
      return getSellerSource();

    case DELIVER_TIME:
      return getDeliverTime();

    case SKUS:
      return getSkus();

    case SPEC_MAP:
      return getSpecMap();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case CODE:
      return isSetCode();
    case NAME:
      return isSetName();
    case IMG_URL:
      return isSetImgUrl();
    case IMG_WIDTH:
      return isSetImgWidth();
    case IMG_HEIGHT:
      return isSetImgHeight();
    case DESCRIPTION:
      return isSetDescription();
    case STATUS:
      return isSetStatus();
    case MARKET_PRICE:
      return isSetMarketPrice();
    case PRICE:
      return isSetPrice();
    case AMOUNT:
      return isSetAmount();
    case SALE_NUM:
      return isSetSaleNum();
    case CREATE_TIME:
      return isSetCreateTime();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case SHOP_ID:
      return isSetShopId();
    case SHOP_NAME:
      return isSetShopName();
    case PURCHASE_SOURCE:
      return isSetPurchaseSource();
    case DELIVERY_TYPE:
      return isSetDeliveryType();
    case STORAGE_TYPE:
      return isSetStorageType();
    case TOTAL_DAYS:
      return isSetTotalDays();
    case SELLER_SOURCE:
      return isSetSellerSource();
    case DELIVER_TIME:
      return isSetDeliverTime();
    case SKUS:
      return isSetSkus();
    case SPEC_MAP:
      return isSetSpecMap();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftProductModel)
      return this.equals((ThriftProductModel)that);
    return false;
  }

  public boolean equals(ThriftProductModel that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_code = true && this.isSetCode();
    boolean that_present_code = true && that.isSetCode();
    if (this_present_code || that_present_code) {
      if (!(this_present_code && that_present_code))
        return false;
      if (!this.code.equals(that.code))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_imgUrl = true && this.isSetImgUrl();
    boolean that_present_imgUrl = true && that.isSetImgUrl();
    if (this_present_imgUrl || that_present_imgUrl) {
      if (!(this_present_imgUrl && that_present_imgUrl))
        return false;
      if (!this.imgUrl.equals(that.imgUrl))
        return false;
    }

    boolean this_present_imgWidth = true && this.isSetImgWidth();
    boolean that_present_imgWidth = true && that.isSetImgWidth();
    if (this_present_imgWidth || that_present_imgWidth) {
      if (!(this_present_imgWidth && that_present_imgWidth))
        return false;
      if (this.imgWidth != that.imgWidth)
        return false;
    }

    boolean this_present_imgHeight = true && this.isSetImgHeight();
    boolean that_present_imgHeight = true && that.isSetImgHeight();
    if (this_present_imgHeight || that_present_imgHeight) {
      if (!(this_present_imgHeight && that_present_imgHeight))
        return false;
      if (this.imgHeight != that.imgHeight)
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_marketPrice = true && this.isSetMarketPrice();
    boolean that_present_marketPrice = true && that.isSetMarketPrice();
    if (this_present_marketPrice || that_present_marketPrice) {
      if (!(this_present_marketPrice && that_present_marketPrice))
        return false;
      if (this.marketPrice != that.marketPrice)
        return false;
    }

    boolean this_present_price = true && this.isSetPrice();
    boolean that_present_price = true && that.isSetPrice();
    if (this_present_price || that_present_price) {
      if (!(this_present_price && that_present_price))
        return false;
      if (this.price != that.price)
        return false;
    }

    boolean this_present_amount = true && this.isSetAmount();
    boolean that_present_amount = true && that.isSetAmount();
    if (this_present_amount || that_present_amount) {
      if (!(this_present_amount && that_present_amount))
        return false;
      if (this.amount != that.amount)
        return false;
    }

    boolean this_present_saleNum = true && this.isSetSaleNum();
    boolean that_present_saleNum = true && that.isSetSaleNum();
    if (this_present_saleNum || that_present_saleNum) {
      if (!(this_present_saleNum && that_present_saleNum))
        return false;
      if (this.saleNum != that.saleNum)
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_updateTime = true && this.isSetUpdateTime();
    boolean that_present_updateTime = true && that.isSetUpdateTime();
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (this.updateTime != that.updateTime)
        return false;
    }

    boolean this_present_shopId = true;
    boolean that_present_shopId = true;
    if (this_present_shopId || that_present_shopId) {
      if (!(this_present_shopId && that_present_shopId))
        return false;
      if (this.shopId != that.shopId)
        return false;
    }

    boolean this_present_shopName = true && this.isSetShopName();
    boolean that_present_shopName = true && that.isSetShopName();
    if (this_present_shopName || that_present_shopName) {
      if (!(this_present_shopName && that_present_shopName))
        return false;
      if (!this.shopName.equals(that.shopName))
        return false;
    }

    boolean this_present_purchaseSource = true && this.isSetPurchaseSource();
    boolean that_present_purchaseSource = true && that.isSetPurchaseSource();
    if (this_present_purchaseSource || that_present_purchaseSource) {
      if (!(this_present_purchaseSource && that_present_purchaseSource))
        return false;
      if (!this.purchaseSource.equals(that.purchaseSource))
        return false;
    }

    boolean this_present_deliveryType = true && this.isSetDeliveryType();
    boolean that_present_deliveryType = true && that.isSetDeliveryType();
    if (this_present_deliveryType || that_present_deliveryType) {
      if (!(this_present_deliveryType && that_present_deliveryType))
        return false;
      if (!this.deliveryType.equals(that.deliveryType))
        return false;
    }

    boolean this_present_storageType = true && this.isSetStorageType();
    boolean that_present_storageType = true && that.isSetStorageType();
    if (this_present_storageType || that_present_storageType) {
      if (!(this_present_storageType && that_present_storageType))
        return false;
      if (!this.storageType.equals(that.storageType))
        return false;
    }

    boolean this_present_totalDays = true && this.isSetTotalDays();
    boolean that_present_totalDays = true && that.isSetTotalDays();
    if (this_present_totalDays || that_present_totalDays) {
      if (!(this_present_totalDays && that_present_totalDays))
        return false;
      if (this.totalDays != that.totalDays)
        return false;
    }

    boolean this_present_sellerSource = true && this.isSetSellerSource();
    boolean that_present_sellerSource = true && that.isSetSellerSource();
    if (this_present_sellerSource || that_present_sellerSource) {
      if (!(this_present_sellerSource && that_present_sellerSource))
        return false;
      if (!this.sellerSource.equals(that.sellerSource))
        return false;
    }

    boolean this_present_deliverTime = true && this.isSetDeliverTime();
    boolean that_present_deliverTime = true && that.isSetDeliverTime();
    if (this_present_deliverTime || that_present_deliverTime) {
      if (!(this_present_deliverTime && that_present_deliverTime))
        return false;
      if (!this.deliverTime.equals(that.deliverTime))
        return false;
    }

    boolean this_present_skus = true && this.isSetSkus();
    boolean that_present_skus = true && that.isSetSkus();
    if (this_present_skus || that_present_skus) {
      if (!(this_present_skus && that_present_skus))
        return false;
      if (!this.skus.equals(that.skus))
        return false;
    }

    boolean this_present_specMap = true && this.isSetSpecMap();
    boolean that_present_specMap = true && that.isSetSpecMap();
    if (this_present_specMap || that_present_specMap) {
      if (!(this_present_specMap && that_present_specMap))
        return false;
      if (!this.specMap.equals(that.specMap))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_code = true && (isSetCode());
    list.add(present_code);
    if (present_code)
      list.add(code);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_imgUrl = true && (isSetImgUrl());
    list.add(present_imgUrl);
    if (present_imgUrl)
      list.add(imgUrl);

    boolean present_imgWidth = true && (isSetImgWidth());
    list.add(present_imgWidth);
    if (present_imgWidth)
      list.add(imgWidth);

    boolean present_imgHeight = true && (isSetImgHeight());
    list.add(present_imgHeight);
    if (present_imgHeight)
      list.add(imgHeight);

    boolean present_description = true && (isSetDescription());
    list.add(present_description);
    if (present_description)
      list.add(description);

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_marketPrice = true && (isSetMarketPrice());
    list.add(present_marketPrice);
    if (present_marketPrice)
      list.add(marketPrice);

    boolean present_price = true && (isSetPrice());
    list.add(present_price);
    if (present_price)
      list.add(price);

    boolean present_amount = true && (isSetAmount());
    list.add(present_amount);
    if (present_amount)
      list.add(amount);

    boolean present_saleNum = true && (isSetSaleNum());
    list.add(present_saleNum);
    if (present_saleNum)
      list.add(saleNum);

    boolean present_createTime = true && (isSetCreateTime());
    list.add(present_createTime);
    if (present_createTime)
      list.add(createTime);

    boolean present_updateTime = true && (isSetUpdateTime());
    list.add(present_updateTime);
    if (present_updateTime)
      list.add(updateTime);

    boolean present_shopId = true;
    list.add(present_shopId);
    if (present_shopId)
      list.add(shopId);

    boolean present_shopName = true && (isSetShopName());
    list.add(present_shopName);
    if (present_shopName)
      list.add(shopName);

    boolean present_purchaseSource = true && (isSetPurchaseSource());
    list.add(present_purchaseSource);
    if (present_purchaseSource)
      list.add(purchaseSource);

    boolean present_deliveryType = true && (isSetDeliveryType());
    list.add(present_deliveryType);
    if (present_deliveryType)
      list.add(deliveryType);

    boolean present_storageType = true && (isSetStorageType());
    list.add(present_storageType);
    if (present_storageType)
      list.add(storageType);

    boolean present_totalDays = true && (isSetTotalDays());
    list.add(present_totalDays);
    if (present_totalDays)
      list.add(totalDays);

    boolean present_sellerSource = true && (isSetSellerSource());
    list.add(present_sellerSource);
    if (present_sellerSource)
      list.add(sellerSource);

    boolean present_deliverTime = true && (isSetDeliverTime());
    list.add(present_deliverTime);
    if (present_deliverTime)
      list.add(deliverTime);

    boolean present_skus = true && (isSetSkus());
    list.add(present_skus);
    if (present_skus)
      list.add(skus);

    boolean present_specMap = true && (isSetSpecMap());
    list.add(present_specMap);
    if (present_specMap)
      list.add(specMap);

    return list.hashCode();
  }

  @Override
  public int compareTo(ThriftProductModel other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCode()).compareTo(other.isSetCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImgUrl()).compareTo(other.isSetImgUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImgUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imgUrl, other.imgUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImgWidth()).compareTo(other.isSetImgWidth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImgWidth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imgWidth, other.imgWidth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImgHeight()).compareTo(other.isSetImgHeight());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImgHeight()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imgHeight, other.imgHeight);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMarketPrice()).compareTo(other.isSetMarketPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMarketPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.marketPrice, other.marketPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrice()).compareTo(other.isSetPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.price, other.price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAmount()).compareTo(other.isSetAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amount, other.amount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSaleNum()).compareTo(other.isSetSaleNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSaleNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.saleNum, other.saleNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShopId()).compareTo(other.isSetShopId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShopId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shopId, other.shopId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShopName()).compareTo(other.isSetShopName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShopName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shopName, other.shopName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPurchaseSource()).compareTo(other.isSetPurchaseSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPurchaseSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.purchaseSource, other.purchaseSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeliveryType()).compareTo(other.isSetDeliveryType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeliveryType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deliveryType, other.deliveryType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStorageType()).compareTo(other.isSetStorageType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStorageType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storageType, other.storageType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalDays()).compareTo(other.isSetTotalDays());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalDays()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalDays, other.totalDays);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSellerSource()).compareTo(other.isSetSellerSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSellerSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sellerSource, other.sellerSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeliverTime()).compareTo(other.isSetDeliverTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeliverTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deliverTime, other.deliverTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSkus()).compareTo(other.isSetSkus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSkus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.skus, other.skus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpecMap()).compareTo(other.isSetSpecMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpecMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specMap, other.specMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThriftProductModel(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("code:");
    if (this.code == null) {
      sb.append("null");
    } else {
      sb.append(this.code);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (isSetImgUrl()) {
      if (!first) sb.append(", ");
      sb.append("imgUrl:");
      if (this.imgUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.imgUrl);
      }
      first = false;
    }
    if (isSetImgWidth()) {
      if (!first) sb.append(", ");
      sb.append("imgWidth:");
      sb.append(this.imgWidth);
      first = false;
    }
    if (isSetImgHeight()) {
      if (!first) sb.append(", ");
      sb.append("imgHeight:");
      sb.append(this.imgHeight);
      first = false;
    }
    if (isSetDescription()) {
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
    }
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
    }
    if (isSetMarketPrice()) {
      if (!first) sb.append(", ");
      sb.append("marketPrice:");
      sb.append(this.marketPrice);
      first = false;
    }
    if (isSetPrice()) {
      if (!first) sb.append(", ");
      sb.append("price:");
      sb.append(this.price);
      first = false;
    }
    if (isSetAmount()) {
      if (!first) sb.append(", ");
      sb.append("amount:");
      sb.append(this.amount);
      first = false;
    }
    if (isSetSaleNum()) {
      if (!first) sb.append(", ");
      sb.append("saleNum:");
      sb.append(this.saleNum);
      first = false;
    }
    if (isSetCreateTime()) {
      if (!first) sb.append(", ");
      sb.append("createTime:");
      sb.append(this.createTime);
      first = false;
    }
    if (isSetUpdateTime()) {
      if (!first) sb.append(", ");
      sb.append("updateTime:");
      sb.append(this.updateTime);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("shopId:");
    sb.append(this.shopId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shopName:");
    if (this.shopName == null) {
      sb.append("null");
    } else {
      sb.append(this.shopName);
    }
    first = false;
    if (isSetPurchaseSource()) {
      if (!first) sb.append(", ");
      sb.append("purchaseSource:");
      if (this.purchaseSource == null) {
        sb.append("null");
      } else {
        sb.append(this.purchaseSource);
      }
      first = false;
    }
    if (isSetDeliveryType()) {
      if (!first) sb.append(", ");
      sb.append("deliveryType:");
      if (this.deliveryType == null) {
        sb.append("null");
      } else {
        sb.append(this.deliveryType);
      }
      first = false;
    }
    if (isSetStorageType()) {
      if (!first) sb.append(", ");
      sb.append("storageType:");
      if (this.storageType == null) {
        sb.append("null");
      } else {
        sb.append(this.storageType);
      }
      first = false;
    }
    if (isSetTotalDays()) {
      if (!first) sb.append(", ");
      sb.append("totalDays:");
      sb.append(this.totalDays);
      first = false;
    }
    if (isSetSellerSource()) {
      if (!first) sb.append(", ");
      sb.append("sellerSource:");
      if (this.sellerSource == null) {
        sb.append("null");
      } else {
        sb.append(this.sellerSource);
      }
      first = false;
    }
    if (isSetDeliverTime()) {
      if (!first) sb.append(", ");
      sb.append("deliverTime:");
      if (this.deliverTime == null) {
        sb.append("null");
      } else {
        sb.append(this.deliverTime);
      }
      first = false;
    }
    if (isSetSkus()) {
      if (!first) sb.append(", ");
      sb.append("skus:");
      if (this.skus == null) {
        sb.append("null");
      } else {
        sb.append(this.skus);
      }
      first = false;
    }
    if (isSetSpecMap()) {
      if (!first) sb.append(", ");
      sb.append("specMap:");
      if (this.specMap == null) {
        sb.append("null");
      } else {
        sb.append(this.specMap);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'id' because it's a primitive and you chose the non-beans generator.
    if (code == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'code' was not present! Struct: " + toString());
    }
    if (name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'shopId' because it's a primitive and you chose the non-beans generator.
    if (shopName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'shopName' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftProductModelStandardSchemeFactory implements SchemeFactory {
    public ThriftProductModelStandardScheme getScheme() {
      return new ThriftProductModelStandardScheme();
    }
  }

  private static class ThriftProductModelStandardScheme extends StandardScheme<ThriftProductModel> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftProductModel struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.code = iprot.readString();
              struct.setCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IMG_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imgUrl = iprot.readString();
              struct.setImgUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IMG_WIDTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.imgWidth = iprot.readI32();
              struct.setImgWidthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IMG_HEIGHT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.imgHeight = iprot.readI32();
              struct.setImgHeightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.status = iprot.readString();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MARKET_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.marketPrice = iprot.readDouble();
              struct.setMarketPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.price = iprot.readDouble();
              struct.setPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.amount = iprot.readI64();
              struct.setAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SALE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.saleNum = iprot.readI64();
              struct.setSaleNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.updateTime = iprot.readI64();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // SHOP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.shopId = iprot.readI64();
              struct.setShopIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // SHOP_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.shopName = iprot.readString();
              struct.setShopNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // PURCHASE_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.purchaseSource = iprot.readString();
              struct.setPurchaseSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // DELIVERY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deliveryType = iprot.readString();
              struct.setDeliveryTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // STORAGE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.storageType = iprot.readString();
              struct.setStorageTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // TOTAL_DAYS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalDays = iprot.readI32();
              struct.setTotalDaysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // SELLER_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sellerSource = iprot.readString();
              struct.setSellerSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // DELIVER_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deliverTime = iprot.readString();
              struct.setDeliverTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 50: // SKUS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.skus = new ArrayList<ThriftSkuModel>(_list0.size);
                ThriftSkuModel _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new ThriftSkuModel();
                  _elem1.read(iprot);
                  struct.skus.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setSkusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 51: // SPEC_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map3 = iprot.readMapBegin();
                struct.specMap = new HashMap<String,List<String>>(2*_map3.size);
                String _key4;
                List<String> _val5;
                for (int _i6 = 0; _i6 < _map3.size; ++_i6)
                {
                  _key4 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TList _list7 = iprot.readListBegin();
                    _val5 = new ArrayList<String>(_list7.size);
                    String _elem8;
                    for (int _i9 = 0; _i9 < _list7.size; ++_i9)
                    {
                      _elem8 = iprot.readString();
                      _val5.add(_elem8);
                    }
                    iprot.readListEnd();
                  }
                  struct.specMap.put(_key4, _val5);
                }
                iprot.readMapEnd();
              }
              struct.setSpecMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetShopId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'shopId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftProductModel struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.code != null) {
        oprot.writeFieldBegin(CODE_FIELD_DESC);
        oprot.writeString(struct.code);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.imgUrl != null) {
        if (struct.isSetImgUrl()) {
          oprot.writeFieldBegin(IMG_URL_FIELD_DESC);
          oprot.writeString(struct.imgUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetImgWidth()) {
        oprot.writeFieldBegin(IMG_WIDTH_FIELD_DESC);
        oprot.writeI32(struct.imgWidth);
        oprot.writeFieldEnd();
      }
      if (struct.isSetImgHeight()) {
        oprot.writeFieldBegin(IMG_HEIGHT_FIELD_DESC);
        oprot.writeI32(struct.imgHeight);
        oprot.writeFieldEnd();
      }
      if (struct.description != null) {
        if (struct.isSetDescription()) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
      }
      if (struct.status != null) {
        if (struct.isSetStatus()) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          oprot.writeString(struct.status);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMarketPrice()) {
        oprot.writeFieldBegin(MARKET_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.marketPrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPrice()) {
        oprot.writeFieldBegin(PRICE_FIELD_DESC);
        oprot.writeDouble(struct.price);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAmount()) {
        oprot.writeFieldBegin(AMOUNT_FIELD_DESC);
        oprot.writeI64(struct.amount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSaleNum()) {
        oprot.writeFieldBegin(SALE_NUM_FIELD_DESC);
        oprot.writeI64(struct.saleNum);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCreateTime()) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeI64(struct.createTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
        oprot.writeI64(struct.updateTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SHOP_ID_FIELD_DESC);
      oprot.writeI64(struct.shopId);
      oprot.writeFieldEnd();
      if (struct.shopName != null) {
        oprot.writeFieldBegin(SHOP_NAME_FIELD_DESC);
        oprot.writeString(struct.shopName);
        oprot.writeFieldEnd();
      }
      if (struct.purchaseSource != null) {
        if (struct.isSetPurchaseSource()) {
          oprot.writeFieldBegin(PURCHASE_SOURCE_FIELD_DESC);
          oprot.writeString(struct.purchaseSource);
          oprot.writeFieldEnd();
        }
      }
      if (struct.deliveryType != null) {
        if (struct.isSetDeliveryType()) {
          oprot.writeFieldBegin(DELIVERY_TYPE_FIELD_DESC);
          oprot.writeString(struct.deliveryType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.storageType != null) {
        if (struct.isSetStorageType()) {
          oprot.writeFieldBegin(STORAGE_TYPE_FIELD_DESC);
          oprot.writeString(struct.storageType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTotalDays()) {
        oprot.writeFieldBegin(TOTAL_DAYS_FIELD_DESC);
        oprot.writeI32(struct.totalDays);
        oprot.writeFieldEnd();
      }
      if (struct.sellerSource != null) {
        if (struct.isSetSellerSource()) {
          oprot.writeFieldBegin(SELLER_SOURCE_FIELD_DESC);
          oprot.writeString(struct.sellerSource);
          oprot.writeFieldEnd();
        }
      }
      if (struct.deliverTime != null) {
        if (struct.isSetDeliverTime()) {
          oprot.writeFieldBegin(DELIVER_TIME_FIELD_DESC);
          oprot.writeString(struct.deliverTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.skus != null) {
        if (struct.isSetSkus()) {
          oprot.writeFieldBegin(SKUS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.skus.size()));
            for (ThriftSkuModel _iter10 : struct.skus)
            {
              _iter10.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.specMap != null) {
        if (struct.isSetSpecMap()) {
          oprot.writeFieldBegin(SPEC_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.specMap.size()));
            for (Map.Entry<String, List<String>> _iter11 : struct.specMap.entrySet())
            {
              oprot.writeString(_iter11.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter11.getValue().size()));
                for (String _iter12 : _iter11.getValue())
                {
                  oprot.writeString(_iter12);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftProductModelTupleSchemeFactory implements SchemeFactory {
    public ThriftProductModelTupleScheme getScheme() {
      return new ThriftProductModelTupleScheme();
    }
  }

  private static class ThriftProductModelTupleScheme extends TupleScheme<ThriftProductModel> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftProductModel struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.id);
      oprot.writeString(struct.code);
      oprot.writeString(struct.name);
      oprot.writeI64(struct.shopId);
      oprot.writeString(struct.shopName);
      BitSet optionals = new BitSet();
      if (struct.isSetImgUrl()) {
        optionals.set(0);
      }
      if (struct.isSetImgWidth()) {
        optionals.set(1);
      }
      if (struct.isSetImgHeight()) {
        optionals.set(2);
      }
      if (struct.isSetDescription()) {
        optionals.set(3);
      }
      if (struct.isSetStatus()) {
        optionals.set(4);
      }
      if (struct.isSetMarketPrice()) {
        optionals.set(5);
      }
      if (struct.isSetPrice()) {
        optionals.set(6);
      }
      if (struct.isSetAmount()) {
        optionals.set(7);
      }
      if (struct.isSetSaleNum()) {
        optionals.set(8);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(9);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(10);
      }
      if (struct.isSetPurchaseSource()) {
        optionals.set(11);
      }
      if (struct.isSetDeliveryType()) {
        optionals.set(12);
      }
      if (struct.isSetStorageType()) {
        optionals.set(13);
      }
      if (struct.isSetTotalDays()) {
        optionals.set(14);
      }
      if (struct.isSetSellerSource()) {
        optionals.set(15);
      }
      if (struct.isSetDeliverTime()) {
        optionals.set(16);
      }
      if (struct.isSetSkus()) {
        optionals.set(17);
      }
      if (struct.isSetSpecMap()) {
        optionals.set(18);
      }
      oprot.writeBitSet(optionals, 19);
      if (struct.isSetImgUrl()) {
        oprot.writeString(struct.imgUrl);
      }
      if (struct.isSetImgWidth()) {
        oprot.writeI32(struct.imgWidth);
      }
      if (struct.isSetImgHeight()) {
        oprot.writeI32(struct.imgHeight);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetStatus()) {
        oprot.writeString(struct.status);
      }
      if (struct.isSetMarketPrice()) {
        oprot.writeDouble(struct.marketPrice);
      }
      if (struct.isSetPrice()) {
        oprot.writeDouble(struct.price);
      }
      if (struct.isSetAmount()) {
        oprot.writeI64(struct.amount);
      }
      if (struct.isSetSaleNum()) {
        oprot.writeI64(struct.saleNum);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI64(struct.createTime);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeI64(struct.updateTime);
      }
      if (struct.isSetPurchaseSource()) {
        oprot.writeString(struct.purchaseSource);
      }
      if (struct.isSetDeliveryType()) {
        oprot.writeString(struct.deliveryType);
      }
      if (struct.isSetStorageType()) {
        oprot.writeString(struct.storageType);
      }
      if (struct.isSetTotalDays()) {
        oprot.writeI32(struct.totalDays);
      }
      if (struct.isSetSellerSource()) {
        oprot.writeString(struct.sellerSource);
      }
      if (struct.isSetDeliverTime()) {
        oprot.writeString(struct.deliverTime);
      }
      if (struct.isSetSkus()) {
        {
          oprot.writeI32(struct.skus.size());
          for (ThriftSkuModel _iter13 : struct.skus)
          {
            _iter13.write(oprot);
          }
        }
      }
      if (struct.isSetSpecMap()) {
        {
          oprot.writeI32(struct.specMap.size());
          for (Map.Entry<String, List<String>> _iter14 : struct.specMap.entrySet())
          {
            oprot.writeString(_iter14.getKey());
            {
              oprot.writeI32(_iter14.getValue().size());
              for (String _iter15 : _iter14.getValue())
              {
                oprot.writeString(_iter15);
              }
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftProductModel struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readI64();
      struct.setIdIsSet(true);
      struct.code = iprot.readString();
      struct.setCodeIsSet(true);
      struct.name = iprot.readString();
      struct.setNameIsSet(true);
      struct.shopId = iprot.readI64();
      struct.setShopIdIsSet(true);
      struct.shopName = iprot.readString();
      struct.setShopNameIsSet(true);
      BitSet incoming = iprot.readBitSet(19);
      if (incoming.get(0)) {
        struct.imgUrl = iprot.readString();
        struct.setImgUrlIsSet(true);
      }
      if (incoming.get(1)) {
        struct.imgWidth = iprot.readI32();
        struct.setImgWidthIsSet(true);
      }
      if (incoming.get(2)) {
        struct.imgHeight = iprot.readI32();
        struct.setImgHeightIsSet(true);
      }
      if (incoming.get(3)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(4)) {
        struct.status = iprot.readString();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(5)) {
        struct.marketPrice = iprot.readDouble();
        struct.setMarketPriceIsSet(true);
      }
      if (incoming.get(6)) {
        struct.price = iprot.readDouble();
        struct.setPriceIsSet(true);
      }
      if (incoming.get(7)) {
        struct.amount = iprot.readI64();
        struct.setAmountIsSet(true);
      }
      if (incoming.get(8)) {
        struct.saleNum = iprot.readI64();
        struct.setSaleNumIsSet(true);
      }
      if (incoming.get(9)) {
        struct.createTime = iprot.readI64();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.updateTime = iprot.readI64();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.purchaseSource = iprot.readString();
        struct.setPurchaseSourceIsSet(true);
      }
      if (incoming.get(12)) {
        struct.deliveryType = iprot.readString();
        struct.setDeliveryTypeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.storageType = iprot.readString();
        struct.setStorageTypeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.totalDays = iprot.readI32();
        struct.setTotalDaysIsSet(true);
      }
      if (incoming.get(15)) {
        struct.sellerSource = iprot.readString();
        struct.setSellerSourceIsSet(true);
      }
      if (incoming.get(16)) {
        struct.deliverTime = iprot.readString();
        struct.setDeliverTimeIsSet(true);
      }
      if (incoming.get(17)) {
        {
          org.apache.thrift.protocol.TList _list16 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.skus = new ArrayList<ThriftSkuModel>(_list16.size);
          ThriftSkuModel _elem17;
          for (int _i18 = 0; _i18 < _list16.size; ++_i18)
          {
            _elem17 = new ThriftSkuModel();
            _elem17.read(iprot);
            struct.skus.add(_elem17);
          }
        }
        struct.setSkusIsSet(true);
      }
      if (incoming.get(18)) {
        {
          org.apache.thrift.protocol.TMap _map19 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.specMap = new HashMap<String,List<String>>(2*_map19.size);
          String _key20;
          List<String> _val21;
          for (int _i22 = 0; _i22 < _map19.size; ++_i22)
          {
            _key20 = iprot.readString();
            {
              org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
              _val21 = new ArrayList<String>(_list23.size);
              String _elem24;
              for (int _i25 = 0; _i25 < _list23.size; ++_i25)
              {
                _elem24 = iprot.readString();
                _val21.add(_elem24);
              }
            }
            struct.specMap.put(_key20, _val21);
          }
        }
        struct.setSpecMapIsSet(true);
      }
    }
  }

}

