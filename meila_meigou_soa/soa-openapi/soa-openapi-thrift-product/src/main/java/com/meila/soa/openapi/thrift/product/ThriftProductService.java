/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.meila.soa.openapi.thrift.product;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-05-25")
public class ThriftProductService {

  public interface Iface {

    public List<com.meila.soa.openapi.thrift.product.model.ThriftProductModel> findProductByIds(List<Long> ids) throws org.apache.thrift.TException;

    public List<com.meila.soa.openapi.thrift.product.model.ThriftProductModel> findSkuByIds(List<String> codes) throws org.apache.thrift.TException;

    public com.meila.soa.openapi.thrift.product.model.ThriftCartItemResult addToCart(long userId, String skuCode, int buyNum, com.meila.soa.openapi.thrift.product.model.CartOperationType type, String sourceFrom) throws org.apache.thrift.TException;

    public List<com.meila.soa.openapi.thrift.product.model.ThriftSimpleProductModel> findValidProductByIds(List<Long> ids) throws org.apache.thrift.TException;

    public com.meila.soa.openapi.thrift.product.model.ThriftPageSimpleProductModel findTopProductBySellId(long sellerId, int dayNum, int pageNo, int pageSize) throws org.apache.thrift.TException;

    public List<com.meila.soa.openapi.thrift.product.model.ThriftShopModel> findShopBySellerId(List<Long> ids) throws org.apache.thrift.TException;

    public com.meila.soa.openapi.thrift.product.model.ThriftPageShopModel findPagedShop(int pageNo, int pageSize) throws org.apache.thrift.TException;

    public com.meila.soa.openapi.thrift.product.model.ThriftPageSimpleProductModel findPagedProduct(int pageNo, int pageSize) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void findProductByIds(List<Long> ids, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findSkuByIds(List<String> codes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addToCart(long userId, String skuCode, int buyNum, com.meila.soa.openapi.thrift.product.model.CartOperationType type, String sourceFrom, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findValidProductByIds(List<Long> ids, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findTopProductBySellId(long sellerId, int dayNum, int pageNo, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findShopBySellerId(List<Long> ids, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findPagedShop(int pageNo, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findPagedProduct(int pageNo, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<com.meila.soa.openapi.thrift.product.model.ThriftProductModel> findProductByIds(List<Long> ids) throws org.apache.thrift.TException
    {
      send_findProductByIds(ids);
      return recv_findProductByIds();
    }

    public void send_findProductByIds(List<Long> ids) throws org.apache.thrift.TException
    {
      findProductByIds_args args = new findProductByIds_args();
      args.setIds(ids);
      sendBase("findProductByIds", args);
    }

    public List<com.meila.soa.openapi.thrift.product.model.ThriftProductModel> recv_findProductByIds() throws org.apache.thrift.TException
    {
      findProductByIds_result result = new findProductByIds_result();
      receiveBase(result, "findProductByIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findProductByIds failed: unknown result");
    }

    public List<com.meila.soa.openapi.thrift.product.model.ThriftProductModel> findSkuByIds(List<String> codes) throws org.apache.thrift.TException
    {
      send_findSkuByIds(codes);
      return recv_findSkuByIds();
    }

    public void send_findSkuByIds(List<String> codes) throws org.apache.thrift.TException
    {
      findSkuByIds_args args = new findSkuByIds_args();
      args.setCodes(codes);
      sendBase("findSkuByIds", args);
    }

    public List<com.meila.soa.openapi.thrift.product.model.ThriftProductModel> recv_findSkuByIds() throws org.apache.thrift.TException
    {
      findSkuByIds_result result = new findSkuByIds_result();
      receiveBase(result, "findSkuByIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findSkuByIds failed: unknown result");
    }

    public com.meila.soa.openapi.thrift.product.model.ThriftCartItemResult addToCart(long userId, String skuCode, int buyNum, com.meila.soa.openapi.thrift.product.model.CartOperationType type, String sourceFrom) throws org.apache.thrift.TException
    {
      send_addToCart(userId, skuCode, buyNum, type, sourceFrom);
      return recv_addToCart();
    }

    public void send_addToCart(long userId, String skuCode, int buyNum, com.meila.soa.openapi.thrift.product.model.CartOperationType type, String sourceFrom) throws org.apache.thrift.TException
    {
      addToCart_args args = new addToCart_args();
      args.setUserId(userId);
      args.setSkuCode(skuCode);
      args.setBuyNum(buyNum);
      args.setType(type);
      args.setSourceFrom(sourceFrom);
      sendBase("addToCart", args);
    }

    public com.meila.soa.openapi.thrift.product.model.ThriftCartItemResult recv_addToCart() throws org.apache.thrift.TException
    {
      addToCart_result result = new addToCart_result();
      receiveBase(result, "addToCart");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addToCart failed: unknown result");
    }

    public List<com.meila.soa.openapi.thrift.product.model.ThriftSimpleProductModel> findValidProductByIds(List<Long> ids) throws org.apache.thrift.TException
    {
      send_findValidProductByIds(ids);
      return recv_findValidProductByIds();
    }

    public void send_findValidProductByIds(List<Long> ids) throws org.apache.thrift.TException
    {
      findValidProductByIds_args args = new findValidProductByIds_args();
      args.setIds(ids);
      sendBase("findValidProductByIds", args);
    }

    public List<com.meila.soa.openapi.thrift.product.model.ThriftSimpleProductModel> recv_findValidProductByIds() throws org.apache.thrift.TException
    {
      findValidProductByIds_result result = new findValidProductByIds_result();
      receiveBase(result, "findValidProductByIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findValidProductByIds failed: unknown result");
    }

    public com.meila.soa.openapi.thrift.product.model.ThriftPageSimpleProductModel findTopProductBySellId(long sellerId, int dayNum, int pageNo, int pageSize) throws org.apache.thrift.TException
    {
      send_findTopProductBySellId(sellerId, dayNum, pageNo, pageSize);
      return recv_findTopProductBySellId();
    }

    public void send_findTopProductBySellId(long sellerId, int dayNum, int pageNo, int pageSize) throws org.apache.thrift.TException
    {
      findTopProductBySellId_args args = new findTopProductBySellId_args();
      args.setSellerId(sellerId);
      args.setDayNum(dayNum);
      args.setPageNo(pageNo);
      args.setPageSize(pageSize);
      sendBase("findTopProductBySellId", args);
    }

    public com.meila.soa.openapi.thrift.product.model.ThriftPageSimpleProductModel recv_findTopProductBySellId() throws org.apache.thrift.TException
    {
      findTopProductBySellId_result result = new findTopProductBySellId_result();
      receiveBase(result, "findTopProductBySellId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findTopProductBySellId failed: unknown result");
    }

    public List<com.meila.soa.openapi.thrift.product.model.ThriftShopModel> findShopBySellerId(List<Long> ids) throws org.apache.thrift.TException
    {
      send_findShopBySellerId(ids);
      return recv_findShopBySellerId();
    }

    public void send_findShopBySellerId(List<Long> ids) throws org.apache.thrift.TException
    {
      findShopBySellerId_args args = new findShopBySellerId_args();
      args.setIds(ids);
      sendBase("findShopBySellerId", args);
    }

    public List<com.meila.soa.openapi.thrift.product.model.ThriftShopModel> recv_findShopBySellerId() throws org.apache.thrift.TException
    {
      findShopBySellerId_result result = new findShopBySellerId_result();
      receiveBase(result, "findShopBySellerId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findShopBySellerId failed: unknown result");
    }

    public com.meila.soa.openapi.thrift.product.model.ThriftPageShopModel findPagedShop(int pageNo, int pageSize) throws org.apache.thrift.TException
    {
      send_findPagedShop(pageNo, pageSize);
      return recv_findPagedShop();
    }

    public void send_findPagedShop(int pageNo, int pageSize) throws org.apache.thrift.TException
    {
      findPagedShop_args args = new findPagedShop_args();
      args.setPageNo(pageNo);
      args.setPageSize(pageSize);
      sendBase("findPagedShop", args);
    }

    public com.meila.soa.openapi.thrift.product.model.ThriftPageShopModel recv_findPagedShop() throws org.apache.thrift.TException
    {
      findPagedShop_result result = new findPagedShop_result();
      receiveBase(result, "findPagedShop");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findPagedShop failed: unknown result");
    }

    public com.meila.soa.openapi.thrift.product.model.ThriftPageSimpleProductModel findPagedProduct(int pageNo, int pageSize) throws org.apache.thrift.TException
    {
      send_findPagedProduct(pageNo, pageSize);
      return recv_findPagedProduct();
    }

    public void send_findPagedProduct(int pageNo, int pageSize) throws org.apache.thrift.TException
    {
      findPagedProduct_args args = new findPagedProduct_args();
      args.setPageNo(pageNo);
      args.setPageSize(pageSize);
      sendBase("findPagedProduct", args);
    }

    public com.meila.soa.openapi.thrift.product.model.ThriftPageSimpleProductModel recv_findPagedProduct() throws org.apache.thrift.TException
    {
      findPagedProduct_result result = new findPagedProduct_result();
      receiveBase(result, "findPagedProduct");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findPagedProduct failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void findProductByIds(List<Long> ids, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findProductByIds_call method_call = new findProductByIds_call(ids, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findProductByIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Long> ids;
      public findProductByIds_call(List<Long> ids, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ids = ids;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findProductByIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findProductByIds_args args = new findProductByIds_args();
        args.setIds(ids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.meila.soa.openapi.thrift.product.model.ThriftProductModel> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findProductByIds();
      }
    }

    public void findSkuByIds(List<String> codes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findSkuByIds_call method_call = new findSkuByIds_call(codes, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findSkuByIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> codes;
      public findSkuByIds_call(List<String> codes, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.codes = codes;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findSkuByIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findSkuByIds_args args = new findSkuByIds_args();
        args.setCodes(codes);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.meila.soa.openapi.thrift.product.model.ThriftProductModel> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findSkuByIds();
      }
    }

    public void addToCart(long userId, String skuCode, int buyNum, com.meila.soa.openapi.thrift.product.model.CartOperationType type, String sourceFrom, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addToCart_call method_call = new addToCart_call(userId, skuCode, buyNum, type, sourceFrom, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addToCart_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long userId;
      private String skuCode;
      private int buyNum;
      private com.meila.soa.openapi.thrift.product.model.CartOperationType type;
      private String sourceFrom;
      public addToCart_call(long userId, String skuCode, int buyNum, com.meila.soa.openapi.thrift.product.model.CartOperationType type, String sourceFrom, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.skuCode = skuCode;
        this.buyNum = buyNum;
        this.type = type;
        this.sourceFrom = sourceFrom;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addToCart", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addToCart_args args = new addToCart_args();
        args.setUserId(userId);
        args.setSkuCode(skuCode);
        args.setBuyNum(buyNum);
        args.setType(type);
        args.setSourceFrom(sourceFrom);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.meila.soa.openapi.thrift.product.model.ThriftCartItemResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addToCart();
      }
    }

    public void findValidProductByIds(List<Long> ids, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findValidProductByIds_call method_call = new findValidProductByIds_call(ids, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findValidProductByIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Long> ids;
      public findValidProductByIds_call(List<Long> ids, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ids = ids;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findValidProductByIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findValidProductByIds_args args = new findValidProductByIds_args();
        args.setIds(ids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.meila.soa.openapi.thrift.product.model.ThriftSimpleProductModel> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findValidProductByIds();
      }
    }

    public void findTopProductBySellId(long sellerId, int dayNum, int pageNo, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findTopProductBySellId_call method_call = new findTopProductBySellId_call(sellerId, dayNum, pageNo, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findTopProductBySellId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long sellerId;
      private int dayNum;
      private int pageNo;
      private int pageSize;
      public findTopProductBySellId_call(long sellerId, int dayNum, int pageNo, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sellerId = sellerId;
        this.dayNum = dayNum;
        this.pageNo = pageNo;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findTopProductBySellId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findTopProductBySellId_args args = new findTopProductBySellId_args();
        args.setSellerId(sellerId);
        args.setDayNum(dayNum);
        args.setPageNo(pageNo);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.meila.soa.openapi.thrift.product.model.ThriftPageSimpleProductModel getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findTopProductBySellId();
      }
    }

    public void findShopBySellerId(List<Long> ids, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findShopBySellerId_call method_call = new findShopBySellerId_call(ids, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findShopBySellerId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Long> ids;
      public findShopBySellerId_call(List<Long> ids, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ids = ids;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findShopBySellerId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findShopBySellerId_args args = new findShopBySellerId_args();
        args.setIds(ids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.meila.soa.openapi.thrift.product.model.ThriftShopModel> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findShopBySellerId();
      }
    }

    public void findPagedShop(int pageNo, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findPagedShop_call method_call = new findPagedShop_call(pageNo, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findPagedShop_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int pageNo;
      private int pageSize;
      public findPagedShop_call(int pageNo, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pageNo = pageNo;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findPagedShop", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findPagedShop_args args = new findPagedShop_args();
        args.setPageNo(pageNo);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.meila.soa.openapi.thrift.product.model.ThriftPageShopModel getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findPagedShop();
      }
    }

    public void findPagedProduct(int pageNo, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findPagedProduct_call method_call = new findPagedProduct_call(pageNo, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findPagedProduct_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int pageNo;
      private int pageSize;
      public findPagedProduct_call(int pageNo, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pageNo = pageNo;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findPagedProduct", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findPagedProduct_args args = new findPagedProduct_args();
        args.setPageNo(pageNo);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.meila.soa.openapi.thrift.product.model.ThriftPageSimpleProductModel getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findPagedProduct();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("findProductByIds", new findProductByIds());
      processMap.put("findSkuByIds", new findSkuByIds());
      processMap.put("addToCart", new addToCart());
      processMap.put("findValidProductByIds", new findValidProductByIds());
      processMap.put("findTopProductBySellId", new findTopProductBySellId());
      processMap.put("findShopBySellerId", new findShopBySellerId());
      processMap.put("findPagedShop", new findPagedShop());
      processMap.put("findPagedProduct", new findPagedProduct());
      return processMap;
    }

    public static class findProductByIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findProductByIds_args> {
      public findProductByIds() {
        super("findProductByIds");
      }

      public findProductByIds_args getEmptyArgsInstance() {
        return new findProductByIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findProductByIds_result getResult(I iface, findProductByIds_args args) throws org.apache.thrift.TException {
        findProductByIds_result result = new findProductByIds_result();
        result.success = iface.findProductByIds(args.ids);
        return result;
      }
    }

    public static class findSkuByIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findSkuByIds_args> {
      public findSkuByIds() {
        super("findSkuByIds");
      }

      public findSkuByIds_args getEmptyArgsInstance() {
        return new findSkuByIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findSkuByIds_result getResult(I iface, findSkuByIds_args args) throws org.apache.thrift.TException {
        findSkuByIds_result result = new findSkuByIds_result();
        result.success = iface.findSkuByIds(args.codes);
        return result;
      }
    }

    public static class addToCart<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addToCart_args> {
      public addToCart() {
        super("addToCart");
      }

      public addToCart_args getEmptyArgsInstance() {
        return new addToCart_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addToCart_result getResult(I iface, addToCart_args args) throws org.apache.thrift.TException {
        addToCart_result result = new addToCart_result();
        result.success = iface.addToCart(args.userId, args.skuCode, args.buyNum, args.type, args.sourceFrom);
        return result;
      }
    }

    public static class findValidProductByIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findValidProductByIds_args> {
      public findValidProductByIds() {
        super("findValidProductByIds");
      }

      public findValidProductByIds_args getEmptyArgsInstance() {
        return new findValidProductByIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findValidProductByIds_result getResult(I iface, findValidProductByIds_args args) throws org.apache.thrift.TException {
        findValidProductByIds_result result = new findValidProductByIds_result();
        result.success = iface.findValidProductByIds(args.ids);
        return result;
      }
    }

    public static class findTopProductBySellId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findTopProductBySellId_args> {
      public findTopProductBySellId() {
        super("findTopProductBySellId");
      }

      public findTopProductBySellId_args getEmptyArgsInstance() {
        return new findTopProductBySellId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findTopProductBySellId_result getResult(I iface, findTopProductBySellId_args args) throws org.apache.thrift.TException {
        findTopProductBySellId_result result = new findTopProductBySellId_result();
        result.success = iface.findTopProductBySellId(args.sellerId, args.dayNum, args.pageNo, args.pageSize);
        return result;
      }
    }

    public static class findShopBySellerId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findShopBySellerId_args> {
      public findShopBySellerId() {
        super("findShopBySellerId");
      }

      public findShopBySellerId_args getEmptyArgsInstance() {
        return new findShopBySellerId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findShopBySellerId_result getResult(I iface, findShopBySellerId_args args) throws org.apache.thrift.TException {
        findShopBySellerId_result result = new findShopBySellerId_result();
        result.success = iface.findShopBySellerId(args.ids);
        return result;
      }
    }

    public static class findPagedShop<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findPagedShop_args> {
      public findPagedShop() {
        super("findPagedShop");
      }

      public findPagedShop_args getEmptyArgsInstance() {
        return new findPagedShop_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findPagedShop_result getResult(I iface, findPagedShop_args args) throws org.apache.thrift.TException {
        findPagedShop_result result = new findPagedShop_result();
        result.success = iface.findPagedShop(args.pageNo, args.pageSize);
        return result;
      }
    }

    public static class findPagedProduct<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findPagedProduct_args> {
      public findPagedProduct() {
        super("findPagedProduct");
      }

      public findPagedProduct_args getEmptyArgsInstance() {
        return new findPagedProduct_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findPagedProduct_result getResult(I iface, findPagedProduct_args args) throws org.apache.thrift.TException {
        findPagedProduct_result result = new findPagedProduct_result();
        result.success = iface.findPagedProduct(args.pageNo, args.pageSize);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("findProductByIds", new findProductByIds());
      processMap.put("findSkuByIds", new findSkuByIds());
      processMap.put("addToCart", new addToCart());
      processMap.put("findValidProductByIds", new findValidProductByIds());
      processMap.put("findTopProductBySellId", new findTopProductBySellId());
      processMap.put("findShopBySellerId", new findShopBySellerId());
      processMap.put("findPagedShop", new findPagedShop());
      processMap.put("findPagedProduct", new findPagedProduct());
      return processMap;
    }

    public static class findProductByIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findProductByIds_args, List<com.meila.soa.openapi.thrift.product.model.ThriftProductModel>> {
      public findProductByIds() {
        super("findProductByIds");
      }

      public findProductByIds_args getEmptyArgsInstance() {
        return new findProductByIds_args();
      }

      public AsyncMethodCallback<List<com.meila.soa.openapi.thrift.product.model.ThriftProductModel>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.meila.soa.openapi.thrift.product.model.ThriftProductModel>>() { 
          public void onComplete(List<com.meila.soa.openapi.thrift.product.model.ThriftProductModel> o) {
            findProductByIds_result result = new findProductByIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findProductByIds_result result = new findProductByIds_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findProductByIds_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.meila.soa.openapi.thrift.product.model.ThriftProductModel>> resultHandler) throws TException {
        iface.findProductByIds(args.ids,resultHandler);
      }
    }

    public static class findSkuByIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findSkuByIds_args, List<com.meila.soa.openapi.thrift.product.model.ThriftProductModel>> {
      public findSkuByIds() {
        super("findSkuByIds");
      }

      public findSkuByIds_args getEmptyArgsInstance() {
        return new findSkuByIds_args();
      }

      public AsyncMethodCallback<List<com.meila.soa.openapi.thrift.product.model.ThriftProductModel>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.meila.soa.openapi.thrift.product.model.ThriftProductModel>>() { 
          public void onComplete(List<com.meila.soa.openapi.thrift.product.model.ThriftProductModel> o) {
            findSkuByIds_result result = new findSkuByIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findSkuByIds_result result = new findSkuByIds_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findSkuByIds_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.meila.soa.openapi.thrift.product.model.ThriftProductModel>> resultHandler) throws TException {
        iface.findSkuByIds(args.codes,resultHandler);
      }
    }

    public static class addToCart<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addToCart_args, com.meila.soa.openapi.thrift.product.model.ThriftCartItemResult> {
      public addToCart() {
        super("addToCart");
      }

      public addToCart_args getEmptyArgsInstance() {
        return new addToCart_args();
      }

      public AsyncMethodCallback<com.meila.soa.openapi.thrift.product.model.ThriftCartItemResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.meila.soa.openapi.thrift.product.model.ThriftCartItemResult>() { 
          public void onComplete(com.meila.soa.openapi.thrift.product.model.ThriftCartItemResult o) {
            addToCart_result result = new addToCart_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addToCart_result result = new addToCart_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addToCart_args args, org.apache.thrift.async.AsyncMethodCallback<com.meila.soa.openapi.thrift.product.model.ThriftCartItemResult> resultHandler) throws TException {
        iface.addToCart(args.userId, args.skuCode, args.buyNum, args.type, args.sourceFrom,resultHandler);
      }
    }

    public static class findValidProductByIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findValidProductByIds_args, List<com.meila.soa.openapi.thrift.product.model.ThriftSimpleProductModel>> {
      public findValidProductByIds() {
        super("findValidProductByIds");
      }

      public findValidProductByIds_args getEmptyArgsInstance() {
        return new findValidProductByIds_args();
      }

      public AsyncMethodCallback<List<com.meila.soa.openapi.thrift.product.model.ThriftSimpleProductModel>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.meila.soa.openapi.thrift.product.model.ThriftSimpleProductModel>>() { 
          public void onComplete(List<com.meila.soa.openapi.thrift.product.model.ThriftSimpleProductModel> o) {
            findValidProductByIds_result result = new findValidProductByIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findValidProductByIds_result result = new findValidProductByIds_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findValidProductByIds_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.meila.soa.openapi.thrift.product.model.ThriftSimpleProductModel>> resultHandler) throws TException {
        iface.findValidProductByIds(args.ids,resultHandler);
      }
    }

    public static class findTopProductBySellId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findTopProductBySellId_args, com.meila.soa.openapi.thrift.product.model.ThriftPageSimpleProductModel> {
      public findTopProductBySellId() {
        super("findTopProductBySellId");
      }

      public findTopProductBySellId_args getEmptyArgsInstance() {
        return new findTopProductBySellId_args();
      }

      public AsyncMethodCallback<com.meila.soa.openapi.thrift.product.model.ThriftPageSimpleProductModel> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.meila.soa.openapi.thrift.product.model.ThriftPageSimpleProductModel>() { 
          public void onComplete(com.meila.soa.openapi.thrift.product.model.ThriftPageSimpleProductModel o) {
            findTopProductBySellId_result result = new findTopProductBySellId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findTopProductBySellId_result result = new findTopProductBySellId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findTopProductBySellId_args args, org.apache.thrift.async.AsyncMethodCallback<com.meila.soa.openapi.thrift.product.model.ThriftPageSimpleProductModel> resultHandler) throws TException {
        iface.findTopProductBySellId(args.sellerId, args.dayNum, args.pageNo, args.pageSize,resultHandler);
      }
    }

    public static class findShopBySellerId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findShopBySellerId_args, List<com.meila.soa.openapi.thrift.product.model.ThriftShopModel>> {
      public findShopBySellerId() {
        super("findShopBySellerId");
      }

      public findShopBySellerId_args getEmptyArgsInstance() {
        return new findShopBySellerId_args();
      }

      public AsyncMethodCallback<List<com.meila.soa.openapi.thrift.product.model.ThriftShopModel>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.meila.soa.openapi.thrift.product.model.ThriftShopModel>>() { 
          public void onComplete(List<com.meila.soa.openapi.thrift.product.model.ThriftShopModel> o) {
            findShopBySellerId_result result = new findShopBySellerId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findShopBySellerId_result result = new findShopBySellerId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findShopBySellerId_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.meila.soa.openapi.thrift.product.model.ThriftShopModel>> resultHandler) throws TException {
        iface.findShopBySellerId(args.ids,resultHandler);
      }
    }

    public static class findPagedShop<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findPagedShop_args, com.meila.soa.openapi.thrift.product.model.ThriftPageShopModel> {
      public findPagedShop() {
        super("findPagedShop");
      }

      public findPagedShop_args getEmptyArgsInstance() {
        return new findPagedShop_args();
      }

      public AsyncMethodCallback<com.meila.soa.openapi.thrift.product.model.ThriftPageShopModel> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.meila.soa.openapi.thrift.product.model.ThriftPageShopModel>() { 
          public void onComplete(com.meila.soa.openapi.thrift.product.model.ThriftPageShopModel o) {
            findPagedShop_result result = new findPagedShop_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findPagedShop_result result = new findPagedShop_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findPagedShop_args args, org.apache.thrift.async.AsyncMethodCallback<com.meila.soa.openapi.thrift.product.model.ThriftPageShopModel> resultHandler) throws TException {
        iface.findPagedShop(args.pageNo, args.pageSize,resultHandler);
      }
    }

    public static class findPagedProduct<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findPagedProduct_args, com.meila.soa.openapi.thrift.product.model.ThriftPageSimpleProductModel> {
      public findPagedProduct() {
        super("findPagedProduct");
      }

      public findPagedProduct_args getEmptyArgsInstance() {
        return new findPagedProduct_args();
      }

      public AsyncMethodCallback<com.meila.soa.openapi.thrift.product.model.ThriftPageSimpleProductModel> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.meila.soa.openapi.thrift.product.model.ThriftPageSimpleProductModel>() { 
          public void onComplete(com.meila.soa.openapi.thrift.product.model.ThriftPageSimpleProductModel o) {
            findPagedProduct_result result = new findPagedProduct_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findPagedProduct_result result = new findPagedProduct_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findPagedProduct_args args, org.apache.thrift.async.AsyncMethodCallback<com.meila.soa.openapi.thrift.product.model.ThriftPageSimpleProductModel> resultHandler) throws TException {
        iface.findPagedProduct(args.pageNo, args.pageSize,resultHandler);
      }
    }

  }

  public static class findProductByIds_args implements org.apache.thrift.TBase<findProductByIds_args, findProductByIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<findProductByIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findProductByIds_args");

    private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findProductByIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findProductByIds_argsTupleSchemeFactory());
    }

    public List<Long> ids; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IDS((short)1, "ids");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IDS
            return IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IDS, new org.apache.thrift.meta_data.FieldMetaData("ids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64              , "long"))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findProductByIds_args.class, metaDataMap);
    }

    public findProductByIds_args() {
    }

    public findProductByIds_args(
      List<Long> ids)
    {
      this();
      this.ids = ids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findProductByIds_args(findProductByIds_args other) {
      if (other.isSetIds()) {
        List<Long> __this__ids = new ArrayList<Long>(other.ids.size());
        for (Long other_element : other.ids) {
          __this__ids.add(other_element);
        }
        this.ids = __this__ids;
      }
    }

    public findProductByIds_args deepCopy() {
      return new findProductByIds_args(this);
    }

    @Override
    public void clear() {
      this.ids = null;
    }

    public int getIdsSize() {
      return (this.ids == null) ? 0 : this.ids.size();
    }

    public java.util.Iterator<Long> getIdsIterator() {
      return (this.ids == null) ? null : this.ids.iterator();
    }

    public void addToIds(long elem) {
      if (this.ids == null) {
        this.ids = new ArrayList<Long>();
      }
      this.ids.add(elem);
    }

    public List<Long> getIds() {
      return this.ids;
    }

    public findProductByIds_args setIds(List<Long> ids) {
      this.ids = ids;
      return this;
    }

    public void unsetIds() {
      this.ids = null;
    }

    /** Returns true if field ids is set (has been assigned a value) and false otherwise */
    public boolean isSetIds() {
      return this.ids != null;
    }

    public void setIdsIsSet(boolean value) {
      if (!value) {
        this.ids = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IDS:
        if (value == null) {
          unsetIds();
        } else {
          setIds((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IDS:
        return getIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IDS:
        return isSetIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findProductByIds_args)
        return this.equals((findProductByIds_args)that);
      return false;
    }

    public boolean equals(findProductByIds_args that) {
      if (that == null)
        return false;

      boolean this_present_ids = true && this.isSetIds();
      boolean that_present_ids = true && that.isSetIds();
      if (this_present_ids || that_present_ids) {
        if (!(this_present_ids && that_present_ids))
          return false;
        if (!this.ids.equals(that.ids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ids = true && (isSetIds());
      list.add(present_ids);
      if (present_ids)
        list.add(ids);

      return list.hashCode();
    }

    @Override
    public int compareTo(findProductByIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIds()).compareTo(other.isSetIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ids, other.ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findProductByIds_args(");
      boolean first = true;

      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findProductByIds_argsStandardSchemeFactory implements SchemeFactory {
      public findProductByIds_argsStandardScheme getScheme() {
        return new findProductByIds_argsStandardScheme();
      }
    }

    private static class findProductByIds_argsStandardScheme extends StandardScheme<findProductByIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findProductByIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.ids = new ArrayList<Long>(_list0.size);
                  long _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = iprot.readI64();
                    struct.ids.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findProductByIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ids != null) {
          oprot.writeFieldBegin(IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.ids.size()));
            for (long _iter3 : struct.ids)
            {
              oprot.writeI64(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findProductByIds_argsTupleSchemeFactory implements SchemeFactory {
      public findProductByIds_argsTupleScheme getScheme() {
        return new findProductByIds_argsTupleScheme();
      }
    }

    private static class findProductByIds_argsTupleScheme extends TupleScheme<findProductByIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findProductByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIds()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIds()) {
          {
            oprot.writeI32(struct.ids.size());
            for (long _iter4 : struct.ids)
            {
              oprot.writeI64(_iter4);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findProductByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.ids = new ArrayList<Long>(_list5.size);
            long _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = iprot.readI64();
              struct.ids.add(_elem6);
            }
          }
          struct.setIdsIsSet(true);
        }
      }
    }

  }

  public static class findProductByIds_result implements org.apache.thrift.TBase<findProductByIds_result, findProductByIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<findProductByIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findProductByIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findProductByIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findProductByIds_resultTupleSchemeFactory());
    }

    public List<com.meila.soa.openapi.thrift.product.model.ThriftProductModel> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.meila.soa.openapi.thrift.product.model.ThriftProductModel.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findProductByIds_result.class, metaDataMap);
    }

    public findProductByIds_result() {
    }

    public findProductByIds_result(
      List<com.meila.soa.openapi.thrift.product.model.ThriftProductModel> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findProductByIds_result(findProductByIds_result other) {
      if (other.isSetSuccess()) {
        List<com.meila.soa.openapi.thrift.product.model.ThriftProductModel> __this__success = new ArrayList<com.meila.soa.openapi.thrift.product.model.ThriftProductModel>(other.success.size());
        for (com.meila.soa.openapi.thrift.product.model.ThriftProductModel other_element : other.success) {
          __this__success.add(new com.meila.soa.openapi.thrift.product.model.ThriftProductModel(other_element));
        }
        this.success = __this__success;
      }
    }

    public findProductByIds_result deepCopy() {
      return new findProductByIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.meila.soa.openapi.thrift.product.model.ThriftProductModel> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.meila.soa.openapi.thrift.product.model.ThriftProductModel elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.meila.soa.openapi.thrift.product.model.ThriftProductModel>();
      }
      this.success.add(elem);
    }

    public List<com.meila.soa.openapi.thrift.product.model.ThriftProductModel> getSuccess() {
      return this.success;
    }

    public findProductByIds_result setSuccess(List<com.meila.soa.openapi.thrift.product.model.ThriftProductModel> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.meila.soa.openapi.thrift.product.model.ThriftProductModel>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findProductByIds_result)
        return this.equals((findProductByIds_result)that);
      return false;
    }

    public boolean equals(findProductByIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findProductByIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findProductByIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findProductByIds_resultStandardSchemeFactory implements SchemeFactory {
      public findProductByIds_resultStandardScheme getScheme() {
        return new findProductByIds_resultStandardScheme();
      }
    }

    private static class findProductByIds_resultStandardScheme extends StandardScheme<findProductByIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findProductByIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<com.meila.soa.openapi.thrift.product.model.ThriftProductModel>(_list8.size);
                  com.meila.soa.openapi.thrift.product.model.ThriftProductModel _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new com.meila.soa.openapi.thrift.product.model.ThriftProductModel();
                    _elem9.read(iprot);
                    struct.success.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findProductByIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.meila.soa.openapi.thrift.product.model.ThriftProductModel _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findProductByIds_resultTupleSchemeFactory implements SchemeFactory {
      public findProductByIds_resultTupleScheme getScheme() {
        return new findProductByIds_resultTupleScheme();
      }
    }

    private static class findProductByIds_resultTupleScheme extends TupleScheme<findProductByIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findProductByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.meila.soa.openapi.thrift.product.model.ThriftProductModel _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findProductByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.meila.soa.openapi.thrift.product.model.ThriftProductModel>(_list13.size);
            com.meila.soa.openapi.thrift.product.model.ThriftProductModel _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new com.meila.soa.openapi.thrift.product.model.ThriftProductModel();
              _elem14.read(iprot);
              struct.success.add(_elem14);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findSkuByIds_args implements org.apache.thrift.TBase<findSkuByIds_args, findSkuByIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<findSkuByIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findSkuByIds_args");

    private static final org.apache.thrift.protocol.TField CODES_FIELD_DESC = new org.apache.thrift.protocol.TField("codes", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findSkuByIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findSkuByIds_argsTupleSchemeFactory());
    }

    public List<String> codes; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CODES((short)1, "codes");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CODES
            return CODES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CODES, new org.apache.thrift.meta_data.FieldMetaData("codes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findSkuByIds_args.class, metaDataMap);
    }

    public findSkuByIds_args() {
    }

    public findSkuByIds_args(
      List<String> codes)
    {
      this();
      this.codes = codes;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findSkuByIds_args(findSkuByIds_args other) {
      if (other.isSetCodes()) {
        List<String> __this__codes = new ArrayList<String>(other.codes);
        this.codes = __this__codes;
      }
    }

    public findSkuByIds_args deepCopy() {
      return new findSkuByIds_args(this);
    }

    @Override
    public void clear() {
      this.codes = null;
    }

    public int getCodesSize() {
      return (this.codes == null) ? 0 : this.codes.size();
    }

    public java.util.Iterator<String> getCodesIterator() {
      return (this.codes == null) ? null : this.codes.iterator();
    }

    public void addToCodes(String elem) {
      if (this.codes == null) {
        this.codes = new ArrayList<String>();
      }
      this.codes.add(elem);
    }

    public List<String> getCodes() {
      return this.codes;
    }

    public findSkuByIds_args setCodes(List<String> codes) {
      this.codes = codes;
      return this;
    }

    public void unsetCodes() {
      this.codes = null;
    }

    /** Returns true if field codes is set (has been assigned a value) and false otherwise */
    public boolean isSetCodes() {
      return this.codes != null;
    }

    public void setCodesIsSet(boolean value) {
      if (!value) {
        this.codes = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CODES:
        if (value == null) {
          unsetCodes();
        } else {
          setCodes((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CODES:
        return getCodes();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CODES:
        return isSetCodes();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findSkuByIds_args)
        return this.equals((findSkuByIds_args)that);
      return false;
    }

    public boolean equals(findSkuByIds_args that) {
      if (that == null)
        return false;

      boolean this_present_codes = true && this.isSetCodes();
      boolean that_present_codes = true && that.isSetCodes();
      if (this_present_codes || that_present_codes) {
        if (!(this_present_codes && that_present_codes))
          return false;
        if (!this.codes.equals(that.codes))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_codes = true && (isSetCodes());
      list.add(present_codes);
      if (present_codes)
        list.add(codes);

      return list.hashCode();
    }

    @Override
    public int compareTo(findSkuByIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCodes()).compareTo(other.isSetCodes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCodes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.codes, other.codes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findSkuByIds_args(");
      boolean first = true;

      sb.append("codes:");
      if (this.codes == null) {
        sb.append("null");
      } else {
        sb.append(this.codes);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findSkuByIds_argsStandardSchemeFactory implements SchemeFactory {
      public findSkuByIds_argsStandardScheme getScheme() {
        return new findSkuByIds_argsStandardScheme();
      }
    }

    private static class findSkuByIds_argsStandardScheme extends StandardScheme<findSkuByIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findSkuByIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CODES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.codes = new ArrayList<String>(_list16.size);
                  String _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = iprot.readString();
                    struct.codes.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setCodesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findSkuByIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.codes != null) {
          oprot.writeFieldBegin(CODES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.codes.size()));
            for (String _iter19 : struct.codes)
            {
              oprot.writeString(_iter19);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findSkuByIds_argsTupleSchemeFactory implements SchemeFactory {
      public findSkuByIds_argsTupleScheme getScheme() {
        return new findSkuByIds_argsTupleScheme();
      }
    }

    private static class findSkuByIds_argsTupleScheme extends TupleScheme<findSkuByIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findSkuByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCodes()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCodes()) {
          {
            oprot.writeI32(struct.codes.size());
            for (String _iter20 : struct.codes)
            {
              oprot.writeString(_iter20);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findSkuByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.codes = new ArrayList<String>(_list21.size);
            String _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = iprot.readString();
              struct.codes.add(_elem22);
            }
          }
          struct.setCodesIsSet(true);
        }
      }
    }

  }

  public static class findSkuByIds_result implements org.apache.thrift.TBase<findSkuByIds_result, findSkuByIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<findSkuByIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findSkuByIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findSkuByIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findSkuByIds_resultTupleSchemeFactory());
    }

    public List<com.meila.soa.openapi.thrift.product.model.ThriftProductModel> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.meila.soa.openapi.thrift.product.model.ThriftProductModel.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findSkuByIds_result.class, metaDataMap);
    }

    public findSkuByIds_result() {
    }

    public findSkuByIds_result(
      List<com.meila.soa.openapi.thrift.product.model.ThriftProductModel> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findSkuByIds_result(findSkuByIds_result other) {
      if (other.isSetSuccess()) {
        List<com.meila.soa.openapi.thrift.product.model.ThriftProductModel> __this__success = new ArrayList<com.meila.soa.openapi.thrift.product.model.ThriftProductModel>(other.success.size());
        for (com.meila.soa.openapi.thrift.product.model.ThriftProductModel other_element : other.success) {
          __this__success.add(new com.meila.soa.openapi.thrift.product.model.ThriftProductModel(other_element));
        }
        this.success = __this__success;
      }
    }

    public findSkuByIds_result deepCopy() {
      return new findSkuByIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.meila.soa.openapi.thrift.product.model.ThriftProductModel> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.meila.soa.openapi.thrift.product.model.ThriftProductModel elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.meila.soa.openapi.thrift.product.model.ThriftProductModel>();
      }
      this.success.add(elem);
    }

    public List<com.meila.soa.openapi.thrift.product.model.ThriftProductModel> getSuccess() {
      return this.success;
    }

    public findSkuByIds_result setSuccess(List<com.meila.soa.openapi.thrift.product.model.ThriftProductModel> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.meila.soa.openapi.thrift.product.model.ThriftProductModel>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findSkuByIds_result)
        return this.equals((findSkuByIds_result)that);
      return false;
    }

    public boolean equals(findSkuByIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findSkuByIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findSkuByIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findSkuByIds_resultStandardSchemeFactory implements SchemeFactory {
      public findSkuByIds_resultStandardScheme getScheme() {
        return new findSkuByIds_resultStandardScheme();
      }
    }

    private static class findSkuByIds_resultStandardScheme extends StandardScheme<findSkuByIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findSkuByIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new ArrayList<com.meila.soa.openapi.thrift.product.model.ThriftProductModel>(_list24.size);
                  com.meila.soa.openapi.thrift.product.model.ThriftProductModel _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = new com.meila.soa.openapi.thrift.product.model.ThriftProductModel();
                    _elem25.read(iprot);
                    struct.success.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findSkuByIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.meila.soa.openapi.thrift.product.model.ThriftProductModel _iter27 : struct.success)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findSkuByIds_resultTupleSchemeFactory implements SchemeFactory {
      public findSkuByIds_resultTupleScheme getScheme() {
        return new findSkuByIds_resultTupleScheme();
      }
    }

    private static class findSkuByIds_resultTupleScheme extends TupleScheme<findSkuByIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findSkuByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.meila.soa.openapi.thrift.product.model.ThriftProductModel _iter28 : struct.success)
            {
              _iter28.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findSkuByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.meila.soa.openapi.thrift.product.model.ThriftProductModel>(_list29.size);
            com.meila.soa.openapi.thrift.product.model.ThriftProductModel _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = new com.meila.soa.openapi.thrift.product.model.ThriftProductModel();
              _elem30.read(iprot);
              struct.success.add(_elem30);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addToCart_args implements org.apache.thrift.TBase<addToCart_args, addToCart_args._Fields>, java.io.Serializable, Cloneable, Comparable<addToCart_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addToCart_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField SKU_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("skuCode", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField BUY_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("buyNum", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField SOURCE_FROM_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceFrom", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addToCart_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addToCart_argsTupleSchemeFactory());
    }

    public long userId; // required
    public String skuCode; // required
    public int buyNum; // required
    /**
     * 
     * @see com.meila.soa.openapi.thrift.product.model.CartOperationType
     */
    public com.meila.soa.openapi.thrift.product.model.CartOperationType type; // required
    public String sourceFrom; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      SKU_CODE((short)2, "skuCode"),
      BUY_NUM((short)3, "buyNum"),
      /**
       * 
       * @see com.meila.soa.openapi.thrift.product.model.CartOperationType
       */
      TYPE((short)4, "type"),
      SOURCE_FROM((short)5, "sourceFrom");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // SKU_CODE
            return SKU_CODE;
          case 3: // BUY_NUM
            return BUY_NUM;
          case 4: // TYPE
            return TYPE;
          case 5: // SOURCE_FROM
            return SOURCE_FROM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __BUYNUM_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "long")));
      tmpMap.put(_Fields.SKU_CODE, new org.apache.thrift.meta_data.FieldMetaData("skuCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BUY_NUM, new org.apache.thrift.meta_data.FieldMetaData("buyNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.meila.soa.openapi.thrift.product.model.CartOperationType.class)));
      tmpMap.put(_Fields.SOURCE_FROM, new org.apache.thrift.meta_data.FieldMetaData("sourceFrom", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addToCart_args.class, metaDataMap);
    }

    public addToCart_args() {
    }

    public addToCart_args(
      long userId,
      String skuCode,
      int buyNum,
      com.meila.soa.openapi.thrift.product.model.CartOperationType type,
      String sourceFrom)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
      this.skuCode = skuCode;
      this.buyNum = buyNum;
      setBuyNumIsSet(true);
      this.type = type;
      this.sourceFrom = sourceFrom;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addToCart_args(addToCart_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
      if (other.isSetSkuCode()) {
        this.skuCode = other.skuCode;
      }
      this.buyNum = other.buyNum;
      if (other.isSetType()) {
        this.type = other.type;
      }
      if (other.isSetSourceFrom()) {
        this.sourceFrom = other.sourceFrom;
      }
    }

    public addToCart_args deepCopy() {
      return new addToCart_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
      this.skuCode = null;
      setBuyNumIsSet(false);
      this.buyNum = 0;
      this.type = null;
      this.sourceFrom = null;
    }

    public long getUserId() {
      return this.userId;
    }

    public addToCart_args setUserId(long userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public String getSkuCode() {
      return this.skuCode;
    }

    public addToCart_args setSkuCode(String skuCode) {
      this.skuCode = skuCode;
      return this;
    }

    public void unsetSkuCode() {
      this.skuCode = null;
    }

    /** Returns true if field skuCode is set (has been assigned a value) and false otherwise */
    public boolean isSetSkuCode() {
      return this.skuCode != null;
    }

    public void setSkuCodeIsSet(boolean value) {
      if (!value) {
        this.skuCode = null;
      }
    }

    public int getBuyNum() {
      return this.buyNum;
    }

    public addToCart_args setBuyNum(int buyNum) {
      this.buyNum = buyNum;
      setBuyNumIsSet(true);
      return this;
    }

    public void unsetBuyNum() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BUYNUM_ISSET_ID);
    }

    /** Returns true if field buyNum is set (has been assigned a value) and false otherwise */
    public boolean isSetBuyNum() {
      return EncodingUtils.testBit(__isset_bitfield, __BUYNUM_ISSET_ID);
    }

    public void setBuyNumIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BUYNUM_ISSET_ID, value);
    }

    /**
     * 
     * @see com.meila.soa.openapi.thrift.product.model.CartOperationType
     */
    public com.meila.soa.openapi.thrift.product.model.CartOperationType getType() {
      return this.type;
    }

    /**
     * 
     * @see com.meila.soa.openapi.thrift.product.model.CartOperationType
     */
    public addToCart_args setType(com.meila.soa.openapi.thrift.product.model.CartOperationType type) {
      this.type = type;
      return this;
    }

    public void unsetType() {
      this.type = null;
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return this.type != null;
    }

    public void setTypeIsSet(boolean value) {
      if (!value) {
        this.type = null;
      }
    }

    public String getSourceFrom() {
      return this.sourceFrom;
    }

    public addToCart_args setSourceFrom(String sourceFrom) {
      this.sourceFrom = sourceFrom;
      return this;
    }

    public void unsetSourceFrom() {
      this.sourceFrom = null;
    }

    /** Returns true if field sourceFrom is set (has been assigned a value) and false otherwise */
    public boolean isSetSourceFrom() {
      return this.sourceFrom != null;
    }

    public void setSourceFromIsSet(boolean value) {
      if (!value) {
        this.sourceFrom = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Long)value);
        }
        break;

      case SKU_CODE:
        if (value == null) {
          unsetSkuCode();
        } else {
          setSkuCode((String)value);
        }
        break;

      case BUY_NUM:
        if (value == null) {
          unsetBuyNum();
        } else {
          setBuyNum((Integer)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((com.meila.soa.openapi.thrift.product.model.CartOperationType)value);
        }
        break;

      case SOURCE_FROM:
        if (value == null) {
          unsetSourceFrom();
        } else {
          setSourceFrom((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      case SKU_CODE:
        return getSkuCode();

      case BUY_NUM:
        return getBuyNum();

      case TYPE:
        return getType();

      case SOURCE_FROM:
        return getSourceFrom();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case SKU_CODE:
        return isSetSkuCode();
      case BUY_NUM:
        return isSetBuyNum();
      case TYPE:
        return isSetType();
      case SOURCE_FROM:
        return isSetSourceFrom();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addToCart_args)
        return this.equals((addToCart_args)that);
      return false;
    }

    public boolean equals(addToCart_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_skuCode = true && this.isSetSkuCode();
      boolean that_present_skuCode = true && that.isSetSkuCode();
      if (this_present_skuCode || that_present_skuCode) {
        if (!(this_present_skuCode && that_present_skuCode))
          return false;
        if (!this.skuCode.equals(that.skuCode))
          return false;
      }

      boolean this_present_buyNum = true;
      boolean that_present_buyNum = true;
      if (this_present_buyNum || that_present_buyNum) {
        if (!(this_present_buyNum && that_present_buyNum))
          return false;
        if (this.buyNum != that.buyNum)
          return false;
      }

      boolean this_present_type = true && this.isSetType();
      boolean that_present_type = true && that.isSetType();
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (!this.type.equals(that.type))
          return false;
      }

      boolean this_present_sourceFrom = true && this.isSetSourceFrom();
      boolean that_present_sourceFrom = true && that.isSetSourceFrom();
      if (this_present_sourceFrom || that_present_sourceFrom) {
        if (!(this_present_sourceFrom && that_present_sourceFrom))
          return false;
        if (!this.sourceFrom.equals(that.sourceFrom))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      boolean present_skuCode = true && (isSetSkuCode());
      list.add(present_skuCode);
      if (present_skuCode)
        list.add(skuCode);

      boolean present_buyNum = true;
      list.add(present_buyNum);
      if (present_buyNum)
        list.add(buyNum);

      boolean present_type = true && (isSetType());
      list.add(present_type);
      if (present_type)
        list.add(type.getValue());

      boolean present_sourceFrom = true && (isSetSourceFrom());
      list.add(present_sourceFrom);
      if (present_sourceFrom)
        list.add(sourceFrom);

      return list.hashCode();
    }

    @Override
    public int compareTo(addToCart_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSkuCode()).compareTo(other.isSetSkuCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSkuCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.skuCode, other.skuCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBuyNum()).compareTo(other.isSetBuyNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBuyNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buyNum, other.buyNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSourceFrom()).compareTo(other.isSetSourceFrom());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSourceFrom()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceFrom, other.sourceFrom);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addToCart_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("skuCode:");
      if (this.skuCode == null) {
        sb.append("null");
      } else {
        sb.append(this.skuCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("buyNum:");
      sb.append(this.buyNum);
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sourceFrom:");
      if (this.sourceFrom == null) {
        sb.append("null");
      } else {
        sb.append(this.sourceFrom);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addToCart_argsStandardSchemeFactory implements SchemeFactory {
      public addToCart_argsStandardScheme getScheme() {
        return new addToCart_argsStandardScheme();
      }
    }

    private static class addToCart_argsStandardScheme extends StandardScheme<addToCart_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addToCart_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.userId = iprot.readI64();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SKU_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.skuCode = iprot.readString();
                struct.setSkuCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // BUY_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.buyNum = iprot.readI32();
                struct.setBuyNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = com.meila.soa.openapi.thrift.product.model.CartOperationType.findByValue(iprot.readI32());
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SOURCE_FROM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sourceFrom = iprot.readString();
                struct.setSourceFromIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addToCart_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI64(struct.userId);
        oprot.writeFieldEnd();
        if (struct.skuCode != null) {
          oprot.writeFieldBegin(SKU_CODE_FIELD_DESC);
          oprot.writeString(struct.skuCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(BUY_NUM_FIELD_DESC);
        oprot.writeI32(struct.buyNum);
        oprot.writeFieldEnd();
        if (struct.type != null) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeI32(struct.type.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.sourceFrom != null) {
          oprot.writeFieldBegin(SOURCE_FROM_FIELD_DESC);
          oprot.writeString(struct.sourceFrom);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addToCart_argsTupleSchemeFactory implements SchemeFactory {
      public addToCart_argsTupleScheme getScheme() {
        return new addToCart_argsTupleScheme();
      }
    }

    private static class addToCart_argsTupleScheme extends TupleScheme<addToCart_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addToCart_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetSkuCode()) {
          optionals.set(1);
        }
        if (struct.isSetBuyNum()) {
          optionals.set(2);
        }
        if (struct.isSetType()) {
          optionals.set(3);
        }
        if (struct.isSetSourceFrom()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetUserId()) {
          oprot.writeI64(struct.userId);
        }
        if (struct.isSetSkuCode()) {
          oprot.writeString(struct.skuCode);
        }
        if (struct.isSetBuyNum()) {
          oprot.writeI32(struct.buyNum);
        }
        if (struct.isSetType()) {
          oprot.writeI32(struct.type.getValue());
        }
        if (struct.isSetSourceFrom()) {
          oprot.writeString(struct.sourceFrom);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addToCart_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.userId = iprot.readI64();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.skuCode = iprot.readString();
          struct.setSkuCodeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.buyNum = iprot.readI32();
          struct.setBuyNumIsSet(true);
        }
        if (incoming.get(3)) {
          struct.type = com.meila.soa.openapi.thrift.product.model.CartOperationType.findByValue(iprot.readI32());
          struct.setTypeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.sourceFrom = iprot.readString();
          struct.setSourceFromIsSet(true);
        }
      }
    }

  }

  public static class addToCart_result implements org.apache.thrift.TBase<addToCart_result, addToCart_result._Fields>, java.io.Serializable, Cloneable, Comparable<addToCart_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addToCart_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addToCart_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addToCart_resultTupleSchemeFactory());
    }

    public com.meila.soa.openapi.thrift.product.model.ThriftCartItemResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.meila.soa.openapi.thrift.product.model.ThriftCartItemResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addToCart_result.class, metaDataMap);
    }

    public addToCart_result() {
    }

    public addToCart_result(
      com.meila.soa.openapi.thrift.product.model.ThriftCartItemResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addToCart_result(addToCart_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.meila.soa.openapi.thrift.product.model.ThriftCartItemResult(other.success);
      }
    }

    public addToCart_result deepCopy() {
      return new addToCart_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.meila.soa.openapi.thrift.product.model.ThriftCartItemResult getSuccess() {
      return this.success;
    }

    public addToCart_result setSuccess(com.meila.soa.openapi.thrift.product.model.ThriftCartItemResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.meila.soa.openapi.thrift.product.model.ThriftCartItemResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addToCart_result)
        return this.equals((addToCart_result)that);
      return false;
    }

    public boolean equals(addToCart_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addToCart_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addToCart_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addToCart_resultStandardSchemeFactory implements SchemeFactory {
      public addToCart_resultStandardScheme getScheme() {
        return new addToCart_resultStandardScheme();
      }
    }

    private static class addToCart_resultStandardScheme extends StandardScheme<addToCart_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addToCart_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.meila.soa.openapi.thrift.product.model.ThriftCartItemResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addToCart_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addToCart_resultTupleSchemeFactory implements SchemeFactory {
      public addToCart_resultTupleScheme getScheme() {
        return new addToCart_resultTupleScheme();
      }
    }

    private static class addToCart_resultTupleScheme extends TupleScheme<addToCart_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addToCart_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addToCart_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.meila.soa.openapi.thrift.product.model.ThriftCartItemResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findValidProductByIds_args implements org.apache.thrift.TBase<findValidProductByIds_args, findValidProductByIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<findValidProductByIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findValidProductByIds_args");

    private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findValidProductByIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findValidProductByIds_argsTupleSchemeFactory());
    }

    public List<Long> ids; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IDS((short)1, "ids");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IDS
            return IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IDS, new org.apache.thrift.meta_data.FieldMetaData("ids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64              , "long"))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findValidProductByIds_args.class, metaDataMap);
    }

    public findValidProductByIds_args() {
    }

    public findValidProductByIds_args(
      List<Long> ids)
    {
      this();
      this.ids = ids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findValidProductByIds_args(findValidProductByIds_args other) {
      if (other.isSetIds()) {
        List<Long> __this__ids = new ArrayList<Long>(other.ids.size());
        for (Long other_element : other.ids) {
          __this__ids.add(other_element);
        }
        this.ids = __this__ids;
      }
    }

    public findValidProductByIds_args deepCopy() {
      return new findValidProductByIds_args(this);
    }

    @Override
    public void clear() {
      this.ids = null;
    }

    public int getIdsSize() {
      return (this.ids == null) ? 0 : this.ids.size();
    }

    public java.util.Iterator<Long> getIdsIterator() {
      return (this.ids == null) ? null : this.ids.iterator();
    }

    public void addToIds(long elem) {
      if (this.ids == null) {
        this.ids = new ArrayList<Long>();
      }
      this.ids.add(elem);
    }

    public List<Long> getIds() {
      return this.ids;
    }

    public findValidProductByIds_args setIds(List<Long> ids) {
      this.ids = ids;
      return this;
    }

    public void unsetIds() {
      this.ids = null;
    }

    /** Returns true if field ids is set (has been assigned a value) and false otherwise */
    public boolean isSetIds() {
      return this.ids != null;
    }

    public void setIdsIsSet(boolean value) {
      if (!value) {
        this.ids = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IDS:
        if (value == null) {
          unsetIds();
        } else {
          setIds((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IDS:
        return getIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IDS:
        return isSetIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findValidProductByIds_args)
        return this.equals((findValidProductByIds_args)that);
      return false;
    }

    public boolean equals(findValidProductByIds_args that) {
      if (that == null)
        return false;

      boolean this_present_ids = true && this.isSetIds();
      boolean that_present_ids = true && that.isSetIds();
      if (this_present_ids || that_present_ids) {
        if (!(this_present_ids && that_present_ids))
          return false;
        if (!this.ids.equals(that.ids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ids = true && (isSetIds());
      list.add(present_ids);
      if (present_ids)
        list.add(ids);

      return list.hashCode();
    }

    @Override
    public int compareTo(findValidProductByIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIds()).compareTo(other.isSetIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ids, other.ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findValidProductByIds_args(");
      boolean first = true;

      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findValidProductByIds_argsStandardSchemeFactory implements SchemeFactory {
      public findValidProductByIds_argsStandardScheme getScheme() {
        return new findValidProductByIds_argsStandardScheme();
      }
    }

    private static class findValidProductByIds_argsStandardScheme extends StandardScheme<findValidProductByIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findValidProductByIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.ids = new ArrayList<Long>(_list32.size);
                  long _elem33;
                  for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                  {
                    _elem33 = iprot.readI64();
                    struct.ids.add(_elem33);
                  }
                  iprot.readListEnd();
                }
                struct.setIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findValidProductByIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ids != null) {
          oprot.writeFieldBegin(IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.ids.size()));
            for (long _iter35 : struct.ids)
            {
              oprot.writeI64(_iter35);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findValidProductByIds_argsTupleSchemeFactory implements SchemeFactory {
      public findValidProductByIds_argsTupleScheme getScheme() {
        return new findValidProductByIds_argsTupleScheme();
      }
    }

    private static class findValidProductByIds_argsTupleScheme extends TupleScheme<findValidProductByIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findValidProductByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIds()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIds()) {
          {
            oprot.writeI32(struct.ids.size());
            for (long _iter36 : struct.ids)
            {
              oprot.writeI64(_iter36);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findValidProductByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.ids = new ArrayList<Long>(_list37.size);
            long _elem38;
            for (int _i39 = 0; _i39 < _list37.size; ++_i39)
            {
              _elem38 = iprot.readI64();
              struct.ids.add(_elem38);
            }
          }
          struct.setIdsIsSet(true);
        }
      }
    }

  }

  public static class findValidProductByIds_result implements org.apache.thrift.TBase<findValidProductByIds_result, findValidProductByIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<findValidProductByIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findValidProductByIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findValidProductByIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findValidProductByIds_resultTupleSchemeFactory());
    }

    public List<com.meila.soa.openapi.thrift.product.model.ThriftSimpleProductModel> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.meila.soa.openapi.thrift.product.model.ThriftSimpleProductModel.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findValidProductByIds_result.class, metaDataMap);
    }

    public findValidProductByIds_result() {
    }

    public findValidProductByIds_result(
      List<com.meila.soa.openapi.thrift.product.model.ThriftSimpleProductModel> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findValidProductByIds_result(findValidProductByIds_result other) {
      if (other.isSetSuccess()) {
        List<com.meila.soa.openapi.thrift.product.model.ThriftSimpleProductModel> __this__success = new ArrayList<com.meila.soa.openapi.thrift.product.model.ThriftSimpleProductModel>(other.success.size());
        for (com.meila.soa.openapi.thrift.product.model.ThriftSimpleProductModel other_element : other.success) {
          __this__success.add(new com.meila.soa.openapi.thrift.product.model.ThriftSimpleProductModel(other_element));
        }
        this.success = __this__success;
      }
    }

    public findValidProductByIds_result deepCopy() {
      return new findValidProductByIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.meila.soa.openapi.thrift.product.model.ThriftSimpleProductModel> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.meila.soa.openapi.thrift.product.model.ThriftSimpleProductModel elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.meila.soa.openapi.thrift.product.model.ThriftSimpleProductModel>();
      }
      this.success.add(elem);
    }

    public List<com.meila.soa.openapi.thrift.product.model.ThriftSimpleProductModel> getSuccess() {
      return this.success;
    }

    public findValidProductByIds_result setSuccess(List<com.meila.soa.openapi.thrift.product.model.ThriftSimpleProductModel> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.meila.soa.openapi.thrift.product.model.ThriftSimpleProductModel>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findValidProductByIds_result)
        return this.equals((findValidProductByIds_result)that);
      return false;
    }

    public boolean equals(findValidProductByIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findValidProductByIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findValidProductByIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findValidProductByIds_resultStandardSchemeFactory implements SchemeFactory {
      public findValidProductByIds_resultStandardScheme getScheme() {
        return new findValidProductByIds_resultStandardScheme();
      }
    }

    private static class findValidProductByIds_resultStandardScheme extends StandardScheme<findValidProductByIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findValidProductByIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.success = new ArrayList<com.meila.soa.openapi.thrift.product.model.ThriftSimpleProductModel>(_list40.size);
                  com.meila.soa.openapi.thrift.product.model.ThriftSimpleProductModel _elem41;
                  for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                  {
                    _elem41 = new com.meila.soa.openapi.thrift.product.model.ThriftSimpleProductModel();
                    _elem41.read(iprot);
                    struct.success.add(_elem41);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findValidProductByIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.meila.soa.openapi.thrift.product.model.ThriftSimpleProductModel _iter43 : struct.success)
            {
              _iter43.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findValidProductByIds_resultTupleSchemeFactory implements SchemeFactory {
      public findValidProductByIds_resultTupleScheme getScheme() {
        return new findValidProductByIds_resultTupleScheme();
      }
    }

    private static class findValidProductByIds_resultTupleScheme extends TupleScheme<findValidProductByIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findValidProductByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.meila.soa.openapi.thrift.product.model.ThriftSimpleProductModel _iter44 : struct.success)
            {
              _iter44.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findValidProductByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.meila.soa.openapi.thrift.product.model.ThriftSimpleProductModel>(_list45.size);
            com.meila.soa.openapi.thrift.product.model.ThriftSimpleProductModel _elem46;
            for (int _i47 = 0; _i47 < _list45.size; ++_i47)
            {
              _elem46 = new com.meila.soa.openapi.thrift.product.model.ThriftSimpleProductModel();
              _elem46.read(iprot);
              struct.success.add(_elem46);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findTopProductBySellId_args implements org.apache.thrift.TBase<findTopProductBySellId_args, findTopProductBySellId_args._Fields>, java.io.Serializable, Cloneable, Comparable<findTopProductBySellId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findTopProductBySellId_args");

    private static final org.apache.thrift.protocol.TField SELLER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sellerId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField DAY_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("dayNum", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNo", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findTopProductBySellId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findTopProductBySellId_argsTupleSchemeFactory());
    }

    public long sellerId; // required
    public int dayNum; // required
    public int pageNo; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SELLER_ID((short)1, "sellerId"),
      DAY_NUM((short)2, "dayNum"),
      PAGE_NO((short)3, "pageNo"),
      PAGE_SIZE((short)4, "pageSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SELLER_ID
            return SELLER_ID;
          case 2: // DAY_NUM
            return DAY_NUM;
          case 3: // PAGE_NO
            return PAGE_NO;
          case 4: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SELLERID_ISSET_ID = 0;
    private static final int __DAYNUM_ISSET_ID = 1;
    private static final int __PAGENO_ISSET_ID = 2;
    private static final int __PAGESIZE_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SELLER_ID, new org.apache.thrift.meta_data.FieldMetaData("sellerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "long")));
      tmpMap.put(_Fields.DAY_NUM, new org.apache.thrift.meta_data.FieldMetaData("dayNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.PAGE_NO, new org.apache.thrift.meta_data.FieldMetaData("pageNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findTopProductBySellId_args.class, metaDataMap);
    }

    public findTopProductBySellId_args() {
    }

    public findTopProductBySellId_args(
      long sellerId,
      int dayNum,
      int pageNo,
      int pageSize)
    {
      this();
      this.sellerId = sellerId;
      setSellerIdIsSet(true);
      this.dayNum = dayNum;
      setDayNumIsSet(true);
      this.pageNo = pageNo;
      setPageNoIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findTopProductBySellId_args(findTopProductBySellId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.sellerId = other.sellerId;
      this.dayNum = other.dayNum;
      this.pageNo = other.pageNo;
      this.pageSize = other.pageSize;
    }

    public findTopProductBySellId_args deepCopy() {
      return new findTopProductBySellId_args(this);
    }

    @Override
    public void clear() {
      setSellerIdIsSet(false);
      this.sellerId = 0;
      setDayNumIsSet(false);
      this.dayNum = 0;
      setPageNoIsSet(false);
      this.pageNo = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public long getSellerId() {
      return this.sellerId;
    }

    public findTopProductBySellId_args setSellerId(long sellerId) {
      this.sellerId = sellerId;
      setSellerIdIsSet(true);
      return this;
    }

    public void unsetSellerId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SELLERID_ISSET_ID);
    }

    /** Returns true if field sellerId is set (has been assigned a value) and false otherwise */
    public boolean isSetSellerId() {
      return EncodingUtils.testBit(__isset_bitfield, __SELLERID_ISSET_ID);
    }

    public void setSellerIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SELLERID_ISSET_ID, value);
    }

    public int getDayNum() {
      return this.dayNum;
    }

    public findTopProductBySellId_args setDayNum(int dayNum) {
      this.dayNum = dayNum;
      setDayNumIsSet(true);
      return this;
    }

    public void unsetDayNum() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DAYNUM_ISSET_ID);
    }

    /** Returns true if field dayNum is set (has been assigned a value) and false otherwise */
    public boolean isSetDayNum() {
      return EncodingUtils.testBit(__isset_bitfield, __DAYNUM_ISSET_ID);
    }

    public void setDayNumIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DAYNUM_ISSET_ID, value);
    }

    public int getPageNo() {
      return this.pageNo;
    }

    public findTopProductBySellId_args setPageNo(int pageNo) {
      this.pageNo = pageNo;
      setPageNoIsSet(true);
      return this;
    }

    public void unsetPageNo() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENO_ISSET_ID);
    }

    /** Returns true if field pageNo is set (has been assigned a value) and false otherwise */
    public boolean isSetPageNo() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGENO_ISSET_ID);
    }

    public void setPageNoIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENO_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public findTopProductBySellId_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SELLER_ID:
        if (value == null) {
          unsetSellerId();
        } else {
          setSellerId((Long)value);
        }
        break;

      case DAY_NUM:
        if (value == null) {
          unsetDayNum();
        } else {
          setDayNum((Integer)value);
        }
        break;

      case PAGE_NO:
        if (value == null) {
          unsetPageNo();
        } else {
          setPageNo((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SELLER_ID:
        return getSellerId();

      case DAY_NUM:
        return getDayNum();

      case PAGE_NO:
        return getPageNo();

      case PAGE_SIZE:
        return getPageSize();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SELLER_ID:
        return isSetSellerId();
      case DAY_NUM:
        return isSetDayNum();
      case PAGE_NO:
        return isSetPageNo();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findTopProductBySellId_args)
        return this.equals((findTopProductBySellId_args)that);
      return false;
    }

    public boolean equals(findTopProductBySellId_args that) {
      if (that == null)
        return false;

      boolean this_present_sellerId = true;
      boolean that_present_sellerId = true;
      if (this_present_sellerId || that_present_sellerId) {
        if (!(this_present_sellerId && that_present_sellerId))
          return false;
        if (this.sellerId != that.sellerId)
          return false;
      }

      boolean this_present_dayNum = true;
      boolean that_present_dayNum = true;
      if (this_present_dayNum || that_present_dayNum) {
        if (!(this_present_dayNum && that_present_dayNum))
          return false;
        if (this.dayNum != that.dayNum)
          return false;
      }

      boolean this_present_pageNo = true;
      boolean that_present_pageNo = true;
      if (this_present_pageNo || that_present_pageNo) {
        if (!(this_present_pageNo && that_present_pageNo))
          return false;
        if (this.pageNo != that.pageNo)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_sellerId = true;
      list.add(present_sellerId);
      if (present_sellerId)
        list.add(sellerId);

      boolean present_dayNum = true;
      list.add(present_dayNum);
      if (present_dayNum)
        list.add(dayNum);

      boolean present_pageNo = true;
      list.add(present_pageNo);
      if (present_pageNo)
        list.add(pageNo);

      boolean present_pageSize = true;
      list.add(present_pageSize);
      if (present_pageSize)
        list.add(pageSize);

      return list.hashCode();
    }

    @Override
    public int compareTo(findTopProductBySellId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSellerId()).compareTo(other.isSetSellerId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSellerId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sellerId, other.sellerId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDayNum()).compareTo(other.isSetDayNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDayNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dayNum, other.dayNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageNo()).compareTo(other.isSetPageNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNo, other.pageNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findTopProductBySellId_args(");
      boolean first = true;

      sb.append("sellerId:");
      sb.append(this.sellerId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("dayNum:");
      sb.append(this.dayNum);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageNo:");
      sb.append(this.pageNo);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findTopProductBySellId_argsStandardSchemeFactory implements SchemeFactory {
      public findTopProductBySellId_argsStandardScheme getScheme() {
        return new findTopProductBySellId_argsStandardScheme();
      }
    }

    private static class findTopProductBySellId_argsStandardScheme extends StandardScheme<findTopProductBySellId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findTopProductBySellId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SELLER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.sellerId = iprot.readI64();
                struct.setSellerIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DAY_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.dayNum = iprot.readI32();
                struct.setDayNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageNo = iprot.readI32();
                struct.setPageNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findTopProductBySellId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SELLER_ID_FIELD_DESC);
        oprot.writeI64(struct.sellerId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(DAY_NUM_FIELD_DESC);
        oprot.writeI32(struct.dayNum);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_NO_FIELD_DESC);
        oprot.writeI32(struct.pageNo);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findTopProductBySellId_argsTupleSchemeFactory implements SchemeFactory {
      public findTopProductBySellId_argsTupleScheme getScheme() {
        return new findTopProductBySellId_argsTupleScheme();
      }
    }

    private static class findTopProductBySellId_argsTupleScheme extends TupleScheme<findTopProductBySellId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findTopProductBySellId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSellerId()) {
          optionals.set(0);
        }
        if (struct.isSetDayNum()) {
          optionals.set(1);
        }
        if (struct.isSetPageNo()) {
          optionals.set(2);
        }
        if (struct.isSetPageSize()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSellerId()) {
          oprot.writeI64(struct.sellerId);
        }
        if (struct.isSetDayNum()) {
          oprot.writeI32(struct.dayNum);
        }
        if (struct.isSetPageNo()) {
          oprot.writeI32(struct.pageNo);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findTopProductBySellId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.sellerId = iprot.readI64();
          struct.setSellerIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dayNum = iprot.readI32();
          struct.setDayNumIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageNo = iprot.readI32();
          struct.setPageNoIsSet(true);
        }
        if (incoming.get(3)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

  }

  public static class findTopProductBySellId_result implements org.apache.thrift.TBase<findTopProductBySellId_result, findTopProductBySellId_result._Fields>, java.io.Serializable, Cloneable, Comparable<findTopProductBySellId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findTopProductBySellId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findTopProductBySellId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findTopProductBySellId_resultTupleSchemeFactory());
    }

    public com.meila.soa.openapi.thrift.product.model.ThriftPageSimpleProductModel success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.meila.soa.openapi.thrift.product.model.ThriftPageSimpleProductModel.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findTopProductBySellId_result.class, metaDataMap);
    }

    public findTopProductBySellId_result() {
    }

    public findTopProductBySellId_result(
      com.meila.soa.openapi.thrift.product.model.ThriftPageSimpleProductModel success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findTopProductBySellId_result(findTopProductBySellId_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.meila.soa.openapi.thrift.product.model.ThriftPageSimpleProductModel(other.success);
      }
    }

    public findTopProductBySellId_result deepCopy() {
      return new findTopProductBySellId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.meila.soa.openapi.thrift.product.model.ThriftPageSimpleProductModel getSuccess() {
      return this.success;
    }

    public findTopProductBySellId_result setSuccess(com.meila.soa.openapi.thrift.product.model.ThriftPageSimpleProductModel success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.meila.soa.openapi.thrift.product.model.ThriftPageSimpleProductModel)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findTopProductBySellId_result)
        return this.equals((findTopProductBySellId_result)that);
      return false;
    }

    public boolean equals(findTopProductBySellId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findTopProductBySellId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findTopProductBySellId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findTopProductBySellId_resultStandardSchemeFactory implements SchemeFactory {
      public findTopProductBySellId_resultStandardScheme getScheme() {
        return new findTopProductBySellId_resultStandardScheme();
      }
    }

    private static class findTopProductBySellId_resultStandardScheme extends StandardScheme<findTopProductBySellId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findTopProductBySellId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.meila.soa.openapi.thrift.product.model.ThriftPageSimpleProductModel();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findTopProductBySellId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findTopProductBySellId_resultTupleSchemeFactory implements SchemeFactory {
      public findTopProductBySellId_resultTupleScheme getScheme() {
        return new findTopProductBySellId_resultTupleScheme();
      }
    }

    private static class findTopProductBySellId_resultTupleScheme extends TupleScheme<findTopProductBySellId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findTopProductBySellId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findTopProductBySellId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.meila.soa.openapi.thrift.product.model.ThriftPageSimpleProductModel();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findShopBySellerId_args implements org.apache.thrift.TBase<findShopBySellerId_args, findShopBySellerId_args._Fields>, java.io.Serializable, Cloneable, Comparable<findShopBySellerId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findShopBySellerId_args");

    private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findShopBySellerId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findShopBySellerId_argsTupleSchemeFactory());
    }

    public List<Long> ids; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IDS((short)1, "ids");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IDS
            return IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IDS, new org.apache.thrift.meta_data.FieldMetaData("ids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64              , "long"))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findShopBySellerId_args.class, metaDataMap);
    }

    public findShopBySellerId_args() {
    }

    public findShopBySellerId_args(
      List<Long> ids)
    {
      this();
      this.ids = ids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findShopBySellerId_args(findShopBySellerId_args other) {
      if (other.isSetIds()) {
        List<Long> __this__ids = new ArrayList<Long>(other.ids.size());
        for (Long other_element : other.ids) {
          __this__ids.add(other_element);
        }
        this.ids = __this__ids;
      }
    }

    public findShopBySellerId_args deepCopy() {
      return new findShopBySellerId_args(this);
    }

    @Override
    public void clear() {
      this.ids = null;
    }

    public int getIdsSize() {
      return (this.ids == null) ? 0 : this.ids.size();
    }

    public java.util.Iterator<Long> getIdsIterator() {
      return (this.ids == null) ? null : this.ids.iterator();
    }

    public void addToIds(long elem) {
      if (this.ids == null) {
        this.ids = new ArrayList<Long>();
      }
      this.ids.add(elem);
    }

    public List<Long> getIds() {
      return this.ids;
    }

    public findShopBySellerId_args setIds(List<Long> ids) {
      this.ids = ids;
      return this;
    }

    public void unsetIds() {
      this.ids = null;
    }

    /** Returns true if field ids is set (has been assigned a value) and false otherwise */
    public boolean isSetIds() {
      return this.ids != null;
    }

    public void setIdsIsSet(boolean value) {
      if (!value) {
        this.ids = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IDS:
        if (value == null) {
          unsetIds();
        } else {
          setIds((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IDS:
        return getIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IDS:
        return isSetIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findShopBySellerId_args)
        return this.equals((findShopBySellerId_args)that);
      return false;
    }

    public boolean equals(findShopBySellerId_args that) {
      if (that == null)
        return false;

      boolean this_present_ids = true && this.isSetIds();
      boolean that_present_ids = true && that.isSetIds();
      if (this_present_ids || that_present_ids) {
        if (!(this_present_ids && that_present_ids))
          return false;
        if (!this.ids.equals(that.ids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ids = true && (isSetIds());
      list.add(present_ids);
      if (present_ids)
        list.add(ids);

      return list.hashCode();
    }

    @Override
    public int compareTo(findShopBySellerId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIds()).compareTo(other.isSetIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ids, other.ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findShopBySellerId_args(");
      boolean first = true;

      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findShopBySellerId_argsStandardSchemeFactory implements SchemeFactory {
      public findShopBySellerId_argsStandardScheme getScheme() {
        return new findShopBySellerId_argsStandardScheme();
      }
    }

    private static class findShopBySellerId_argsStandardScheme extends StandardScheme<findShopBySellerId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findShopBySellerId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.ids = new ArrayList<Long>(_list48.size);
                  long _elem49;
                  for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                  {
                    _elem49 = iprot.readI64();
                    struct.ids.add(_elem49);
                  }
                  iprot.readListEnd();
                }
                struct.setIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findShopBySellerId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ids != null) {
          oprot.writeFieldBegin(IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.ids.size()));
            for (long _iter51 : struct.ids)
            {
              oprot.writeI64(_iter51);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findShopBySellerId_argsTupleSchemeFactory implements SchemeFactory {
      public findShopBySellerId_argsTupleScheme getScheme() {
        return new findShopBySellerId_argsTupleScheme();
      }
    }

    private static class findShopBySellerId_argsTupleScheme extends TupleScheme<findShopBySellerId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findShopBySellerId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIds()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIds()) {
          {
            oprot.writeI32(struct.ids.size());
            for (long _iter52 : struct.ids)
            {
              oprot.writeI64(_iter52);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findShopBySellerId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.ids = new ArrayList<Long>(_list53.size);
            long _elem54;
            for (int _i55 = 0; _i55 < _list53.size; ++_i55)
            {
              _elem54 = iprot.readI64();
              struct.ids.add(_elem54);
            }
          }
          struct.setIdsIsSet(true);
        }
      }
    }

  }

  public static class findShopBySellerId_result implements org.apache.thrift.TBase<findShopBySellerId_result, findShopBySellerId_result._Fields>, java.io.Serializable, Cloneable, Comparable<findShopBySellerId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findShopBySellerId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findShopBySellerId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findShopBySellerId_resultTupleSchemeFactory());
    }

    public List<com.meila.soa.openapi.thrift.product.model.ThriftShopModel> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.meila.soa.openapi.thrift.product.model.ThriftShopModel.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findShopBySellerId_result.class, metaDataMap);
    }

    public findShopBySellerId_result() {
    }

    public findShopBySellerId_result(
      List<com.meila.soa.openapi.thrift.product.model.ThriftShopModel> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findShopBySellerId_result(findShopBySellerId_result other) {
      if (other.isSetSuccess()) {
        List<com.meila.soa.openapi.thrift.product.model.ThriftShopModel> __this__success = new ArrayList<com.meila.soa.openapi.thrift.product.model.ThriftShopModel>(other.success.size());
        for (com.meila.soa.openapi.thrift.product.model.ThriftShopModel other_element : other.success) {
          __this__success.add(new com.meila.soa.openapi.thrift.product.model.ThriftShopModel(other_element));
        }
        this.success = __this__success;
      }
    }

    public findShopBySellerId_result deepCopy() {
      return new findShopBySellerId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.meila.soa.openapi.thrift.product.model.ThriftShopModel> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.meila.soa.openapi.thrift.product.model.ThriftShopModel elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.meila.soa.openapi.thrift.product.model.ThriftShopModel>();
      }
      this.success.add(elem);
    }

    public List<com.meila.soa.openapi.thrift.product.model.ThriftShopModel> getSuccess() {
      return this.success;
    }

    public findShopBySellerId_result setSuccess(List<com.meila.soa.openapi.thrift.product.model.ThriftShopModel> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.meila.soa.openapi.thrift.product.model.ThriftShopModel>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findShopBySellerId_result)
        return this.equals((findShopBySellerId_result)that);
      return false;
    }

    public boolean equals(findShopBySellerId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findShopBySellerId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findShopBySellerId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findShopBySellerId_resultStandardSchemeFactory implements SchemeFactory {
      public findShopBySellerId_resultStandardScheme getScheme() {
        return new findShopBySellerId_resultStandardScheme();
      }
    }

    private static class findShopBySellerId_resultStandardScheme extends StandardScheme<findShopBySellerId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findShopBySellerId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                  struct.success = new ArrayList<com.meila.soa.openapi.thrift.product.model.ThriftShopModel>(_list56.size);
                  com.meila.soa.openapi.thrift.product.model.ThriftShopModel _elem57;
                  for (int _i58 = 0; _i58 < _list56.size; ++_i58)
                  {
                    _elem57 = new com.meila.soa.openapi.thrift.product.model.ThriftShopModel();
                    _elem57.read(iprot);
                    struct.success.add(_elem57);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findShopBySellerId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.meila.soa.openapi.thrift.product.model.ThriftShopModel _iter59 : struct.success)
            {
              _iter59.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findShopBySellerId_resultTupleSchemeFactory implements SchemeFactory {
      public findShopBySellerId_resultTupleScheme getScheme() {
        return new findShopBySellerId_resultTupleScheme();
      }
    }

    private static class findShopBySellerId_resultTupleScheme extends TupleScheme<findShopBySellerId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findShopBySellerId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.meila.soa.openapi.thrift.product.model.ThriftShopModel _iter60 : struct.success)
            {
              _iter60.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findShopBySellerId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.meila.soa.openapi.thrift.product.model.ThriftShopModel>(_list61.size);
            com.meila.soa.openapi.thrift.product.model.ThriftShopModel _elem62;
            for (int _i63 = 0; _i63 < _list61.size; ++_i63)
            {
              _elem62 = new com.meila.soa.openapi.thrift.product.model.ThriftShopModel();
              _elem62.read(iprot);
              struct.success.add(_elem62);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findPagedShop_args implements org.apache.thrift.TBase<findPagedShop_args, findPagedShop_args._Fields>, java.io.Serializable, Cloneable, Comparable<findPagedShop_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findPagedShop_args");

    private static final org.apache.thrift.protocol.TField PAGE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNo", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findPagedShop_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findPagedShop_argsTupleSchemeFactory());
    }

    public int pageNo; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE_NO((short)1, "pageNo"),
      PAGE_SIZE((short)2, "pageSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE_NO
            return PAGE_NO;
          case 2: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGENO_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE_NO, new org.apache.thrift.meta_data.FieldMetaData("pageNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findPagedShop_args.class, metaDataMap);
    }

    public findPagedShop_args() {
    }

    public findPagedShop_args(
      int pageNo,
      int pageSize)
    {
      this();
      this.pageNo = pageNo;
      setPageNoIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findPagedShop_args(findPagedShop_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.pageNo = other.pageNo;
      this.pageSize = other.pageSize;
    }

    public findPagedShop_args deepCopy() {
      return new findPagedShop_args(this);
    }

    @Override
    public void clear() {
      setPageNoIsSet(false);
      this.pageNo = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public int getPageNo() {
      return this.pageNo;
    }

    public findPagedShop_args setPageNo(int pageNo) {
      this.pageNo = pageNo;
      setPageNoIsSet(true);
      return this;
    }

    public void unsetPageNo() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENO_ISSET_ID);
    }

    /** Returns true if field pageNo is set (has been assigned a value) and false otherwise */
    public boolean isSetPageNo() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGENO_ISSET_ID);
    }

    public void setPageNoIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENO_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public findPagedShop_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE_NO:
        if (value == null) {
          unsetPageNo();
        } else {
          setPageNo((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE_NO:
        return getPageNo();

      case PAGE_SIZE:
        return getPageSize();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE_NO:
        return isSetPageNo();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findPagedShop_args)
        return this.equals((findPagedShop_args)that);
      return false;
    }

    public boolean equals(findPagedShop_args that) {
      if (that == null)
        return false;

      boolean this_present_pageNo = true;
      boolean that_present_pageNo = true;
      if (this_present_pageNo || that_present_pageNo) {
        if (!(this_present_pageNo && that_present_pageNo))
          return false;
        if (this.pageNo != that.pageNo)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pageNo = true;
      list.add(present_pageNo);
      if (present_pageNo)
        list.add(pageNo);

      boolean present_pageSize = true;
      list.add(present_pageSize);
      if (present_pageSize)
        list.add(pageSize);

      return list.hashCode();
    }

    @Override
    public int compareTo(findPagedShop_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPageNo()).compareTo(other.isSetPageNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNo, other.pageNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findPagedShop_args(");
      boolean first = true;

      sb.append("pageNo:");
      sb.append(this.pageNo);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findPagedShop_argsStandardSchemeFactory implements SchemeFactory {
      public findPagedShop_argsStandardScheme getScheme() {
        return new findPagedShop_argsStandardScheme();
      }
    }

    private static class findPagedShop_argsStandardScheme extends StandardScheme<findPagedShop_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findPagedShop_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageNo = iprot.readI32();
                struct.setPageNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findPagedShop_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PAGE_NO_FIELD_DESC);
        oprot.writeI32(struct.pageNo);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findPagedShop_argsTupleSchemeFactory implements SchemeFactory {
      public findPagedShop_argsTupleScheme getScheme() {
        return new findPagedShop_argsTupleScheme();
      }
    }

    private static class findPagedShop_argsTupleScheme extends TupleScheme<findPagedShop_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findPagedShop_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPageNo()) {
          optionals.set(0);
        }
        if (struct.isSetPageSize()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPageNo()) {
          oprot.writeI32(struct.pageNo);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findPagedShop_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pageNo = iprot.readI32();
          struct.setPageNoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

  }

  public static class findPagedShop_result implements org.apache.thrift.TBase<findPagedShop_result, findPagedShop_result._Fields>, java.io.Serializable, Cloneable, Comparable<findPagedShop_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findPagedShop_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findPagedShop_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findPagedShop_resultTupleSchemeFactory());
    }

    public com.meila.soa.openapi.thrift.product.model.ThriftPageShopModel success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.meila.soa.openapi.thrift.product.model.ThriftPageShopModel.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findPagedShop_result.class, metaDataMap);
    }

    public findPagedShop_result() {
    }

    public findPagedShop_result(
      com.meila.soa.openapi.thrift.product.model.ThriftPageShopModel success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findPagedShop_result(findPagedShop_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.meila.soa.openapi.thrift.product.model.ThriftPageShopModel(other.success);
      }
    }

    public findPagedShop_result deepCopy() {
      return new findPagedShop_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.meila.soa.openapi.thrift.product.model.ThriftPageShopModel getSuccess() {
      return this.success;
    }

    public findPagedShop_result setSuccess(com.meila.soa.openapi.thrift.product.model.ThriftPageShopModel success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.meila.soa.openapi.thrift.product.model.ThriftPageShopModel)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findPagedShop_result)
        return this.equals((findPagedShop_result)that);
      return false;
    }

    public boolean equals(findPagedShop_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findPagedShop_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findPagedShop_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findPagedShop_resultStandardSchemeFactory implements SchemeFactory {
      public findPagedShop_resultStandardScheme getScheme() {
        return new findPagedShop_resultStandardScheme();
      }
    }

    private static class findPagedShop_resultStandardScheme extends StandardScheme<findPagedShop_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findPagedShop_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.meila.soa.openapi.thrift.product.model.ThriftPageShopModel();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findPagedShop_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findPagedShop_resultTupleSchemeFactory implements SchemeFactory {
      public findPagedShop_resultTupleScheme getScheme() {
        return new findPagedShop_resultTupleScheme();
      }
    }

    private static class findPagedShop_resultTupleScheme extends TupleScheme<findPagedShop_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findPagedShop_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findPagedShop_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.meila.soa.openapi.thrift.product.model.ThriftPageShopModel();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findPagedProduct_args implements org.apache.thrift.TBase<findPagedProduct_args, findPagedProduct_args._Fields>, java.io.Serializable, Cloneable, Comparable<findPagedProduct_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findPagedProduct_args");

    private static final org.apache.thrift.protocol.TField PAGE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNo", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findPagedProduct_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findPagedProduct_argsTupleSchemeFactory());
    }

    public int pageNo; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE_NO((short)1, "pageNo"),
      PAGE_SIZE((short)2, "pageSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE_NO
            return PAGE_NO;
          case 2: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGENO_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE_NO, new org.apache.thrift.meta_data.FieldMetaData("pageNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findPagedProduct_args.class, metaDataMap);
    }

    public findPagedProduct_args() {
    }

    public findPagedProduct_args(
      int pageNo,
      int pageSize)
    {
      this();
      this.pageNo = pageNo;
      setPageNoIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findPagedProduct_args(findPagedProduct_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.pageNo = other.pageNo;
      this.pageSize = other.pageSize;
    }

    public findPagedProduct_args deepCopy() {
      return new findPagedProduct_args(this);
    }

    @Override
    public void clear() {
      setPageNoIsSet(false);
      this.pageNo = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public int getPageNo() {
      return this.pageNo;
    }

    public findPagedProduct_args setPageNo(int pageNo) {
      this.pageNo = pageNo;
      setPageNoIsSet(true);
      return this;
    }

    public void unsetPageNo() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENO_ISSET_ID);
    }

    /** Returns true if field pageNo is set (has been assigned a value) and false otherwise */
    public boolean isSetPageNo() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGENO_ISSET_ID);
    }

    public void setPageNoIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENO_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public findPagedProduct_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE_NO:
        if (value == null) {
          unsetPageNo();
        } else {
          setPageNo((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE_NO:
        return getPageNo();

      case PAGE_SIZE:
        return getPageSize();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE_NO:
        return isSetPageNo();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findPagedProduct_args)
        return this.equals((findPagedProduct_args)that);
      return false;
    }

    public boolean equals(findPagedProduct_args that) {
      if (that == null)
        return false;

      boolean this_present_pageNo = true;
      boolean that_present_pageNo = true;
      if (this_present_pageNo || that_present_pageNo) {
        if (!(this_present_pageNo && that_present_pageNo))
          return false;
        if (this.pageNo != that.pageNo)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pageNo = true;
      list.add(present_pageNo);
      if (present_pageNo)
        list.add(pageNo);

      boolean present_pageSize = true;
      list.add(present_pageSize);
      if (present_pageSize)
        list.add(pageSize);

      return list.hashCode();
    }

    @Override
    public int compareTo(findPagedProduct_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPageNo()).compareTo(other.isSetPageNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNo, other.pageNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findPagedProduct_args(");
      boolean first = true;

      sb.append("pageNo:");
      sb.append(this.pageNo);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findPagedProduct_argsStandardSchemeFactory implements SchemeFactory {
      public findPagedProduct_argsStandardScheme getScheme() {
        return new findPagedProduct_argsStandardScheme();
      }
    }

    private static class findPagedProduct_argsStandardScheme extends StandardScheme<findPagedProduct_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findPagedProduct_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageNo = iprot.readI32();
                struct.setPageNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findPagedProduct_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PAGE_NO_FIELD_DESC);
        oprot.writeI32(struct.pageNo);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findPagedProduct_argsTupleSchemeFactory implements SchemeFactory {
      public findPagedProduct_argsTupleScheme getScheme() {
        return new findPagedProduct_argsTupleScheme();
      }
    }

    private static class findPagedProduct_argsTupleScheme extends TupleScheme<findPagedProduct_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findPagedProduct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPageNo()) {
          optionals.set(0);
        }
        if (struct.isSetPageSize()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPageNo()) {
          oprot.writeI32(struct.pageNo);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findPagedProduct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pageNo = iprot.readI32();
          struct.setPageNoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

  }

  public static class findPagedProduct_result implements org.apache.thrift.TBase<findPagedProduct_result, findPagedProduct_result._Fields>, java.io.Serializable, Cloneable, Comparable<findPagedProduct_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findPagedProduct_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findPagedProduct_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findPagedProduct_resultTupleSchemeFactory());
    }

    public com.meila.soa.openapi.thrift.product.model.ThriftPageSimpleProductModel success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.meila.soa.openapi.thrift.product.model.ThriftPageSimpleProductModel.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findPagedProduct_result.class, metaDataMap);
    }

    public findPagedProduct_result() {
    }

    public findPagedProduct_result(
      com.meila.soa.openapi.thrift.product.model.ThriftPageSimpleProductModel success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findPagedProduct_result(findPagedProduct_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.meila.soa.openapi.thrift.product.model.ThriftPageSimpleProductModel(other.success);
      }
    }

    public findPagedProduct_result deepCopy() {
      return new findPagedProduct_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.meila.soa.openapi.thrift.product.model.ThriftPageSimpleProductModel getSuccess() {
      return this.success;
    }

    public findPagedProduct_result setSuccess(com.meila.soa.openapi.thrift.product.model.ThriftPageSimpleProductModel success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.meila.soa.openapi.thrift.product.model.ThriftPageSimpleProductModel)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findPagedProduct_result)
        return this.equals((findPagedProduct_result)that);
      return false;
    }

    public boolean equals(findPagedProduct_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findPagedProduct_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findPagedProduct_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findPagedProduct_resultStandardSchemeFactory implements SchemeFactory {
      public findPagedProduct_resultStandardScheme getScheme() {
        return new findPagedProduct_resultStandardScheme();
      }
    }

    private static class findPagedProduct_resultStandardScheme extends StandardScheme<findPagedProduct_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findPagedProduct_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.meila.soa.openapi.thrift.product.model.ThriftPageSimpleProductModel();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findPagedProduct_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findPagedProduct_resultTupleSchemeFactory implements SchemeFactory {
      public findPagedProduct_resultTupleScheme getScheme() {
        return new findPagedProduct_resultTupleScheme();
      }
    }

    private static class findPagedProduct_resultTupleScheme extends TupleScheme<findPagedProduct_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findPagedProduct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findPagedProduct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.meila.soa.openapi.thrift.product.model.ThriftPageSimpleProductModel();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
