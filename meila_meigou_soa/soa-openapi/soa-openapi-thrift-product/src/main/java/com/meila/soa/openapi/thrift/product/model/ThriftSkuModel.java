/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.meila.soa.openapi.thrift.product.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-05-25")
public class ThriftSkuModel implements org.apache.thrift.TBase<ThriftSkuModel, ThriftSkuModel._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftSkuModel> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftSkuModel");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MARKET_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("marketPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("price", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("amount", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("order", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField SALED_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("saledNum", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField DISPLAY_FIELD_DESC = new org.apache.thrift.protocol.TField("display", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField SPEC_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("specMap", org.apache.thrift.protocol.TType.MAP, (short)12);
  private static final org.apache.thrift.protocol.TField IMG_FIELD_DESC = new org.apache.thrift.protocol.TField("img", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField IMG_WIDTH_FIELD_DESC = new org.apache.thrift.protocol.TField("imgWidth", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField IMG_HEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("imgHeight", org.apache.thrift.protocol.TType.I32, (short)15);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ThriftSkuModelStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ThriftSkuModelTupleSchemeFactory());
  }

  public long id; // required
  public long productId; // required
  public String description; // optional
  public double marketPrice; // optional
  public double price; // optional
  public int amount; // optional
  public int order; // optional
  public int saledNum; // optional
  public String code; // required
  public String type; // optional
  public String display; // optional
  public Map<String,String> specMap; // optional
  public String img; // optional
  public int imgWidth; // optional
  public int imgHeight; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    PRODUCT_ID((short)2, "productId"),
    DESCRIPTION((short)3, "description"),
    MARKET_PRICE((short)4, "marketPrice"),
    PRICE((short)5, "price"),
    AMOUNT((short)6, "amount"),
    ORDER((short)7, "order"),
    SALED_NUM((short)8, "saledNum"),
    CODE((short)9, "code"),
    TYPE((short)10, "type"),
    DISPLAY((short)11, "display"),
    SPEC_MAP((short)12, "specMap"),
    IMG((short)13, "img"),
    IMG_WIDTH((short)14, "imgWidth"),
    IMG_HEIGHT((short)15, "imgHeight");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // PRODUCT_ID
          return PRODUCT_ID;
        case 3: // DESCRIPTION
          return DESCRIPTION;
        case 4: // MARKET_PRICE
          return MARKET_PRICE;
        case 5: // PRICE
          return PRICE;
        case 6: // AMOUNT
          return AMOUNT;
        case 7: // ORDER
          return ORDER;
        case 8: // SALED_NUM
          return SALED_NUM;
        case 9: // CODE
          return CODE;
        case 10: // TYPE
          return TYPE;
        case 11: // DISPLAY
          return DISPLAY;
        case 12: // SPEC_MAP
          return SPEC_MAP;
        case 13: // IMG
          return IMG;
        case 14: // IMG_WIDTH
          return IMG_WIDTH;
        case 15: // IMG_HEIGHT
          return IMG_HEIGHT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __PRODUCTID_ISSET_ID = 1;
  private static final int __MARKETPRICE_ISSET_ID = 2;
  private static final int __PRICE_ISSET_ID = 3;
  private static final int __AMOUNT_ISSET_ID = 4;
  private static final int __ORDER_ISSET_ID = 5;
  private static final int __SALEDNUM_ISSET_ID = 6;
  private static final int __IMGWIDTH_ISSET_ID = 7;
  private static final int __IMGHEIGHT_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DESCRIPTION,_Fields.MARKET_PRICE,_Fields.PRICE,_Fields.AMOUNT,_Fields.ORDER,_Fields.SALED_NUM,_Fields.TYPE,_Fields.DISPLAY,_Fields.SPEC_MAP,_Fields.IMG,_Fields.IMG_WIDTH,_Fields.IMG_HEIGHT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "long")));
    tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "long")));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MARKET_PRICE, new org.apache.thrift.meta_data.FieldMetaData("marketPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRICE, new org.apache.thrift.meta_data.FieldMetaData("price", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("amount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.ORDER, new org.apache.thrift.meta_data.FieldMetaData("order", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.SALED_NUM, new org.apache.thrift.meta_data.FieldMetaData("saledNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISPLAY, new org.apache.thrift.meta_data.FieldMetaData("display", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SPEC_MAP, new org.apache.thrift.meta_data.FieldMetaData("specMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.IMG, new org.apache.thrift.meta_data.FieldMetaData("img", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMG_WIDTH, new org.apache.thrift.meta_data.FieldMetaData("imgWidth", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.IMG_HEIGHT, new org.apache.thrift.meta_data.FieldMetaData("imgHeight", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftSkuModel.class, metaDataMap);
  }

  public ThriftSkuModel() {
  }

  public ThriftSkuModel(
    long id,
    long productId,
    String code)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.productId = productId;
    setProductIdIsSet(true);
    this.code = code;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftSkuModel(ThriftSkuModel other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.productId = other.productId;
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    this.marketPrice = other.marketPrice;
    this.price = other.price;
    this.amount = other.amount;
    this.order = other.order;
    this.saledNum = other.saledNum;
    if (other.isSetCode()) {
      this.code = other.code;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetDisplay()) {
      this.display = other.display;
    }
    if (other.isSetSpecMap()) {
      Map<String,String> __this__specMap = new HashMap<String,String>(other.specMap);
      this.specMap = __this__specMap;
    }
    if (other.isSetImg()) {
      this.img = other.img;
    }
    this.imgWidth = other.imgWidth;
    this.imgHeight = other.imgHeight;
  }

  public ThriftSkuModel deepCopy() {
    return new ThriftSkuModel(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setProductIdIsSet(false);
    this.productId = 0;
    this.description = null;
    setMarketPriceIsSet(false);
    this.marketPrice = 0.0;
    setPriceIsSet(false);
    this.price = 0.0;
    setAmountIsSet(false);
    this.amount = 0;
    setOrderIsSet(false);
    this.order = 0;
    setSaledNumIsSet(false);
    this.saledNum = 0;
    this.code = null;
    this.type = null;
    this.display = null;
    this.specMap = null;
    this.img = null;
    setImgWidthIsSet(false);
    this.imgWidth = 0;
    setImgHeightIsSet(false);
    this.imgHeight = 0;
  }

  public long getId() {
    return this.id;
  }

  public ThriftSkuModel setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public long getProductId() {
    return this.productId;
  }

  public ThriftSkuModel setProductId(long productId) {
    this.productId = productId;
    setProductIdIsSet(true);
    return this;
  }

  public void unsetProductId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRODUCTID_ISSET_ID);
  }

  /** Returns true if field productId is set (has been assigned a value) and false otherwise */
  public boolean isSetProductId() {
    return EncodingUtils.testBit(__isset_bitfield, __PRODUCTID_ISSET_ID);
  }

  public void setProductIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRODUCTID_ISSET_ID, value);
  }

  public String getDescription() {
    return this.description;
  }

  public ThriftSkuModel setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public double getMarketPrice() {
    return this.marketPrice;
  }

  public ThriftSkuModel setMarketPrice(double marketPrice) {
    this.marketPrice = marketPrice;
    setMarketPriceIsSet(true);
    return this;
  }

  public void unsetMarketPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MARKETPRICE_ISSET_ID);
  }

  /** Returns true if field marketPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetMarketPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __MARKETPRICE_ISSET_ID);
  }

  public void setMarketPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MARKETPRICE_ISSET_ID, value);
  }

  public double getPrice() {
    return this.price;
  }

  public ThriftSkuModel setPrice(double price) {
    this.price = price;
    setPriceIsSet(true);
    return this;
  }

  public void unsetPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  /** Returns true if field price is set (has been assigned a value) and false otherwise */
  public boolean isSetPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  public void setPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRICE_ISSET_ID, value);
  }

  public int getAmount() {
    return this.amount;
  }

  public ThriftSkuModel setAmount(int amount) {
    this.amount = amount;
    setAmountIsSet(true);
    return this;
  }

  public void unsetAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AMOUNT_ISSET_ID);
  }

  /** Returns true if field amount is set (has been assigned a value) and false otherwise */
  public boolean isSetAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __AMOUNT_ISSET_ID);
  }

  public void setAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AMOUNT_ISSET_ID, value);
  }

  public int getOrder() {
    return this.order;
  }

  public ThriftSkuModel setOrder(int order) {
    this.order = order;
    setOrderIsSet(true);
    return this;
  }

  public void unsetOrder() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDER_ISSET_ID);
  }

  /** Returns true if field order is set (has been assigned a value) and false otherwise */
  public boolean isSetOrder() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDER_ISSET_ID);
  }

  public void setOrderIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDER_ISSET_ID, value);
  }

  public int getSaledNum() {
    return this.saledNum;
  }

  public ThriftSkuModel setSaledNum(int saledNum) {
    this.saledNum = saledNum;
    setSaledNumIsSet(true);
    return this;
  }

  public void unsetSaledNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SALEDNUM_ISSET_ID);
  }

  /** Returns true if field saledNum is set (has been assigned a value) and false otherwise */
  public boolean isSetSaledNum() {
    return EncodingUtils.testBit(__isset_bitfield, __SALEDNUM_ISSET_ID);
  }

  public void setSaledNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SALEDNUM_ISSET_ID, value);
  }

  public String getCode() {
    return this.code;
  }

  public ThriftSkuModel setCode(String code) {
    this.code = code;
    return this;
  }

  public void unsetCode() {
    this.code = null;
  }

  /** Returns true if field code is set (has been assigned a value) and false otherwise */
  public boolean isSetCode() {
    return this.code != null;
  }

  public void setCodeIsSet(boolean value) {
    if (!value) {
      this.code = null;
    }
  }

  public String getType() {
    return this.type;
  }

  public ThriftSkuModel setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public String getDisplay() {
    return this.display;
  }

  public ThriftSkuModel setDisplay(String display) {
    this.display = display;
    return this;
  }

  public void unsetDisplay() {
    this.display = null;
  }

  /** Returns true if field display is set (has been assigned a value) and false otherwise */
  public boolean isSetDisplay() {
    return this.display != null;
  }

  public void setDisplayIsSet(boolean value) {
    if (!value) {
      this.display = null;
    }
  }

  public int getSpecMapSize() {
    return (this.specMap == null) ? 0 : this.specMap.size();
  }

  public void putToSpecMap(String key, String val) {
    if (this.specMap == null) {
      this.specMap = new HashMap<String,String>();
    }
    this.specMap.put(key, val);
  }

  public Map<String,String> getSpecMap() {
    return this.specMap;
  }

  public ThriftSkuModel setSpecMap(Map<String,String> specMap) {
    this.specMap = specMap;
    return this;
  }

  public void unsetSpecMap() {
    this.specMap = null;
  }

  /** Returns true if field specMap is set (has been assigned a value) and false otherwise */
  public boolean isSetSpecMap() {
    return this.specMap != null;
  }

  public void setSpecMapIsSet(boolean value) {
    if (!value) {
      this.specMap = null;
    }
  }

  public String getImg() {
    return this.img;
  }

  public ThriftSkuModel setImg(String img) {
    this.img = img;
    return this;
  }

  public void unsetImg() {
    this.img = null;
  }

  /** Returns true if field img is set (has been assigned a value) and false otherwise */
  public boolean isSetImg() {
    return this.img != null;
  }

  public void setImgIsSet(boolean value) {
    if (!value) {
      this.img = null;
    }
  }

  public int getImgWidth() {
    return this.imgWidth;
  }

  public ThriftSkuModel setImgWidth(int imgWidth) {
    this.imgWidth = imgWidth;
    setImgWidthIsSet(true);
    return this;
  }

  public void unsetImgWidth() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IMGWIDTH_ISSET_ID);
  }

  /** Returns true if field imgWidth is set (has been assigned a value) and false otherwise */
  public boolean isSetImgWidth() {
    return EncodingUtils.testBit(__isset_bitfield, __IMGWIDTH_ISSET_ID);
  }

  public void setImgWidthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IMGWIDTH_ISSET_ID, value);
  }

  public int getImgHeight() {
    return this.imgHeight;
  }

  public ThriftSkuModel setImgHeight(int imgHeight) {
    this.imgHeight = imgHeight;
    setImgHeightIsSet(true);
    return this;
  }

  public void unsetImgHeight() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IMGHEIGHT_ISSET_ID);
  }

  /** Returns true if field imgHeight is set (has been assigned a value) and false otherwise */
  public boolean isSetImgHeight() {
    return EncodingUtils.testBit(__isset_bitfield, __IMGHEIGHT_ISSET_ID);
  }

  public void setImgHeightIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IMGHEIGHT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case PRODUCT_ID:
      if (value == null) {
        unsetProductId();
      } else {
        setProductId((Long)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case MARKET_PRICE:
      if (value == null) {
        unsetMarketPrice();
      } else {
        setMarketPrice((Double)value);
      }
      break;

    case PRICE:
      if (value == null) {
        unsetPrice();
      } else {
        setPrice((Double)value);
      }
      break;

    case AMOUNT:
      if (value == null) {
        unsetAmount();
      } else {
        setAmount((Integer)value);
      }
      break;

    case ORDER:
      if (value == null) {
        unsetOrder();
      } else {
        setOrder((Integer)value);
      }
      break;

    case SALED_NUM:
      if (value == null) {
        unsetSaledNum();
      } else {
        setSaledNum((Integer)value);
      }
      break;

    case CODE:
      if (value == null) {
        unsetCode();
      } else {
        setCode((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case DISPLAY:
      if (value == null) {
        unsetDisplay();
      } else {
        setDisplay((String)value);
      }
      break;

    case SPEC_MAP:
      if (value == null) {
        unsetSpecMap();
      } else {
        setSpecMap((Map<String,String>)value);
      }
      break;

    case IMG:
      if (value == null) {
        unsetImg();
      } else {
        setImg((String)value);
      }
      break;

    case IMG_WIDTH:
      if (value == null) {
        unsetImgWidth();
      } else {
        setImgWidth((Integer)value);
      }
      break;

    case IMG_HEIGHT:
      if (value == null) {
        unsetImgHeight();
      } else {
        setImgHeight((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case PRODUCT_ID:
      return getProductId();

    case DESCRIPTION:
      return getDescription();

    case MARKET_PRICE:
      return getMarketPrice();

    case PRICE:
      return getPrice();

    case AMOUNT:
      return getAmount();

    case ORDER:
      return getOrder();

    case SALED_NUM:
      return getSaledNum();

    case CODE:
      return getCode();

    case TYPE:
      return getType();

    case DISPLAY:
      return getDisplay();

    case SPEC_MAP:
      return getSpecMap();

    case IMG:
      return getImg();

    case IMG_WIDTH:
      return getImgWidth();

    case IMG_HEIGHT:
      return getImgHeight();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case PRODUCT_ID:
      return isSetProductId();
    case DESCRIPTION:
      return isSetDescription();
    case MARKET_PRICE:
      return isSetMarketPrice();
    case PRICE:
      return isSetPrice();
    case AMOUNT:
      return isSetAmount();
    case ORDER:
      return isSetOrder();
    case SALED_NUM:
      return isSetSaledNum();
    case CODE:
      return isSetCode();
    case TYPE:
      return isSetType();
    case DISPLAY:
      return isSetDisplay();
    case SPEC_MAP:
      return isSetSpecMap();
    case IMG:
      return isSetImg();
    case IMG_WIDTH:
      return isSetImgWidth();
    case IMG_HEIGHT:
      return isSetImgHeight();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftSkuModel)
      return this.equals((ThriftSkuModel)that);
    return false;
  }

  public boolean equals(ThriftSkuModel that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_productId = true;
    boolean that_present_productId = true;
    if (this_present_productId || that_present_productId) {
      if (!(this_present_productId && that_present_productId))
        return false;
      if (this.productId != that.productId)
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_marketPrice = true && this.isSetMarketPrice();
    boolean that_present_marketPrice = true && that.isSetMarketPrice();
    if (this_present_marketPrice || that_present_marketPrice) {
      if (!(this_present_marketPrice && that_present_marketPrice))
        return false;
      if (this.marketPrice != that.marketPrice)
        return false;
    }

    boolean this_present_price = true && this.isSetPrice();
    boolean that_present_price = true && that.isSetPrice();
    if (this_present_price || that_present_price) {
      if (!(this_present_price && that_present_price))
        return false;
      if (this.price != that.price)
        return false;
    }

    boolean this_present_amount = true && this.isSetAmount();
    boolean that_present_amount = true && that.isSetAmount();
    if (this_present_amount || that_present_amount) {
      if (!(this_present_amount && that_present_amount))
        return false;
      if (this.amount != that.amount)
        return false;
    }

    boolean this_present_order = true && this.isSetOrder();
    boolean that_present_order = true && that.isSetOrder();
    if (this_present_order || that_present_order) {
      if (!(this_present_order && that_present_order))
        return false;
      if (this.order != that.order)
        return false;
    }

    boolean this_present_saledNum = true && this.isSetSaledNum();
    boolean that_present_saledNum = true && that.isSetSaledNum();
    if (this_present_saledNum || that_present_saledNum) {
      if (!(this_present_saledNum && that_present_saledNum))
        return false;
      if (this.saledNum != that.saledNum)
        return false;
    }

    boolean this_present_code = true && this.isSetCode();
    boolean that_present_code = true && that.isSetCode();
    if (this_present_code || that_present_code) {
      if (!(this_present_code && that_present_code))
        return false;
      if (!this.code.equals(that.code))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_display = true && this.isSetDisplay();
    boolean that_present_display = true && that.isSetDisplay();
    if (this_present_display || that_present_display) {
      if (!(this_present_display && that_present_display))
        return false;
      if (!this.display.equals(that.display))
        return false;
    }

    boolean this_present_specMap = true && this.isSetSpecMap();
    boolean that_present_specMap = true && that.isSetSpecMap();
    if (this_present_specMap || that_present_specMap) {
      if (!(this_present_specMap && that_present_specMap))
        return false;
      if (!this.specMap.equals(that.specMap))
        return false;
    }

    boolean this_present_img = true && this.isSetImg();
    boolean that_present_img = true && that.isSetImg();
    if (this_present_img || that_present_img) {
      if (!(this_present_img && that_present_img))
        return false;
      if (!this.img.equals(that.img))
        return false;
    }

    boolean this_present_imgWidth = true && this.isSetImgWidth();
    boolean that_present_imgWidth = true && that.isSetImgWidth();
    if (this_present_imgWidth || that_present_imgWidth) {
      if (!(this_present_imgWidth && that_present_imgWidth))
        return false;
      if (this.imgWidth != that.imgWidth)
        return false;
    }

    boolean this_present_imgHeight = true && this.isSetImgHeight();
    boolean that_present_imgHeight = true && that.isSetImgHeight();
    if (this_present_imgHeight || that_present_imgHeight) {
      if (!(this_present_imgHeight && that_present_imgHeight))
        return false;
      if (this.imgHeight != that.imgHeight)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_productId = true;
    list.add(present_productId);
    if (present_productId)
      list.add(productId);

    boolean present_description = true && (isSetDescription());
    list.add(present_description);
    if (present_description)
      list.add(description);

    boolean present_marketPrice = true && (isSetMarketPrice());
    list.add(present_marketPrice);
    if (present_marketPrice)
      list.add(marketPrice);

    boolean present_price = true && (isSetPrice());
    list.add(present_price);
    if (present_price)
      list.add(price);

    boolean present_amount = true && (isSetAmount());
    list.add(present_amount);
    if (present_amount)
      list.add(amount);

    boolean present_order = true && (isSetOrder());
    list.add(present_order);
    if (present_order)
      list.add(order);

    boolean present_saledNum = true && (isSetSaledNum());
    list.add(present_saledNum);
    if (present_saledNum)
      list.add(saledNum);

    boolean present_code = true && (isSetCode());
    list.add(present_code);
    if (present_code)
      list.add(code);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_display = true && (isSetDisplay());
    list.add(present_display);
    if (present_display)
      list.add(display);

    boolean present_specMap = true && (isSetSpecMap());
    list.add(present_specMap);
    if (present_specMap)
      list.add(specMap);

    boolean present_img = true && (isSetImg());
    list.add(present_img);
    if (present_img)
      list.add(img);

    boolean present_imgWidth = true && (isSetImgWidth());
    list.add(present_imgWidth);
    if (present_imgWidth)
      list.add(imgWidth);

    boolean present_imgHeight = true && (isSetImgHeight());
    list.add(present_imgHeight);
    if (present_imgHeight)
      list.add(imgHeight);

    return list.hashCode();
  }

  @Override
  public int compareTo(ThriftSkuModel other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMarketPrice()).compareTo(other.isSetMarketPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMarketPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.marketPrice, other.marketPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrice()).compareTo(other.isSetPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.price, other.price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAmount()).compareTo(other.isSetAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amount, other.amount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrder()).compareTo(other.isSetOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.order, other.order);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSaledNum()).compareTo(other.isSetSaledNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSaledNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.saledNum, other.saledNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCode()).compareTo(other.isSetCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisplay()).compareTo(other.isSetDisplay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisplay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.display, other.display);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpecMap()).compareTo(other.isSetSpecMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpecMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specMap, other.specMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImg()).compareTo(other.isSetImg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.img, other.img);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImgWidth()).compareTo(other.isSetImgWidth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImgWidth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imgWidth, other.imgWidth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImgHeight()).compareTo(other.isSetImgHeight());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImgHeight()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imgHeight, other.imgHeight);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThriftSkuModel(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("productId:");
    sb.append(this.productId);
    first = false;
    if (isSetDescription()) {
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
    }
    if (isSetMarketPrice()) {
      if (!first) sb.append(", ");
      sb.append("marketPrice:");
      sb.append(this.marketPrice);
      first = false;
    }
    if (isSetPrice()) {
      if (!first) sb.append(", ");
      sb.append("price:");
      sb.append(this.price);
      first = false;
    }
    if (isSetAmount()) {
      if (!first) sb.append(", ");
      sb.append("amount:");
      sb.append(this.amount);
      first = false;
    }
    if (isSetOrder()) {
      if (!first) sb.append(", ");
      sb.append("order:");
      sb.append(this.order);
      first = false;
    }
    if (isSetSaledNum()) {
      if (!first) sb.append(", ");
      sb.append("saledNum:");
      sb.append(this.saledNum);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("code:");
    if (this.code == null) {
      sb.append("null");
    } else {
      sb.append(this.code);
    }
    first = false;
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (isSetDisplay()) {
      if (!first) sb.append(", ");
      sb.append("display:");
      if (this.display == null) {
        sb.append("null");
      } else {
        sb.append(this.display);
      }
      first = false;
    }
    if (isSetSpecMap()) {
      if (!first) sb.append(", ");
      sb.append("specMap:");
      if (this.specMap == null) {
        sb.append("null");
      } else {
        sb.append(this.specMap);
      }
      first = false;
    }
    if (isSetImg()) {
      if (!first) sb.append(", ");
      sb.append("img:");
      if (this.img == null) {
        sb.append("null");
      } else {
        sb.append(this.img);
      }
      first = false;
    }
    if (isSetImgWidth()) {
      if (!first) sb.append(", ");
      sb.append("imgWidth:");
      sb.append(this.imgWidth);
      first = false;
    }
    if (isSetImgHeight()) {
      if (!first) sb.append(", ");
      sb.append("imgHeight:");
      sb.append(this.imgHeight);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'id' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'productId' because it's a primitive and you chose the non-beans generator.
    if (code == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'code' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftSkuModelStandardSchemeFactory implements SchemeFactory {
    public ThriftSkuModelStandardScheme getScheme() {
      return new ThriftSkuModelStandardScheme();
    }
  }

  private static class ThriftSkuModelStandardScheme extends StandardScheme<ThriftSkuModel> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftSkuModel struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PRODUCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.productId = iprot.readI64();
              struct.setProductIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MARKET_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.marketPrice = iprot.readDouble();
              struct.setMarketPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.price = iprot.readDouble();
              struct.setPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.amount = iprot.readI32();
              struct.setAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.order = iprot.readI32();
              struct.setOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SALED_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.saledNum = iprot.readI32();
              struct.setSaledNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.code = iprot.readString();
              struct.setCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DISPLAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.display = iprot.readString();
              struct.setDisplayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SPEC_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map26 = iprot.readMapBegin();
                struct.specMap = new HashMap<String,String>(2*_map26.size);
                String _key27;
                String _val28;
                for (int _i29 = 0; _i29 < _map26.size; ++_i29)
                {
                  _key27 = iprot.readString();
                  _val28 = iprot.readString();
                  struct.specMap.put(_key27, _val28);
                }
                iprot.readMapEnd();
              }
              struct.setSpecMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // IMG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.img = iprot.readString();
              struct.setImgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // IMG_WIDTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.imgWidth = iprot.readI32();
              struct.setImgWidthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // IMG_HEIGHT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.imgHeight = iprot.readI32();
              struct.setImgHeightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetProductId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'productId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftSkuModel struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
      oprot.writeI64(struct.productId);
      oprot.writeFieldEnd();
      if (struct.description != null) {
        if (struct.isSetDescription()) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMarketPrice()) {
        oprot.writeFieldBegin(MARKET_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.marketPrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPrice()) {
        oprot.writeFieldBegin(PRICE_FIELD_DESC);
        oprot.writeDouble(struct.price);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAmount()) {
        oprot.writeFieldBegin(AMOUNT_FIELD_DESC);
        oprot.writeI32(struct.amount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOrder()) {
        oprot.writeFieldBegin(ORDER_FIELD_DESC);
        oprot.writeI32(struct.order);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSaledNum()) {
        oprot.writeFieldBegin(SALED_NUM_FIELD_DESC);
        oprot.writeI32(struct.saledNum);
        oprot.writeFieldEnd();
      }
      if (struct.code != null) {
        oprot.writeFieldBegin(CODE_FIELD_DESC);
        oprot.writeString(struct.code);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeString(struct.type);
          oprot.writeFieldEnd();
        }
      }
      if (struct.display != null) {
        if (struct.isSetDisplay()) {
          oprot.writeFieldBegin(DISPLAY_FIELD_DESC);
          oprot.writeString(struct.display);
          oprot.writeFieldEnd();
        }
      }
      if (struct.specMap != null) {
        if (struct.isSetSpecMap()) {
          oprot.writeFieldBegin(SPEC_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.specMap.size()));
            for (Map.Entry<String, String> _iter30 : struct.specMap.entrySet())
            {
              oprot.writeString(_iter30.getKey());
              oprot.writeString(_iter30.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.img != null) {
        if (struct.isSetImg()) {
          oprot.writeFieldBegin(IMG_FIELD_DESC);
          oprot.writeString(struct.img);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetImgWidth()) {
        oprot.writeFieldBegin(IMG_WIDTH_FIELD_DESC);
        oprot.writeI32(struct.imgWidth);
        oprot.writeFieldEnd();
      }
      if (struct.isSetImgHeight()) {
        oprot.writeFieldBegin(IMG_HEIGHT_FIELD_DESC);
        oprot.writeI32(struct.imgHeight);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftSkuModelTupleSchemeFactory implements SchemeFactory {
    public ThriftSkuModelTupleScheme getScheme() {
      return new ThriftSkuModelTupleScheme();
    }
  }

  private static class ThriftSkuModelTupleScheme extends TupleScheme<ThriftSkuModel> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftSkuModel struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.id);
      oprot.writeI64(struct.productId);
      oprot.writeString(struct.code);
      BitSet optionals = new BitSet();
      if (struct.isSetDescription()) {
        optionals.set(0);
      }
      if (struct.isSetMarketPrice()) {
        optionals.set(1);
      }
      if (struct.isSetPrice()) {
        optionals.set(2);
      }
      if (struct.isSetAmount()) {
        optionals.set(3);
      }
      if (struct.isSetOrder()) {
        optionals.set(4);
      }
      if (struct.isSetSaledNum()) {
        optionals.set(5);
      }
      if (struct.isSetType()) {
        optionals.set(6);
      }
      if (struct.isSetDisplay()) {
        optionals.set(7);
      }
      if (struct.isSetSpecMap()) {
        optionals.set(8);
      }
      if (struct.isSetImg()) {
        optionals.set(9);
      }
      if (struct.isSetImgWidth()) {
        optionals.set(10);
      }
      if (struct.isSetImgHeight()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetMarketPrice()) {
        oprot.writeDouble(struct.marketPrice);
      }
      if (struct.isSetPrice()) {
        oprot.writeDouble(struct.price);
      }
      if (struct.isSetAmount()) {
        oprot.writeI32(struct.amount);
      }
      if (struct.isSetOrder()) {
        oprot.writeI32(struct.order);
      }
      if (struct.isSetSaledNum()) {
        oprot.writeI32(struct.saledNum);
      }
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetDisplay()) {
        oprot.writeString(struct.display);
      }
      if (struct.isSetSpecMap()) {
        {
          oprot.writeI32(struct.specMap.size());
          for (Map.Entry<String, String> _iter31 : struct.specMap.entrySet())
          {
            oprot.writeString(_iter31.getKey());
            oprot.writeString(_iter31.getValue());
          }
        }
      }
      if (struct.isSetImg()) {
        oprot.writeString(struct.img);
      }
      if (struct.isSetImgWidth()) {
        oprot.writeI32(struct.imgWidth);
      }
      if (struct.isSetImgHeight()) {
        oprot.writeI32(struct.imgHeight);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftSkuModel struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readI64();
      struct.setIdIsSet(true);
      struct.productId = iprot.readI64();
      struct.setProductIdIsSet(true);
      struct.code = iprot.readString();
      struct.setCodeIsSet(true);
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.marketPrice = iprot.readDouble();
        struct.setMarketPriceIsSet(true);
      }
      if (incoming.get(2)) {
        struct.price = iprot.readDouble();
        struct.setPriceIsSet(true);
      }
      if (incoming.get(3)) {
        struct.amount = iprot.readI32();
        struct.setAmountIsSet(true);
      }
      if (incoming.get(4)) {
        struct.order = iprot.readI32();
        struct.setOrderIsSet(true);
      }
      if (incoming.get(5)) {
        struct.saledNum = iprot.readI32();
        struct.setSaledNumIsSet(true);
      }
      if (incoming.get(6)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.display = iprot.readString();
        struct.setDisplayIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TMap _map32 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.specMap = new HashMap<String,String>(2*_map32.size);
          String _key33;
          String _val34;
          for (int _i35 = 0; _i35 < _map32.size; ++_i35)
          {
            _key33 = iprot.readString();
            _val34 = iprot.readString();
            struct.specMap.put(_key33, _val34);
          }
        }
        struct.setSpecMapIsSet(true);
      }
      if (incoming.get(9)) {
        struct.img = iprot.readString();
        struct.setImgIsSet(true);
      }
      if (incoming.get(10)) {
        struct.imgWidth = iprot.readI32();
        struct.setImgWidthIsSet(true);
      }
      if (incoming.get(11)) {
        struct.imgHeight = iprot.readI32();
        struct.setImgHeightIsSet(true);
      }
    }
  }

}

