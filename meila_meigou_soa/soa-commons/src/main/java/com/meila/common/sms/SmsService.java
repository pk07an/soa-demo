package com.meila.common.sms;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TTupleProtocol;
/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked" })
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-10-27")
public class SmsService {

	public interface Iface {

		public boolean send_sms(String phone, String content, String ext, String caller)
				throws org.apache.thrift.TException;

		public SmsRet bulk_send_sms(List<String> phone_list, String content, String ext, String caller)
				throws org.apache.thrift.TException;

		public StockRet get_stock_details(String caller) throws org.apache.thrift.TException;

	}

	public interface AsyncIface {

		public void send_sms(String phone, String content, String ext, String caller,
				org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

		public void bulk_send_sms(List<String> phone_list, String content, String ext, String caller,
				org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

		public void get_stock_details(String caller, org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException;

	}

	public static class Client extends org.apache.thrift.TServiceClient implements Iface {
		public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
			public Factory() {
			}

			public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
				return new Client(prot);
			}

			public Client getClient(org.apache.thrift.protocol.TProtocol iprot,
					org.apache.thrift.protocol.TProtocol oprot) {
				return new Client(iprot, oprot);
			}
		}

		public Client(org.apache.thrift.protocol.TProtocol prot) {
			super(prot, prot);
		}

		public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
			super(iprot, oprot);
		}

		public boolean send_sms(String phone, String content, String ext, String caller)
				throws org.apache.thrift.TException {
			send_send_sms(phone, content, ext, caller);
			return recv_send_sms();
		}

		public void send_send_sms(String phone, String content, String ext, String caller)
				throws org.apache.thrift.TException {
			send_sms_args args = new send_sms_args();
			args.setPhone(phone);
			args.setContent(content);
			args.setExt(ext);
			args.setCaller(caller);
			sendBase("send_sms", args);
		}

		public boolean recv_send_sms() throws org.apache.thrift.TException {
			send_sms_result result = new send_sms_result();
			receiveBase(result, "send_sms");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"send_sms failed: unknown result");
		}

		public SmsRet bulk_send_sms(List<String> phone_list, String content, String ext, String caller)
				throws org.apache.thrift.TException {
			send_bulk_send_sms(phone_list, content, ext, caller);
			return recv_bulk_send_sms();
		}

		public void send_bulk_send_sms(List<String> phone_list, String content, String ext, String caller)
				throws org.apache.thrift.TException {
			bulk_send_sms_args args = new bulk_send_sms_args();
			args.setPhone_list(phone_list);
			args.setContent(content);
			args.setExt(ext);
			args.setCaller(caller);
			sendBase("bulk_send_sms", args);
		}

		public SmsRet recv_bulk_send_sms() throws org.apache.thrift.TException {
			bulk_send_sms_result result = new bulk_send_sms_result();
			receiveBase(result, "bulk_send_sms");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"bulk_send_sms failed: unknown result");
		}

		public StockRet get_stock_details(String caller) throws org.apache.thrift.TException {
			send_get_stock_details(caller);
			return recv_get_stock_details();
		}

		public void send_get_stock_details(String caller) throws org.apache.thrift.TException {
			get_stock_details_args args = new get_stock_details_args();
			args.setCaller(caller);
			sendBase("get_stock_details", args);
		}

		public StockRet recv_get_stock_details() throws org.apache.thrift.TException {
			get_stock_details_result result = new get_stock_details_result();
			receiveBase(result, "get_stock_details");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"get_stock_details failed: unknown result");
		}

	}

	public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
		public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
			private org.apache.thrift.async.TAsyncClientManager clientManager;
			private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

			public Factory(org.apache.thrift.async.TAsyncClientManager clientManager,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
				this.clientManager = clientManager;
				this.protocolFactory = protocolFactory;
			}

			public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
				return new AsyncClient(protocolFactory, clientManager, transport);
			}
		}

		public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory,
				org.apache.thrift.async.TAsyncClientManager clientManager,
				org.apache.thrift.transport.TNonblockingTransport transport) {
			super(protocolFactory, clientManager, transport);
		}

		public void send_sms(String phone, String content, String ext, String caller,
				org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
			checkReady();
			send_sms_call method_call = new send_sms_call(phone, content, ext, caller, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class send_sms_call extends org.apache.thrift.async.TAsyncMethodCall {
			private String phone;
			private String content;
			private String ext;
			private String caller;

			public send_sms_call(String phone, String content, String ext, String caller,
					org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.phone = phone;
				this.content = content;
				this.ext = ext;
				this.caller = caller;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("send_sms",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				send_sms_args args = new send_sms_args();
				args.setPhone(phone);
				args.setContent(content);
				args.setExt(ext);
				args.setCaller(caller);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public boolean getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_send_sms();
			}
		}

		public void bulk_send_sms(List<String> phone_list, String content, String ext, String caller,
				org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
			checkReady();
			bulk_send_sms_call method_call = new bulk_send_sms_call(phone_list, content, ext, caller, resultHandler,
					this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class bulk_send_sms_call extends org.apache.thrift.async.TAsyncMethodCall {
			private List<String> phone_list;
			private String content;
			private String ext;
			private String caller;

			public bulk_send_sms_call(List<String> phone_list, String content, String ext, String caller,
					org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.phone_list = phone_list;
				this.content = content;
				this.ext = ext;
				this.caller = caller;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bulk_send_sms",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				bulk_send_sms_args args = new bulk_send_sms_args();
				args.setPhone_list(phone_list);
				args.setContent(content);
				args.setExt(ext);
				args.setCaller(caller);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public SmsRet getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_bulk_send_sms();
			}
		}

		public void get_stock_details(String caller, org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			get_stock_details_call method_call = new get_stock_details_call(caller, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class get_stock_details_call extends org.apache.thrift.async.TAsyncMethodCall {
			private String caller;

			public get_stock_details_call(String caller, org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.caller = caller;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_stock_details",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				get_stock_details_args args = new get_stock_details_args();
				args.setCaller(caller);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public StockRet getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_get_stock_details();
			}
		}

	}

	public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I>
			implements org.apache.thrift.TProcessor {
		private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());

		public Processor(I iface) {
			super(iface, getProcessMap(
					new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
		}

		protected Processor(I iface,
				Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			super(iface, getProcessMap(processMap));
		}

		private static <I extends Iface> Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(
				Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			processMap.put("send_sms", new send_sms());
			processMap.put("bulk_send_sms", new bulk_send_sms());
			processMap.put("get_stock_details", new get_stock_details());
			return processMap;
		}

		public static class send_sms<I extends Iface> extends org.apache.thrift.ProcessFunction<I, send_sms_args> {
			public send_sms() {
				super("send_sms");
			}

			public send_sms_args getEmptyArgsInstance() {
				return new send_sms_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public send_sms_result getResult(I iface, send_sms_args args) throws org.apache.thrift.TException {
				send_sms_result result = new send_sms_result();
				result.success = iface.send_sms(args.phone, args.content, args.ext, args.caller);
				result.setSuccessIsSet(true);
				return result;
			}
		}

		public static class bulk_send_sms<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, bulk_send_sms_args> {
			public bulk_send_sms() {
				super("bulk_send_sms");
			}

			public bulk_send_sms_args getEmptyArgsInstance() {
				return new bulk_send_sms_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public bulk_send_sms_result getResult(I iface, bulk_send_sms_args args)
					throws org.apache.thrift.TException {
				bulk_send_sms_result result = new bulk_send_sms_result();
				result.success = iface.bulk_send_sms(args.phone_list, args.content, args.ext, args.caller);
				return result;
			}
		}

		public static class get_stock_details<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, get_stock_details_args> {
			public get_stock_details() {
				super("get_stock_details");
			}

			public get_stock_details_args getEmptyArgsInstance() {
				return new get_stock_details_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public get_stock_details_result getResult(I iface, get_stock_details_args args)
					throws org.apache.thrift.TException {
				get_stock_details_result result = new get_stock_details_result();
				result.success = iface.get_stock_details(args.caller);
				return result;
			}
		}

	}

	public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
		private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());

		public AsyncProcessor(I iface) {
			super(iface, getProcessMap(
					new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
		}

		protected AsyncProcessor(I iface,
				Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
			super(iface, getProcessMap(processMap));
		}

		private static <I extends AsyncIface> Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(
				Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
			processMap.put("send_sms", new send_sms());
			processMap.put("bulk_send_sms", new bulk_send_sms());
			processMap.put("get_stock_details", new get_stock_details());
			return processMap;
		}

		public static class send_sms<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, send_sms_args, Boolean> {
			public send_sms() {
				super("send_sms");
			}

			public send_sms_args getEmptyArgsInstance() {
				return new send_sms_args();
			}

			public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<Boolean>() {
					public void onComplete(Boolean o) {
						send_sms_result result = new send_sms_result();
						result.success = o;
						result.setSuccessIsSet(true);
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						send_sms_result result = new send_sms_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, send_sms_args args,
					org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
				iface.send_sms(args.phone, args.content, args.ext, args.caller, resultHandler);
			}
		}

		public static class bulk_send_sms<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, bulk_send_sms_args, SmsRet> {
			public bulk_send_sms() {
				super("bulk_send_sms");
			}

			public bulk_send_sms_args getEmptyArgsInstance() {
				return new bulk_send_sms_args();
			}

			public AsyncMethodCallback<SmsRet> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<SmsRet>() {
					public void onComplete(SmsRet o) {
						bulk_send_sms_result result = new bulk_send_sms_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						bulk_send_sms_result result = new bulk_send_sms_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, bulk_send_sms_args args,
					org.apache.thrift.async.AsyncMethodCallback<SmsRet> resultHandler) throws TException {
				iface.bulk_send_sms(args.phone_list, args.content, args.ext, args.caller, resultHandler);
			}
		}

		public static class get_stock_details<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, get_stock_details_args, StockRet> {
			public get_stock_details() {
				super("get_stock_details");
			}

			public get_stock_details_args getEmptyArgsInstance() {
				return new get_stock_details_args();
			}

			public AsyncMethodCallback<StockRet> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<StockRet>() {
					public void onComplete(StockRet o) {
						get_stock_details_result result = new get_stock_details_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						get_stock_details_result result = new get_stock_details_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, get_stock_details_args args,
					org.apache.thrift.async.AsyncMethodCallback<StockRet> resultHandler) throws TException {
				iface.get_stock_details(args.caller, resultHandler);
			}
		}

	}

	public static class send_sms_args implements org.apache.thrift.TBase<send_sms_args, send_sms_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<send_sms_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"send_sms_args");

		private static final org.apache.thrift.protocol.TField PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"phone", org.apache.thrift.protocol.TType.STRING, (short) 1);
		private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"content", org.apache.thrift.protocol.TType.STRING, (short) 2);
		private static final org.apache.thrift.protocol.TField EXT_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"ext", org.apache.thrift.protocol.TType.STRING, (short) 3);
		private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"caller", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

		static {
			schemes.put(StandardScheme.class, new send_sms_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new send_sms_argsTupleSchemeFactory());
		}

		public String phone; // required
		public String content; // required
		public String ext; // required
		public String caller; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			PHONE((short) 1, "phone"), CONTENT((short) 2, "content"), EXT((short) 3, "ext"), CALLER((short) 4,
					"caller");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // PHONE
					return PHONE;
				case 2: // CONTENT
					return CONTENT;
				case 3: // EXT
					return EXT;
				case 4: // CALLER
					return CALLER;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.PHONE, new org.apache.thrift.meta_data.FieldMetaData("phone",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.EXT, new org.apache.thrift.meta_data.FieldMetaData("ext",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(send_sms_args.class, metaDataMap);
		}

		public send_sms_args() {
		}

		public send_sms_args(String phone, String content, String ext, String caller) {
			this();
			this.phone = phone;
			this.content = content;
			this.ext = ext;
			this.caller = caller;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public send_sms_args(send_sms_args other) {
			if (other.isSetPhone()) {
				this.phone = other.phone;
			}
			if (other.isSetContent()) {
				this.content = other.content;
			}
			if (other.isSetExt()) {
				this.ext = other.ext;
			}
			if (other.isSetCaller()) {
				this.caller = other.caller;
			}
		}

		public send_sms_args deepCopy() {
			return new send_sms_args(this);
		}

		@Override
		public void clear() {
			this.phone = null;
			this.content = null;
			this.ext = null;
			this.caller = null;
		}

		public String getPhone() {
			return this.phone;
		}

		public send_sms_args setPhone(String phone) {
			this.phone = phone;
			return this;
		}

		public void unsetPhone() {
			this.phone = null;
		}

		/**
		 * Returns true if field phone is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetPhone() {
			return this.phone != null;
		}

		public void setPhoneIsSet(boolean value) {
			if (!value) {
				this.phone = null;
			}
		}

		public String getContent() {
			return this.content;
		}

		public send_sms_args setContent(String content) {
			this.content = content;
			return this;
		}

		public void unsetContent() {
			this.content = null;
		}

		/**
		 * Returns true if field content is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetContent() {
			return this.content != null;
		}

		public void setContentIsSet(boolean value) {
			if (!value) {
				this.content = null;
			}
		}

		public String getExt() {
			return this.ext;
		}

		public send_sms_args setExt(String ext) {
			this.ext = ext;
			return this;
		}

		public void unsetExt() {
			this.ext = null;
		}

		/**
		 * Returns true if field ext is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetExt() {
			return this.ext != null;
		}

		public void setExtIsSet(boolean value) {
			if (!value) {
				this.ext = null;
			}
		}

		public String getCaller() {
			return this.caller;
		}

		public send_sms_args setCaller(String caller) {
			this.caller = caller;
			return this;
		}

		public void unsetCaller() {
			this.caller = null;
		}

		/**
		 * Returns true if field caller is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetCaller() {
			return this.caller != null;
		}

		public void setCallerIsSet(boolean value) {
			if (!value) {
				this.caller = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case PHONE:
				if (value == null) {
					unsetPhone();
				} else {
					setPhone((String) value);
				}
				break;

			case CONTENT:
				if (value == null) {
					unsetContent();
				} else {
					setContent((String) value);
				}
				break;

			case EXT:
				if (value == null) {
					unsetExt();
				} else {
					setExt((String) value);
				}
				break;

			case CALLER:
				if (value == null) {
					unsetCaller();
				} else {
					setCaller((String) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case PHONE:
				return getPhone();

			case CONTENT:
				return getContent();

			case EXT:
				return getExt();

			case CALLER:
				return getCaller();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case PHONE:
				return isSetPhone();
			case CONTENT:
				return isSetContent();
			case EXT:
				return isSetExt();
			case CALLER:
				return isSetCaller();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof send_sms_args)
				return this.equals((send_sms_args) that);
			return false;
		}

		public boolean equals(send_sms_args that) {
			if (that == null)
				return false;

			boolean this_present_phone = true && this.isSetPhone();
			boolean that_present_phone = true && that.isSetPhone();
			if (this_present_phone || that_present_phone) {
				if (!(this_present_phone && that_present_phone))
					return false;
				if (!this.phone.equals(that.phone))
					return false;
			}

			boolean this_present_content = true && this.isSetContent();
			boolean that_present_content = true && that.isSetContent();
			if (this_present_content || that_present_content) {
				if (!(this_present_content && that_present_content))
					return false;
				if (!this.content.equals(that.content))
					return false;
			}

			boolean this_present_ext = true && this.isSetExt();
			boolean that_present_ext = true && that.isSetExt();
			if (this_present_ext || that_present_ext) {
				if (!(this_present_ext && that_present_ext))
					return false;
				if (!this.ext.equals(that.ext))
					return false;
			}

			boolean this_present_caller = true && this.isSetCaller();
			boolean that_present_caller = true && that.isSetCaller();
			if (this_present_caller || that_present_caller) {
				if (!(this_present_caller && that_present_caller))
					return false;
				if (!this.caller.equals(that.caller))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_phone = true && (isSetPhone());
			list.add(present_phone);
			if (present_phone)
				list.add(phone);

			boolean present_content = true && (isSetContent());
			list.add(present_content);
			if (present_content)
				list.add(content);

			boolean present_ext = true && (isSetExt());
			list.add(present_ext);
			if (present_ext)
				list.add(ext);

			boolean present_caller = true && (isSetCaller());
			list.add(present_caller);
			if (present_caller)
				list.add(caller);

			return list.hashCode();
		}

		@Override
		public int compareTo(send_sms_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetPhone()).compareTo(other.isSetPhone());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetPhone()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone, other.phone);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetContent()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetExt()).compareTo(other.isSetExt());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetExt()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ext, other.ext);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetCaller()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("send_sms_args(");
			boolean first = true;

			sb.append("phone:");
			if (this.phone == null) {
				sb.append("null");
			} else {
				sb.append(this.phone);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("content:");
			if (this.content == null) {
				sb.append("null");
			} else {
				sb.append(this.content);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("ext:");
			if (this.ext == null) {
				sb.append("null");
			} else {
				sb.append(this.ext);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("caller:");
			if (this.caller == null) {
				sb.append("null");
			} else {
				sb.append(this.caller);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class send_sms_argsStandardSchemeFactory implements SchemeFactory {
			public send_sms_argsStandardScheme getScheme() {
				return new send_sms_argsStandardScheme();
			}
		}

		private static class send_sms_argsStandardScheme extends StandardScheme<send_sms_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, send_sms_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // PHONE
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.phone = iprot.readString();
							struct.setPhoneIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // CONTENT
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.content = iprot.readString();
							struct.setContentIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 3: // EXT
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.ext = iprot.readString();
							struct.setExtIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 4: // CALLER
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.caller = iprot.readString();
							struct.setCallerIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, send_sms_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.phone != null) {
					oprot.writeFieldBegin(PHONE_FIELD_DESC);
					oprot.writeString(struct.phone);
					oprot.writeFieldEnd();
				}
				if (struct.content != null) {
					oprot.writeFieldBegin(CONTENT_FIELD_DESC);
					oprot.writeString(struct.content);
					oprot.writeFieldEnd();
				}
				if (struct.ext != null) {
					oprot.writeFieldBegin(EXT_FIELD_DESC);
					oprot.writeString(struct.ext);
					oprot.writeFieldEnd();
				}
				if (struct.caller != null) {
					oprot.writeFieldBegin(CALLER_FIELD_DESC);
					oprot.writeString(struct.caller);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class send_sms_argsTupleSchemeFactory implements SchemeFactory {
			public send_sms_argsTupleScheme getScheme() {
				return new send_sms_argsTupleScheme();
			}
		}

		private static class send_sms_argsTupleScheme extends TupleScheme<send_sms_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, send_sms_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetPhone()) {
					optionals.set(0);
				}
				if (struct.isSetContent()) {
					optionals.set(1);
				}
				if (struct.isSetExt()) {
					optionals.set(2);
				}
				if (struct.isSetCaller()) {
					optionals.set(3);
				}
				oprot.writeBitSet(optionals, 4);
				if (struct.isSetPhone()) {
					oprot.writeString(struct.phone);
				}
				if (struct.isSetContent()) {
					oprot.writeString(struct.content);
				}
				if (struct.isSetExt()) {
					oprot.writeString(struct.ext);
				}
				if (struct.isSetCaller()) {
					oprot.writeString(struct.caller);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, send_sms_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(4);
				if (incoming.get(0)) {
					struct.phone = iprot.readString();
					struct.setPhoneIsSet(true);
				}
				if (incoming.get(1)) {
					struct.content = iprot.readString();
					struct.setContentIsSet(true);
				}
				if (incoming.get(2)) {
					struct.ext = iprot.readString();
					struct.setExtIsSet(true);
				}
				if (incoming.get(3)) {
					struct.caller = iprot.readString();
					struct.setCallerIsSet(true);
				}
			}
		}

	}

	public static class send_sms_result implements org.apache.thrift.TBase<send_sms_result, send_sms_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<send_sms_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"send_sms_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.BOOL, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

		static {
			schemes.put(StandardScheme.class, new send_sms_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new send_sms_resultTupleSchemeFactory());
		}

		public boolean success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __SUCCESS_ISSET_ID = 0;
		private byte __isset_bitfield = 0;
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(send_sms_result.class, metaDataMap);
		}

		public send_sms_result() {
		}

		public send_sms_result(boolean success) {
			this();
			this.success = success;
			setSuccessIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public send_sms_result(send_sms_result other) {
			__isset_bitfield = other.__isset_bitfield;
			this.success = other.success;
		}

		public send_sms_result deepCopy() {
			return new send_sms_result(this);
		}

		@Override
		public void clear() {
			setSuccessIsSet(false);
			this.success = false;
		}

		public boolean isSuccess() {
			return this.success;
		}

		public send_sms_result setSuccess(boolean success) {
			this.success = success;
			setSuccessIsSet(true);
			return this;
		}

		public void unsetSuccess() {
			__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		public void setSuccessIsSet(boolean value) {
			__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Boolean) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return isSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof send_sms_result)
				return this.equals((send_sms_result) that);
			return false;
		}

		public boolean equals(send_sms_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true;
			boolean that_present_success = true;
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (this.success != that.success)
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true;
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(send_sms_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("send_sms_result(");
			boolean first = true;

			sb.append("success:");
			sb.append(this.success);
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java
				// serialization is wacky, and doesn't call the default
				// constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class send_sms_resultStandardSchemeFactory implements SchemeFactory {
			public send_sms_resultStandardScheme getScheme() {
				return new send_sms_resultStandardScheme();
			}
		}

		private static class send_sms_resultStandardScheme extends StandardScheme<send_sms_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, send_sms_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
							struct.success = iprot.readBool();
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, send_sms_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.isSetSuccess()) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeBool(struct.success);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class send_sms_resultTupleSchemeFactory implements SchemeFactory {
			public send_sms_resultTupleScheme getScheme() {
				return new send_sms_resultTupleScheme();
			}
		}

		private static class send_sms_resultTupleScheme extends TupleScheme<send_sms_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, send_sms_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeBool(struct.success);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, send_sms_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = iprot.readBool();
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class bulk_send_sms_args
			implements org.apache.thrift.TBase<bulk_send_sms_args, bulk_send_sms_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<bulk_send_sms_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"bulk_send_sms_args");

		private static final org.apache.thrift.protocol.TField PHONE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"phone_list", org.apache.thrift.protocol.TType.LIST, (short) 1);
		private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"content", org.apache.thrift.protocol.TType.STRING, (short) 2);
		private static final org.apache.thrift.protocol.TField EXT_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"ext", org.apache.thrift.protocol.TType.STRING, (short) 3);
		private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"caller", org.apache.thrift.protocol.TType.STRING, (short) 4);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

		static {
			schemes.put(StandardScheme.class, new bulk_send_sms_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new bulk_send_sms_argsTupleSchemeFactory());
		}

		public List<String> phone_list; // required
		public String content; // required
		public String ext; // required
		public String caller; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			PHONE_LIST((short) 1, "phone_list"), CONTENT((short) 2, "content"), EXT((short) 3, "ext"), CALLER((short) 4,
					"caller");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // PHONE_LIST
					return PHONE_LIST;
				case 2: // CONTENT
					return CONTENT;
				case 3: // EXT
					return EXT;
				case 4: // CALLER
					return CALLER;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.PHONE_LIST,
					new org.apache.thrift.meta_data.FieldMetaData("phone_list",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
									new org.apache.thrift.meta_data.FieldValueMetaData(
											org.apache.thrift.protocol.TType.STRING))));
			tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.EXT, new org.apache.thrift.meta_data.FieldMetaData("ext",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bulk_send_sms_args.class, metaDataMap);
		}

		public bulk_send_sms_args() {
		}

		public bulk_send_sms_args(List<String> phone_list, String content, String ext, String caller) {
			this();
			this.phone_list = phone_list;
			this.content = content;
			this.ext = ext;
			this.caller = caller;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public bulk_send_sms_args(bulk_send_sms_args other) {
			if (other.isSetPhone_list()) {
				List<String> __this__phone_list = new ArrayList<String>(other.phone_list);
				this.phone_list = __this__phone_list;
			}
			if (other.isSetContent()) {
				this.content = other.content;
			}
			if (other.isSetExt()) {
				this.ext = other.ext;
			}
			if (other.isSetCaller()) {
				this.caller = other.caller;
			}
		}

		public bulk_send_sms_args deepCopy() {
			return new bulk_send_sms_args(this);
		}

		@Override
		public void clear() {
			this.phone_list = null;
			this.content = null;
			this.ext = null;
			this.caller = null;
		}

		public int getPhone_listSize() {
			return (this.phone_list == null) ? 0 : this.phone_list.size();
		}

		public java.util.Iterator<String> getPhone_listIterator() {
			return (this.phone_list == null) ? null : this.phone_list.iterator();
		}

		public void addToPhone_list(String elem) {
			if (this.phone_list == null) {
				this.phone_list = new ArrayList<String>();
			}
			this.phone_list.add(elem);
		}

		public List<String> getPhone_list() {
			return this.phone_list;
		}

		public bulk_send_sms_args setPhone_list(List<String> phone_list) {
			this.phone_list = phone_list;
			return this;
		}

		public void unsetPhone_list() {
			this.phone_list = null;
		}

		/**
		 * Returns true if field phone_list is set (has been assigned a value)
		 * and false otherwise
		 */
		public boolean isSetPhone_list() {
			return this.phone_list != null;
		}

		public void setPhone_listIsSet(boolean value) {
			if (!value) {
				this.phone_list = null;
			}
		}

		public String getContent() {
			return this.content;
		}

		public bulk_send_sms_args setContent(String content) {
			this.content = content;
			return this;
		}

		public void unsetContent() {
			this.content = null;
		}

		/**
		 * Returns true if field content is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetContent() {
			return this.content != null;
		}

		public void setContentIsSet(boolean value) {
			if (!value) {
				this.content = null;
			}
		}

		public String getExt() {
			return this.ext;
		}

		public bulk_send_sms_args setExt(String ext) {
			this.ext = ext;
			return this;
		}

		public void unsetExt() {
			this.ext = null;
		}

		/**
		 * Returns true if field ext is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetExt() {
			return this.ext != null;
		}

		public void setExtIsSet(boolean value) {
			if (!value) {
				this.ext = null;
			}
		}

		public String getCaller() {
			return this.caller;
		}

		public bulk_send_sms_args setCaller(String caller) {
			this.caller = caller;
			return this;
		}

		public void unsetCaller() {
			this.caller = null;
		}

		/**
		 * Returns true if field caller is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetCaller() {
			return this.caller != null;
		}

		public void setCallerIsSet(boolean value) {
			if (!value) {
				this.caller = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case PHONE_LIST:
				if (value == null) {
					unsetPhone_list();
				} else {
					setPhone_list((List<String>) value);
				}
				break;

			case CONTENT:
				if (value == null) {
					unsetContent();
				} else {
					setContent((String) value);
				}
				break;

			case EXT:
				if (value == null) {
					unsetExt();
				} else {
					setExt((String) value);
				}
				break;

			case CALLER:
				if (value == null) {
					unsetCaller();
				} else {
					setCaller((String) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case PHONE_LIST:
				return getPhone_list();

			case CONTENT:
				return getContent();

			case EXT:
				return getExt();

			case CALLER:
				return getCaller();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case PHONE_LIST:
				return isSetPhone_list();
			case CONTENT:
				return isSetContent();
			case EXT:
				return isSetExt();
			case CALLER:
				return isSetCaller();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof bulk_send_sms_args)
				return this.equals((bulk_send_sms_args) that);
			return false;
		}

		public boolean equals(bulk_send_sms_args that) {
			if (that == null)
				return false;

			boolean this_present_phone_list = true && this.isSetPhone_list();
			boolean that_present_phone_list = true && that.isSetPhone_list();
			if (this_present_phone_list || that_present_phone_list) {
				if (!(this_present_phone_list && that_present_phone_list))
					return false;
				if (!this.phone_list.equals(that.phone_list))
					return false;
			}

			boolean this_present_content = true && this.isSetContent();
			boolean that_present_content = true && that.isSetContent();
			if (this_present_content || that_present_content) {
				if (!(this_present_content && that_present_content))
					return false;
				if (!this.content.equals(that.content))
					return false;
			}

			boolean this_present_ext = true && this.isSetExt();
			boolean that_present_ext = true && that.isSetExt();
			if (this_present_ext || that_present_ext) {
				if (!(this_present_ext && that_present_ext))
					return false;
				if (!this.ext.equals(that.ext))
					return false;
			}

			boolean this_present_caller = true && this.isSetCaller();
			boolean that_present_caller = true && that.isSetCaller();
			if (this_present_caller || that_present_caller) {
				if (!(this_present_caller && that_present_caller))
					return false;
				if (!this.caller.equals(that.caller))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_phone_list = true && (isSetPhone_list());
			list.add(present_phone_list);
			if (present_phone_list)
				list.add(phone_list);

			boolean present_content = true && (isSetContent());
			list.add(present_content);
			if (present_content)
				list.add(content);

			boolean present_ext = true && (isSetExt());
			list.add(present_ext);
			if (present_ext)
				list.add(ext);

			boolean present_caller = true && (isSetCaller());
			list.add(present_caller);
			if (present_caller)
				list.add(caller);

			return list.hashCode();
		}

		@Override
		public int compareTo(bulk_send_sms_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetPhone_list()).compareTo(other.isSetPhone_list());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetPhone_list()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone_list, other.phone_list);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetContent()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetExt()).compareTo(other.isSetExt());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetExt()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ext, other.ext);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetCaller()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("bulk_send_sms_args(");
			boolean first = true;

			sb.append("phone_list:");
			if (this.phone_list == null) {
				sb.append("null");
			} else {
				sb.append(this.phone_list);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("content:");
			if (this.content == null) {
				sb.append("null");
			} else {
				sb.append(this.content);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("ext:");
			if (this.ext == null) {
				sb.append("null");
			} else {
				sb.append(this.ext);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("caller:");
			if (this.caller == null) {
				sb.append("null");
			} else {
				sb.append(this.caller);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class bulk_send_sms_argsStandardSchemeFactory implements SchemeFactory {
			public bulk_send_sms_argsStandardScheme getScheme() {
				return new bulk_send_sms_argsStandardScheme();
			}
		}

		private static class bulk_send_sms_argsStandardScheme extends StandardScheme<bulk_send_sms_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, bulk_send_sms_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // PHONE_LIST
						if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
							{
								org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
								struct.phone_list = new ArrayList<String>(_list8.size);
								String _elem9;
								for (int _i10 = 0; _i10 < _list8.size; ++_i10) {
									_elem9 = iprot.readString();
									struct.phone_list.add(_elem9);
								}
								iprot.readListEnd();
							}
							struct.setPhone_listIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // CONTENT
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.content = iprot.readString();
							struct.setContentIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 3: // EXT
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.ext = iprot.readString();
							struct.setExtIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 4: // CALLER
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.caller = iprot.readString();
							struct.setCallerIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, bulk_send_sms_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.phone_list != null) {
					oprot.writeFieldBegin(PHONE_LIST_FIELD_DESC);
					{
						oprot.writeListBegin(new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRING, struct.phone_list.size()));
						for (String _iter11 : struct.phone_list) {
							oprot.writeString(_iter11);
						}
						oprot.writeListEnd();
					}
					oprot.writeFieldEnd();
				}
				if (struct.content != null) {
					oprot.writeFieldBegin(CONTENT_FIELD_DESC);
					oprot.writeString(struct.content);
					oprot.writeFieldEnd();
				}
				if (struct.ext != null) {
					oprot.writeFieldBegin(EXT_FIELD_DESC);
					oprot.writeString(struct.ext);
					oprot.writeFieldEnd();
				}
				if (struct.caller != null) {
					oprot.writeFieldBegin(CALLER_FIELD_DESC);
					oprot.writeString(struct.caller);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class bulk_send_sms_argsTupleSchemeFactory implements SchemeFactory {
			public bulk_send_sms_argsTupleScheme getScheme() {
				return new bulk_send_sms_argsTupleScheme();
			}
		}

		private static class bulk_send_sms_argsTupleScheme extends TupleScheme<bulk_send_sms_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, bulk_send_sms_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetPhone_list()) {
					optionals.set(0);
				}
				if (struct.isSetContent()) {
					optionals.set(1);
				}
				if (struct.isSetExt()) {
					optionals.set(2);
				}
				if (struct.isSetCaller()) {
					optionals.set(3);
				}
				oprot.writeBitSet(optionals, 4);
				if (struct.isSetPhone_list()) {
					{
						oprot.writeI32(struct.phone_list.size());
						for (String _iter12 : struct.phone_list) {
							oprot.writeString(_iter12);
						}
					}
				}
				if (struct.isSetContent()) {
					oprot.writeString(struct.content);
				}
				if (struct.isSetExt()) {
					oprot.writeString(struct.ext);
				}
				if (struct.isSetCaller()) {
					oprot.writeString(struct.caller);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, bulk_send_sms_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(4);
				if (incoming.get(0)) {
					{
						org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRING, iprot.readI32());
						struct.phone_list = new ArrayList<String>(_list13.size);
						String _elem14;
						for (int _i15 = 0; _i15 < _list13.size; ++_i15) {
							_elem14 = iprot.readString();
							struct.phone_list.add(_elem14);
						}
					}
					struct.setPhone_listIsSet(true);
				}
				if (incoming.get(1)) {
					struct.content = iprot.readString();
					struct.setContentIsSet(true);
				}
				if (incoming.get(2)) {
					struct.ext = iprot.readString();
					struct.setExtIsSet(true);
				}
				if (incoming.get(3)) {
					struct.caller = iprot.readString();
					struct.setCallerIsSet(true);
				}
			}
		}

	}

	public static class bulk_send_sms_result
			implements org.apache.thrift.TBase<bulk_send_sms_result, bulk_send_sms_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<bulk_send_sms_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"bulk_send_sms_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

		static {
			schemes.put(StandardScheme.class, new bulk_send_sms_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new bulk_send_sms_resultTupleSchemeFactory());
		}

		public SmsRet success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									SmsRet.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bulk_send_sms_result.class, metaDataMap);
		}

		public bulk_send_sms_result() {
		}

		public bulk_send_sms_result(SmsRet success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public bulk_send_sms_result(bulk_send_sms_result other) {
			if (other.isSetSuccess()) {
				this.success = new SmsRet(other.success);
			}
		}

		public bulk_send_sms_result deepCopy() {
			return new bulk_send_sms_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public SmsRet getSuccess() {
			return this.success;
		}

		public bulk_send_sms_result setSuccess(SmsRet success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((SmsRet) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof bulk_send_sms_result)
				return this.equals((bulk_send_sms_result) that);
			return false;
		}

		public boolean equals(bulk_send_sms_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(bulk_send_sms_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("bulk_send_sms_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class bulk_send_sms_resultStandardSchemeFactory implements SchemeFactory {
			public bulk_send_sms_resultStandardScheme getScheme() {
				return new bulk_send_sms_resultStandardScheme();
			}
		}

		private static class bulk_send_sms_resultStandardScheme extends StandardScheme<bulk_send_sms_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, bulk_send_sms_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new SmsRet();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, bulk_send_sms_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class bulk_send_sms_resultTupleSchemeFactory implements SchemeFactory {
			public bulk_send_sms_resultTupleScheme getScheme() {
				return new bulk_send_sms_resultTupleScheme();
			}
		}

		private static class bulk_send_sms_resultTupleScheme extends TupleScheme<bulk_send_sms_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, bulk_send_sms_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, bulk_send_sms_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new SmsRet();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class get_stock_details_args
			implements org.apache.thrift.TBase<get_stock_details_args, get_stock_details_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<get_stock_details_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"get_stock_details_args");

		private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"caller", org.apache.thrift.protocol.TType.STRING, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

		static {
			schemes.put(StandardScheme.class, new get_stock_details_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new get_stock_details_argsTupleSchemeFactory());
		}

		public String caller; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			CALLER((short) 1, "caller");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // CALLER
					return CALLER;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_stock_details_args.class, metaDataMap);
		}

		public get_stock_details_args() {
		}

		public get_stock_details_args(String caller) {
			this();
			this.caller = caller;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public get_stock_details_args(get_stock_details_args other) {
			if (other.isSetCaller()) {
				this.caller = other.caller;
			}
		}

		public get_stock_details_args deepCopy() {
			return new get_stock_details_args(this);
		}

		@Override
		public void clear() {
			this.caller = null;
		}

		public String getCaller() {
			return this.caller;
		}

		public get_stock_details_args setCaller(String caller) {
			this.caller = caller;
			return this;
		}

		public void unsetCaller() {
			this.caller = null;
		}

		/**
		 * Returns true if field caller is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetCaller() {
			return this.caller != null;
		}

		public void setCallerIsSet(boolean value) {
			if (!value) {
				this.caller = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case CALLER:
				if (value == null) {
					unsetCaller();
				} else {
					setCaller((String) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case CALLER:
				return getCaller();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case CALLER:
				return isSetCaller();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof get_stock_details_args)
				return this.equals((get_stock_details_args) that);
			return false;
		}

		public boolean equals(get_stock_details_args that) {
			if (that == null)
				return false;

			boolean this_present_caller = true && this.isSetCaller();
			boolean that_present_caller = true && that.isSetCaller();
			if (this_present_caller || that_present_caller) {
				if (!(this_present_caller && that_present_caller))
					return false;
				if (!this.caller.equals(that.caller))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_caller = true && (isSetCaller());
			list.add(present_caller);
			if (present_caller)
				list.add(caller);

			return list.hashCode();
		}

		@Override
		public int compareTo(get_stock_details_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetCaller()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("get_stock_details_args(");
			boolean first = true;

			sb.append("caller:");
			if (this.caller == null) {
				sb.append("null");
			} else {
				sb.append(this.caller);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class get_stock_details_argsStandardSchemeFactory implements SchemeFactory {
			public get_stock_details_argsStandardScheme getScheme() {
				return new get_stock_details_argsStandardScheme();
			}
		}

		private static class get_stock_details_argsStandardScheme extends StandardScheme<get_stock_details_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, get_stock_details_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // CALLER
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.caller = iprot.readString();
							struct.setCallerIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, get_stock_details_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.caller != null) {
					oprot.writeFieldBegin(CALLER_FIELD_DESC);
					oprot.writeString(struct.caller);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class get_stock_details_argsTupleSchemeFactory implements SchemeFactory {
			public get_stock_details_argsTupleScheme getScheme() {
				return new get_stock_details_argsTupleScheme();
			}
		}

		private static class get_stock_details_argsTupleScheme extends TupleScheme<get_stock_details_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, get_stock_details_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetCaller()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetCaller()) {
					oprot.writeString(struct.caller);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, get_stock_details_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.caller = iprot.readString();
					struct.setCallerIsSet(true);
				}
			}
		}

	}

	public static class get_stock_details_result
			implements org.apache.thrift.TBase<get_stock_details_result, get_stock_details_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<get_stock_details_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"get_stock_details_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

		static {
			schemes.put(StandardScheme.class, new get_stock_details_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new get_stock_details_resultTupleSchemeFactory());
		}

		public StockRet success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									StockRet.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_stock_details_result.class, metaDataMap);
		}

		public get_stock_details_result() {
		}

		public get_stock_details_result(StockRet success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public get_stock_details_result(get_stock_details_result other) {
			if (other.isSetSuccess()) {
				this.success = new StockRet(other.success);
			}
		}

		public get_stock_details_result deepCopy() {
			return new get_stock_details_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public StockRet getSuccess() {
			return this.success;
		}

		public get_stock_details_result setSuccess(StockRet success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((StockRet) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof get_stock_details_result)
				return this.equals((get_stock_details_result) that);
			return false;
		}

		public boolean equals(get_stock_details_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(get_stock_details_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("get_stock_details_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class get_stock_details_resultStandardSchemeFactory implements SchemeFactory {
			public get_stock_details_resultStandardScheme getScheme() {
				return new get_stock_details_resultStandardScheme();
			}
		}

		private static class get_stock_details_resultStandardScheme extends StandardScheme<get_stock_details_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, get_stock_details_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new StockRet();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, get_stock_details_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class get_stock_details_resultTupleSchemeFactory implements SchemeFactory {
			public get_stock_details_resultTupleScheme getScheme() {
				return new get_stock_details_resultTupleScheme();
			}
		}

		private static class get_stock_details_resultTupleScheme extends TupleScheme<get_stock_details_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, get_stock_details_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, get_stock_details_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new StockRet();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

}
