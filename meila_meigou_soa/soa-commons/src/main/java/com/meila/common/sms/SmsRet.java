package com.meila.common.sms;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked" })
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-10-27")
public class SmsRet implements org.apache.thrift.TBase<SmsRet, SmsRet._Fields>, java.io.Serializable, Cloneable,
		Comparable<SmsRet> {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"SmsRet");

	private static final org.apache.thrift.protocol.TField RETCODE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"retcode", org.apache.thrift.protocol.TType.BOOL, (short) 1);
	private static final org.apache.thrift.protocol.TField OKCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"okcount", org.apache.thrift.protocol.TType.I32, (short) 2);
	private static final org.apache.thrift.protocol.TField ERRPHONES_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"errphones", org.apache.thrift.protocol.TType.LIST, (short) 3);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

	static {
		schemes.put(StandardScheme.class, new SmsRetStandardSchemeFactory());
		schemes.put(TupleScheme.class, new SmsRetTupleSchemeFactory());
	}

	public boolean retcode; // required
	public int okcount; // required
	public List<String> errphones; // required

	/**
	 * The set of fields this struct contains, along with convenience methods
	 * for finding and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		RETCODE((short) 1, "retcode"), OKCOUNT((short) 2, "okcount"), ERRPHONES((short) 3, "errphones");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not
		 * found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // RETCODE
				return RETCODE;
			case 2: // OKCOUNT
				return OKCOUNT;
			case 3: // ERRPHONES
				return ERRPHONES;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not
		 * found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	private static final int __RETCODE_ISSET_ID = 0;
	private static final int __OKCOUNT_ISSET_ID = 1;
	private byte __isset_bitfield = 0;
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.RETCODE,
				new org.apache.thrift.meta_data.FieldMetaData("retcode",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.OKCOUNT,
				new org.apache.thrift.meta_data.FieldMetaData("okcount",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.ERRPHONES, new org.apache.thrift.meta_data.FieldMetaData("errphones",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SmsRet.class, metaDataMap);
	}

	public SmsRet() {
	}

	public SmsRet(boolean retcode, int okcount, List<String> errphones) {
		this();
		this.retcode = retcode;
		setRetcodeIsSet(true);
		this.okcount = okcount;
		setOkcountIsSet(true);
		this.errphones = errphones;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public SmsRet(SmsRet other) {
		__isset_bitfield = other.__isset_bitfield;
		this.retcode = other.retcode;
		this.okcount = other.okcount;
		if (other.isSetErrphones()) {
			List<String> __this__errphones = new ArrayList<String>(other.errphones);
			this.errphones = __this__errphones;
		}
	}

	public SmsRet deepCopy() {
		return new SmsRet(this);
	}

	@Override
	public void clear() {
		setRetcodeIsSet(false);
		this.retcode = false;
		setOkcountIsSet(false);
		this.okcount = 0;
		this.errphones = null;
	}

	public boolean isRetcode() {
		return this.retcode;
	}

	public SmsRet setRetcode(boolean retcode) {
		this.retcode = retcode;
		setRetcodeIsSet(true);
		return this;
	}

	public void unsetRetcode() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RETCODE_ISSET_ID);
	}

	/**
	 * Returns true if field retcode is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetRetcode() {
		return EncodingUtils.testBit(__isset_bitfield, __RETCODE_ISSET_ID);
	}

	public void setRetcodeIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RETCODE_ISSET_ID, value);
	}

	public int getOkcount() {
		return this.okcount;
	}

	public SmsRet setOkcount(int okcount) {
		this.okcount = okcount;
		setOkcountIsSet(true);
		return this;
	}

	public void unsetOkcount() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OKCOUNT_ISSET_ID);
	}

	/**
	 * Returns true if field okcount is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetOkcount() {
		return EncodingUtils.testBit(__isset_bitfield, __OKCOUNT_ISSET_ID);
	}

	public void setOkcountIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OKCOUNT_ISSET_ID, value);
	}

	public int getErrphonesSize() {
		return (this.errphones == null) ? 0 : this.errphones.size();
	}

	public java.util.Iterator<String> getErrphonesIterator() {
		return (this.errphones == null) ? null : this.errphones.iterator();
	}

	public void addToErrphones(String elem) {
		if (this.errphones == null) {
			this.errphones = new ArrayList<String>();
		}
		this.errphones.add(elem);
	}

	public List<String> getErrphones() {
		return this.errphones;
	}

	public SmsRet setErrphones(List<String> errphones) {
		this.errphones = errphones;
		return this;
	}

	public void unsetErrphones() {
		this.errphones = null;
	}

	/**
	 * Returns true if field errphones is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetErrphones() {
		return this.errphones != null;
	}

	public void setErrphonesIsSet(boolean value) {
		if (!value) {
			this.errphones = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case RETCODE:
			if (value == null) {
				unsetRetcode();
			} else {
				setRetcode((Boolean) value);
			}
			break;

		case OKCOUNT:
			if (value == null) {
				unsetOkcount();
			} else {
				setOkcount((Integer) value);
			}
			break;

		case ERRPHONES:
			if (value == null) {
				unsetErrphones();
			} else {
				setErrphones((List<String>) value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case RETCODE:
			return isRetcode();

		case OKCOUNT:
			return getOkcount();

		case ERRPHONES:
			return getErrphones();

		}
		throw new IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned
	 * a value) and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case RETCODE:
			return isSetRetcode();
		case OKCOUNT:
			return isSetOkcount();
		case ERRPHONES:
			return isSetErrphones();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof SmsRet)
			return this.equals((SmsRet) that);
		return false;
	}

	public boolean equals(SmsRet that) {
		if (that == null)
			return false;

		boolean this_present_retcode = true;
		boolean that_present_retcode = true;
		if (this_present_retcode || that_present_retcode) {
			if (!(this_present_retcode && that_present_retcode))
				return false;
			if (this.retcode != that.retcode)
				return false;
		}

		boolean this_present_okcount = true;
		boolean that_present_okcount = true;
		if (this_present_okcount || that_present_okcount) {
			if (!(this_present_okcount && that_present_okcount))
				return false;
			if (this.okcount != that.okcount)
				return false;
		}

		boolean this_present_errphones = true && this.isSetErrphones();
		boolean that_present_errphones = true && that.isSetErrphones();
		if (this_present_errphones || that_present_errphones) {
			if (!(this_present_errphones && that_present_errphones))
				return false;
			if (!this.errphones.equals(that.errphones))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		List<Object> list = new ArrayList<Object>();

		boolean present_retcode = true;
		list.add(present_retcode);
		if (present_retcode)
			list.add(retcode);

		boolean present_okcount = true;
		list.add(present_okcount);
		if (present_okcount)
			list.add(okcount);

		boolean present_errphones = true && (isSetErrphones());
		list.add(present_errphones);
		if (present_errphones)
			list.add(errphones);

		return list.hashCode();
	}

	@Override
	public int compareTo(SmsRet other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = Boolean.valueOf(isSetRetcode()).compareTo(other.isSetRetcode());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetRetcode()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.retcode, other.retcode);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetOkcount()).compareTo(other.isSetOkcount());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetOkcount()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.okcount, other.okcount);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetErrphones()).compareTo(other.isSetErrphones());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetErrphones()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errphones, other.errphones);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("SmsRet(");
		boolean first = true;

		sb.append("retcode:");
		sb.append(this.retcode);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("okcount:");
		sb.append(this.okcount);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("errphones:");
		if (this.errphones == null) {
			sb.append("null");
		} else {
			sb.append(this.errphones);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java
			// serialization is wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class SmsRetStandardSchemeFactory implements SchemeFactory {
		public SmsRetStandardScheme getScheme() {
			return new SmsRetStandardScheme();
		}
	}

	private static class SmsRetStandardScheme extends StandardScheme<SmsRet> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, SmsRet struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // RETCODE
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.retcode = iprot.readBool();
						struct.setRetcodeIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // OKCOUNT
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.okcount = iprot.readI32();
						struct.setOkcountIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // ERRPHONES
					if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
						{
							org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
							struct.errphones = new ArrayList<String>(_list0.size);
							String _elem1;
							for (int _i2 = 0; _i2 < _list0.size; ++_i2) {
								_elem1 = iprot.readString();
								struct.errphones.add(_elem1);
							}
							iprot.readListEnd();
						}
						struct.setErrphonesIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be
			// checked in the validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, SmsRet struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			oprot.writeFieldBegin(RETCODE_FIELD_DESC);
			oprot.writeBool(struct.retcode);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(OKCOUNT_FIELD_DESC);
			oprot.writeI32(struct.okcount);
			oprot.writeFieldEnd();
			if (struct.errphones != null) {
				oprot.writeFieldBegin(ERRPHONES_FIELD_DESC);
				{
					oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING,
							struct.errphones.size()));
					for (String _iter3 : struct.errphones) {
						oprot.writeString(_iter3);
					}
					oprot.writeListEnd();
				}
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class SmsRetTupleSchemeFactory implements SchemeFactory {
		public SmsRetTupleScheme getScheme() {
			return new SmsRetTupleScheme();
		}
	}

	private static class SmsRetTupleScheme extends TupleScheme<SmsRet> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, SmsRet struct)
				throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			BitSet optionals = new BitSet();
			if (struct.isSetRetcode()) {
				optionals.set(0);
			}
			if (struct.isSetOkcount()) {
				optionals.set(1);
			}
			if (struct.isSetErrphones()) {
				optionals.set(2);
			}
			oprot.writeBitSet(optionals, 3);
			if (struct.isSetRetcode()) {
				oprot.writeBool(struct.retcode);
			}
			if (struct.isSetOkcount()) {
				oprot.writeI32(struct.okcount);
			}
			if (struct.isSetErrphones()) {
				{
					oprot.writeI32(struct.errphones.size());
					for (String _iter4 : struct.errphones) {
						oprot.writeString(_iter4);
					}
				}
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, SmsRet struct) throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			BitSet incoming = iprot.readBitSet(3);
			if (incoming.get(0)) {
				struct.retcode = iprot.readBool();
				struct.setRetcodeIsSet(true);
			}
			if (incoming.get(1)) {
				struct.okcount = iprot.readI32();
				struct.setOkcountIsSet(true);
			}
			if (incoming.get(2)) {
				{
					org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(
							org.apache.thrift.protocol.TType.STRING, iprot.readI32());
					struct.errphones = new ArrayList<String>(_list5.size);
					String _elem6;
					for (int _i7 = 0; _i7 < _list5.size; ++_i7) {
						_elem6 = iprot.readString();
						struct.errphones.add(_elem6);
					}
				}
				struct.setErrphonesIsSet(true);
			}
		}
	}

}
