package com.meila.common.sms;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked" })
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-10-27")
public class StockRet implements org.apache.thrift.TBase<StockRet, StockRet._Fields>, java.io.Serializable, Cloneable,
		Comparable<StockRet> {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"StockRet");

	private static final org.apache.thrift.protocol.TField RETCODE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"retcode", org.apache.thrift.protocol.TType.BOOL, (short) 1);
	private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"message", org.apache.thrift.protocol.TType.STRING, (short) 2);
	private static final org.apache.thrift.protocol.TField STOCKREMAIN_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"stockremain", org.apache.thrift.protocol.TType.I32, (short) 3);
	private static final org.apache.thrift.protocol.TField POINTS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"points", org.apache.thrift.protocol.TType.I32, (short) 4);
	private static final org.apache.thrift.protocol.TField SENDTOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"sendtotal", org.apache.thrift.protocol.TType.I32, (short) 5);
	private static final org.apache.thrift.protocol.TField CURDAYSEND_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"curdaysend", org.apache.thrift.protocol.TType.I32, (short) 6);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

	static {
		schemes.put(StandardScheme.class, new StockRetStandardSchemeFactory());
		schemes.put(TupleScheme.class, new StockRetTupleSchemeFactory());
	}

	public boolean retcode; // required
	public String message; // required
	public int stockremain; // required
	public int points; // required
	public int sendtotal; // required
	public int curdaysend; // required

	/**
	 * The set of fields this struct contains, along with convenience methods
	 * for finding and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		RETCODE((short) 1, "retcode"), MESSAGE((short) 2, "message"), STOCKREMAIN((short) 3, "stockremain"), POINTS(
				(short) 4, "points"), SENDTOTAL((short) 5, "sendtotal"), CURDAYSEND((short) 6, "curdaysend");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not
		 * found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // RETCODE
				return RETCODE;
			case 2: // MESSAGE
				return MESSAGE;
			case 3: // STOCKREMAIN
				return STOCKREMAIN;
			case 4: // POINTS
				return POINTS;
			case 5: // SENDTOTAL
				return SENDTOTAL;
			case 6: // CURDAYSEND
				return CURDAYSEND;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not
		 * found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	private static final int __RETCODE_ISSET_ID = 0;
	private static final int __STOCKREMAIN_ISSET_ID = 1;
	private static final int __POINTS_ISSET_ID = 2;
	private static final int __SENDTOTAL_ISSET_ID = 3;
	private static final int __CURDAYSEND_ISSET_ID = 4;
	private byte __isset_bitfield = 0;
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.RETCODE,
				new org.apache.thrift.meta_data.FieldMetaData("retcode",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.MESSAGE,
				new org.apache.thrift.meta_data.FieldMetaData("message",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.STOCKREMAIN,
				new org.apache.thrift.meta_data.FieldMetaData("stockremain",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.POINTS,
				new org.apache.thrift.meta_data.FieldMetaData("points", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.SENDTOTAL,
				new org.apache.thrift.meta_data.FieldMetaData("sendtotal",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.CURDAYSEND,
				new org.apache.thrift.meta_data.FieldMetaData("curdaysend",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StockRet.class, metaDataMap);
	}

	public StockRet() {
	}

	public StockRet(boolean retcode, String message, int stockremain, int points, int sendtotal, int curdaysend) {
		this();
		this.retcode = retcode;
		setRetcodeIsSet(true);
		this.message = message;
		this.stockremain = stockremain;
		setStockremainIsSet(true);
		this.points = points;
		setPointsIsSet(true);
		this.sendtotal = sendtotal;
		setSendtotalIsSet(true);
		this.curdaysend = curdaysend;
		setCurdaysendIsSet(true);
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public StockRet(StockRet other) {
		__isset_bitfield = other.__isset_bitfield;
		this.retcode = other.retcode;
		if (other.isSetMessage()) {
			this.message = other.message;
		}
		this.stockremain = other.stockremain;
		this.points = other.points;
		this.sendtotal = other.sendtotal;
		this.curdaysend = other.curdaysend;
	}

	public StockRet deepCopy() {
		return new StockRet(this);
	}

	@Override
	public void clear() {
		setRetcodeIsSet(false);
		this.retcode = false;
		this.message = null;
		setStockremainIsSet(false);
		this.stockremain = 0;
		setPointsIsSet(false);
		this.points = 0;
		setSendtotalIsSet(false);
		this.sendtotal = 0;
		setCurdaysendIsSet(false);
		this.curdaysend = 0;
	}

	public boolean isRetcode() {
		return this.retcode;
	}

	public StockRet setRetcode(boolean retcode) {
		this.retcode = retcode;
		setRetcodeIsSet(true);
		return this;
	}

	public void unsetRetcode() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RETCODE_ISSET_ID);
	}

	/**
	 * Returns true if field retcode is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetRetcode() {
		return EncodingUtils.testBit(__isset_bitfield, __RETCODE_ISSET_ID);
	}

	public void setRetcodeIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RETCODE_ISSET_ID, value);
	}

	public String getMessage() {
		return this.message;
	}

	public StockRet setMessage(String message) {
		this.message = message;
		return this;
	}

	public void unsetMessage() {
		this.message = null;
	}

	/**
	 * Returns true if field message is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetMessage() {
		return this.message != null;
	}

	public void setMessageIsSet(boolean value) {
		if (!value) {
			this.message = null;
		}
	}

	public int getStockremain() {
		return this.stockremain;
	}

	public StockRet setStockremain(int stockremain) {
		this.stockremain = stockremain;
		setStockremainIsSet(true);
		return this;
	}

	public void unsetStockremain() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STOCKREMAIN_ISSET_ID);
	}

	/**
	 * Returns true if field stockremain is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetStockremain() {
		return EncodingUtils.testBit(__isset_bitfield, __STOCKREMAIN_ISSET_ID);
	}

	public void setStockremainIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STOCKREMAIN_ISSET_ID, value);
	}

	public int getPoints() {
		return this.points;
	}

	public StockRet setPoints(int points) {
		this.points = points;
		setPointsIsSet(true);
		return this;
	}

	public void unsetPoints() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POINTS_ISSET_ID);
	}

	/**
	 * Returns true if field points is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetPoints() {
		return EncodingUtils.testBit(__isset_bitfield, __POINTS_ISSET_ID);
	}

	public void setPointsIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POINTS_ISSET_ID, value);
	}

	public int getSendtotal() {
		return this.sendtotal;
	}

	public StockRet setSendtotal(int sendtotal) {
		this.sendtotal = sendtotal;
		setSendtotalIsSet(true);
		return this;
	}

	public void unsetSendtotal() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SENDTOTAL_ISSET_ID);
	}

	/**
	 * Returns true if field sendtotal is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetSendtotal() {
		return EncodingUtils.testBit(__isset_bitfield, __SENDTOTAL_ISSET_ID);
	}

	public void setSendtotalIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SENDTOTAL_ISSET_ID, value);
	}

	public int getCurdaysend() {
		return this.curdaysend;
	}

	public StockRet setCurdaysend(int curdaysend) {
		this.curdaysend = curdaysend;
		setCurdaysendIsSet(true);
		return this;
	}

	public void unsetCurdaysend() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURDAYSEND_ISSET_ID);
	}

	/**
	 * Returns true if field curdaysend is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetCurdaysend() {
		return EncodingUtils.testBit(__isset_bitfield, __CURDAYSEND_ISSET_ID);
	}

	public void setCurdaysendIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURDAYSEND_ISSET_ID, value);
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case RETCODE:
			if (value == null) {
				unsetRetcode();
			} else {
				setRetcode((Boolean) value);
			}
			break;

		case MESSAGE:
			if (value == null) {
				unsetMessage();
			} else {
				setMessage((String) value);
			}
			break;

		case STOCKREMAIN:
			if (value == null) {
				unsetStockremain();
			} else {
				setStockremain((Integer) value);
			}
			break;

		case POINTS:
			if (value == null) {
				unsetPoints();
			} else {
				setPoints((Integer) value);
			}
			break;

		case SENDTOTAL:
			if (value == null) {
				unsetSendtotal();
			} else {
				setSendtotal((Integer) value);
			}
			break;

		case CURDAYSEND:
			if (value == null) {
				unsetCurdaysend();
			} else {
				setCurdaysend((Integer) value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case RETCODE:
			return isRetcode();

		case MESSAGE:
			return getMessage();

		case STOCKREMAIN:
			return getStockremain();

		case POINTS:
			return getPoints();

		case SENDTOTAL:
			return getSendtotal();

		case CURDAYSEND:
			return getCurdaysend();

		}
		throw new IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned
	 * a value) and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case RETCODE:
			return isSetRetcode();
		case MESSAGE:
			return isSetMessage();
		case STOCKREMAIN:
			return isSetStockremain();
		case POINTS:
			return isSetPoints();
		case SENDTOTAL:
			return isSetSendtotal();
		case CURDAYSEND:
			return isSetCurdaysend();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof StockRet)
			return this.equals((StockRet) that);
		return false;
	}

	public boolean equals(StockRet that) {
		if (that == null)
			return false;

		boolean this_present_retcode = true;
		boolean that_present_retcode = true;
		if (this_present_retcode || that_present_retcode) {
			if (!(this_present_retcode && that_present_retcode))
				return false;
			if (this.retcode != that.retcode)
				return false;
		}

		boolean this_present_message = true && this.isSetMessage();
		boolean that_present_message = true && that.isSetMessage();
		if (this_present_message || that_present_message) {
			if (!(this_present_message && that_present_message))
				return false;
			if (!this.message.equals(that.message))
				return false;
		}

		boolean this_present_stockremain = true;
		boolean that_present_stockremain = true;
		if (this_present_stockremain || that_present_stockremain) {
			if (!(this_present_stockremain && that_present_stockremain))
				return false;
			if (this.stockremain != that.stockremain)
				return false;
		}

		boolean this_present_points = true;
		boolean that_present_points = true;
		if (this_present_points || that_present_points) {
			if (!(this_present_points && that_present_points))
				return false;
			if (this.points != that.points)
				return false;
		}

		boolean this_present_sendtotal = true;
		boolean that_present_sendtotal = true;
		if (this_present_sendtotal || that_present_sendtotal) {
			if (!(this_present_sendtotal && that_present_sendtotal))
				return false;
			if (this.sendtotal != that.sendtotal)
				return false;
		}

		boolean this_present_curdaysend = true;
		boolean that_present_curdaysend = true;
		if (this_present_curdaysend || that_present_curdaysend) {
			if (!(this_present_curdaysend && that_present_curdaysend))
				return false;
			if (this.curdaysend != that.curdaysend)
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		List<Object> list = new ArrayList<Object>();

		boolean present_retcode = true;
		list.add(present_retcode);
		if (present_retcode)
			list.add(retcode);

		boolean present_message = true && (isSetMessage());
		list.add(present_message);
		if (present_message)
			list.add(message);

		boolean present_stockremain = true;
		list.add(present_stockremain);
		if (present_stockremain)
			list.add(stockremain);

		boolean present_points = true;
		list.add(present_points);
		if (present_points)
			list.add(points);

		boolean present_sendtotal = true;
		list.add(present_sendtotal);
		if (present_sendtotal)
			list.add(sendtotal);

		boolean present_curdaysend = true;
		list.add(present_curdaysend);
		if (present_curdaysend)
			list.add(curdaysend);

		return list.hashCode();
	}

	@Override
	public int compareTo(StockRet other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = Boolean.valueOf(isSetRetcode()).compareTo(other.isSetRetcode());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetRetcode()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.retcode, other.retcode);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetMessage()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetStockremain()).compareTo(other.isSetStockremain());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStockremain()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stockremain, other.stockremain);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetPoints()).compareTo(other.isSetPoints());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPoints()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.points, other.points);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetSendtotal()).compareTo(other.isSetSendtotal());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSendtotal()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sendtotal, other.sendtotal);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetCurdaysend()).compareTo(other.isSetCurdaysend());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCurdaysend()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.curdaysend, other.curdaysend);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("StockRet(");
		boolean first = true;

		sb.append("retcode:");
		sb.append(this.retcode);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("message:");
		if (this.message == null) {
			sb.append("null");
		} else {
			sb.append(this.message);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("stockremain:");
		sb.append(this.stockremain);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("points:");
		sb.append(this.points);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("sendtotal:");
		sb.append(this.sendtotal);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("curdaysend:");
		sb.append(this.curdaysend);
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java
			// serialization is wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class StockRetStandardSchemeFactory implements SchemeFactory {
		public StockRetStandardScheme getScheme() {
			return new StockRetStandardScheme();
		}
	}

	private static class StockRetStandardScheme extends StandardScheme<StockRet> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, StockRet struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // RETCODE
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.retcode = iprot.readBool();
						struct.setRetcodeIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // MESSAGE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.message = iprot.readString();
						struct.setMessageIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // STOCKREMAIN
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.stockremain = iprot.readI32();
						struct.setStockremainIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // POINTS
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.points = iprot.readI32();
						struct.setPointsIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // SENDTOTAL
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.sendtotal = iprot.readI32();
						struct.setSendtotalIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 6: // CURDAYSEND
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.curdaysend = iprot.readI32();
						struct.setCurdaysendIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be
			// checked in the validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, StockRet struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			oprot.writeFieldBegin(RETCODE_FIELD_DESC);
			oprot.writeBool(struct.retcode);
			oprot.writeFieldEnd();
			if (struct.message != null) {
				oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
				oprot.writeString(struct.message);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(STOCKREMAIN_FIELD_DESC);
			oprot.writeI32(struct.stockremain);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(POINTS_FIELD_DESC);
			oprot.writeI32(struct.points);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(SENDTOTAL_FIELD_DESC);
			oprot.writeI32(struct.sendtotal);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(CURDAYSEND_FIELD_DESC);
			oprot.writeI32(struct.curdaysend);
			oprot.writeFieldEnd();
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class StockRetTupleSchemeFactory implements SchemeFactory {
		public StockRetTupleScheme getScheme() {
			return new StockRetTupleScheme();
		}
	}

	private static class StockRetTupleScheme extends TupleScheme<StockRet> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, StockRet struct)
				throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			BitSet optionals = new BitSet();
			if (struct.isSetRetcode()) {
				optionals.set(0);
			}
			if (struct.isSetMessage()) {
				optionals.set(1);
			}
			if (struct.isSetStockremain()) {
				optionals.set(2);
			}
			if (struct.isSetPoints()) {
				optionals.set(3);
			}
			if (struct.isSetSendtotal()) {
				optionals.set(4);
			}
			if (struct.isSetCurdaysend()) {
				optionals.set(5);
			}
			oprot.writeBitSet(optionals, 6);
			if (struct.isSetRetcode()) {
				oprot.writeBool(struct.retcode);
			}
			if (struct.isSetMessage()) {
				oprot.writeString(struct.message);
			}
			if (struct.isSetStockremain()) {
				oprot.writeI32(struct.stockremain);
			}
			if (struct.isSetPoints()) {
				oprot.writeI32(struct.points);
			}
			if (struct.isSetSendtotal()) {
				oprot.writeI32(struct.sendtotal);
			}
			if (struct.isSetCurdaysend()) {
				oprot.writeI32(struct.curdaysend);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, StockRet struct)
				throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			BitSet incoming = iprot.readBitSet(6);
			if (incoming.get(0)) {
				struct.retcode = iprot.readBool();
				struct.setRetcodeIsSet(true);
			}
			if (incoming.get(1)) {
				struct.message = iprot.readString();
				struct.setMessageIsSet(true);
			}
			if (incoming.get(2)) {
				struct.stockremain = iprot.readI32();
				struct.setStockremainIsSet(true);
			}
			if (incoming.get(3)) {
				struct.points = iprot.readI32();
				struct.setPointsIsSet(true);
			}
			if (incoming.get(4)) {
				struct.sendtotal = iprot.readI32();
				struct.setSendtotalIsSet(true);
			}
			if (incoming.get(5)) {
				struct.curdaysend = iprot.readI32();
				struct.setCurdaysendIsSet(true);
			}
		}
	}

}
